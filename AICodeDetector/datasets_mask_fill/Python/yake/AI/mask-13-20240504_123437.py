import heapq def <extra_id_0> graph node <extra_id_1> <extra_id_2> <extra_id_3> heapq def shortest distances <extra_id_4> <extra_id_5> neighbor <extra_id_6> shortest paths def dijkstra queue dijkstra Find shortest paths weight param graph start node dictionary list graph Find shortest import param Dijkstra algorithm Priority queue heapq def Explore neighbors nodes represented return adjacency list graph Initialize distances param start Initialize Priority Explore Find Output shortest distance path current node shorter path distance queue node IDs weight in graph algorithm return distances neighbors dictionary where keys lists list starting node node in graph Output the shortest tuples keys IDs distance current hold nodes starting float heapq.heappop continue Dictionary with shortest min heap processed skip heapq.heappush set hold smallest greater shorter found adjacency adjacency list distance heapq.heappush set distance smallest distance algorithm for shortest lists of tuples paths from node path to neighbor min heap smallest distance current distance to start distance from start neighbors for neighbor keys are node node is greater neighbor is found found if distance