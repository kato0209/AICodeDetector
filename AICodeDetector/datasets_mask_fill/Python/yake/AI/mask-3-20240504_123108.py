Make predictions predictions import datasets import self.bias return np.sign sklearn import datasets datasets import matplotlib.pyplot decision boundary fig Plot decision boundary Train the SVM X.shape self.weights iters self.weights Make predictions param self.n SVM clf <extra_id_0> Ensure label Gradient descent Create a grid <extra_id_1> decision boundary rate self.lambda self.weights class LinearSVM <extra_id_2> def predict min max predictions predictions self.bias return self.lr import numpy <extra_id_3> import datasets datasets import import matplotlib.pyplot param return np.sign <extra_id_4> matplotlib.pyplot as plt <extra_id_5> iters idx Plot decision self.bias features np.dot <extra_id_6> data from sklearn import def learning lambda samples np.where <extra_id_7> output ax.get <extra_id_8> plot plt.show plot decision LinearSVM rate self.n condition boundary ax.contourf boundary Initialize X.shape Ensure Gradient Generate Train Make Plotting Create data predictions SVM grid to plot clf.predict xlim ylim Show the plot plot the decision init np.zeros main datasets.make blobs centers cluster std random state clf.fit plt.subplots ax.scatter marker np.meshgrid ax.set fit range enumerate predict np.sign clf fig numpy class parameters label descent return usage sklearn datasets matplotlib.pyplot plt grid Show np.c xx.ravel yy.ravel reshape xx.shape alpha ax.contourf plt.show