<extra_id_0> model class GCN environment as PyTorch <extra_id_1> simple GNN model GNN model class data <extra_id_2> model <extra_id_3> Note <extra_id_4> <extra_id_5> class GCN import Planetoid return F.log Importing <extra_id_6> data.test Cora <extra_id_7> GNN model Geometric Define a simple simple GNN Planetoid device import def forward optimizer device init dataset.num dim loss data.train data.y pred correct item torch cpu model model model.train model model.eval GCNConv dataset accuracy libraries installed Initialize the model Train the model Evaluate the model import torch torch import geometric.nn import geometric.datasets import model class epoch in range test set dataset dataset import GCNConv code executed environment PyTorch def F.relu F.dropout F.nll Load a dataset Output the accuracy Define F.log Load Initialize Train Evaluate Output optimizer GNN super node features classes data.x data.edge training self.training softmax root tmp torch.device cuda model.parameters weight decay optimizer.zero grad loss.backward optimizer.step max sum mask.sum geometric.nn geometric.datasets forward return cpu model.train range model.eval set GCNConv from torch simple class epoch test model and optimizer