JOBS sparse awesome result cossim pruned csr ntop <extra_id_0> dense CANDIDATES candidates CANDIDATES candidates selected CANDIDATES topn dtype threads NUM matrix row test PRUNE <extra_id_1> top LIST <extra_id_2> top NUM THRESHOLD similarity pruned import <extra_id_3> nnz <extra_id_4> vocab density import pytest PRUNE assert <extra_id_5> <extra_id_6> helper array sparse matrix THRESHOLD similarity <extra_id_7> <extra_id_8> topn import awesome candidate selection candidate scipy.sparse import True import rand import astype def test return row.data assert awesome csr astype pick import awesome pd.isnull np.all similarity pruned ignore result.nnz Comparing Changing import csr multiprocessing import pytest row in pruned flag lower bound rand CSR matrix pruned assert pruned zip def awesome Changing the sparsity assert len topn import assert pruned similarity prune low format assert max pytest PRUNE scipy.sparse import rand import numpy import pandas import multiprocessing multiprocessing import import pytest PROCESSES function scipy.sparse import coo range Comparing a sparse samples size function awesome pruned assert row.indices dot product max rand import numpy selected running awesome row in sparse row.nnz equal selection pruning scipy.sparse cols data expensive scalar greater sparsity structure import rand rand import results pruning assert awesome prune low similarity row.nnz for row sparse sparse sparse pruned import coo topn sparse