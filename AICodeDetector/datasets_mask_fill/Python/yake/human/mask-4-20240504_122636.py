threading import Condition Main thread exiting threading import current random class BlockingQueue threading import Thread time import random import random class thread import time import time import return item def item def enqueue threading import True import Condition Main thread Thread class BlockingQueue thread exiting import current random class blocking def consumer def producer import time time import import random Condition from threading import Thread thread import def dequeue def enqueue size self.curr self.curr target args daemon return item consumed item ncurrent size size item print time.sleep item def import threading <extra_id_0> Condition consumer producer main <extra_id_1> self.max format <extra_id_2> <extra_id_3> BlockingQueue val Thread from threading init <extra_id_4> self.q q.dequeue getName random.randint q.enqueue dequeue return enqueue ncurrent queue consumed exiting size of queue time random class