raise NotImplementedError raise NotImplementedError def raise NotImplementedError class <extra_id_0> <extra_id_1> NotImplementedError def delta <extra_id_2> def delta <extra_id_3> <extra_id_4> delta import numpy raise cost function NotImplementedError class SquaredError <extra_id_5> call NotImplementedError self.epsilon NotImplementedError class class return cost def simple cost function clipped class Cost Logistic cost function simple cost import return delta target class target class CrossEntropy Logistic cost function numpy SquaredError np.log classification epsilon denominator return prediction prediction.shape return delta class SquaredError Fast and simple epsilon def class CrossEntropy Fast simple CrossEntropy Logistic tasks Learns exponentially init np.clip np.maximum target.shape classification tasks faster beginning large errors penalized delta.shape prediction.shape makes sense predicted assert prediction.shape return denominator assert Learns faster penalized exponentially large errors errors are penalized beginning than SquaredError SquaredError because large assert delta.shape makes sense sense in classification denominator assert delta.shape