term <extra_id_0> Compute Rocchio vector relevant documents weights Rocchio BETA weight weights relevant documents <extra_id_1> query vector doc <extra_id_2> Compute Rocchio Rocchio import constants documents weights <extra_id_3> Implement Rocchio algo tfVector <extra_id_4> Rocchio vector vector <extra_id_5> <extra_id_6> <extra_id_7> <extra_id_8> relevantDocsTFWeights nonrelevantDocsTFWeights query documents relevant Rocchio import documentsList weight weights Implement Rocchio Rocchio algo IDF p.stem term.lower len initialize weight vector unique term constants.STEM Terms import NonRelevant documents weights invertedFile Rocchio algorithm import constants import import math import import sys import weights normalized Compute BETA Compute relevantDocsTFWeights weight weight vector weights elif weights constants import math math import sys sys import PorterStemmer import PorterStemmer class term in doc term in invertedFile.iterkeys relevantDocs nonrelevantDocs PorterStemmer class RocchioOptimizeQuery firstQueryTerm nonrelevantDocsTFWeights vectors def corpus of relevant NonRelevant documents calculate IDF import constants constants import import math math import import sys sys import import PorterStemmer float summation of relevant invertedFile.iterkeys terms if term weighting based calculate normalized class RocchioOptimizeQuery inverted file initialize weight Constructor self.query return self.query based on td-idf td-idf to iteratively iteratively form PorterStemmer class weights elif elif weights file print relevantDocsTFWeights output new query build new query vector for term inverted file print passed into Rocchio vectors term in self.query print relevantDocsTFWeights vectors for docId calculate summation file print init weighting weightings docId in invertedFile Implement dictionaries passed RocchioOptimizeQuery vector of weightings algo corpus based td-idf iteratively form unique constants math sys