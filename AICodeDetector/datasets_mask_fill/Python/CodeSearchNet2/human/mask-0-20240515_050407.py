if not dtype_util.is_integer(shape.dtype): <extra_id_0> TypeError('{} dtype ({}) should be `int`-like.'.format( shape, dtype_util.name(shape.dtype))) <extra_id_1> = [] message = '`{}` <extra_id_2> should be <= 1.' if tensorshape_util.rank(shape.shape) is not None: if tensorshape_util.rank(shape.shape) > 1: raise ValueError(message.format(shape)) <extra_id_3> validate_args: assertions.append(assert_util.assert_less( tf.rank(shape), 2, message=message.format(shape))) shape_ = tf.get_static_value(shape) message = '`{}` <extra_id_4> must have at most one `-1`.' if shape_ is not None: if sum(shape_ == -1) > 1: raise ValueError(message.format(shape)) elif validate_args: assertions.append(assert_util.assert_less( tf.reduce_sum(input_tensor=tf.cast(tf.equal(shape, -1), tf.int32)),