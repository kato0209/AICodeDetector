[
    {
        "original": "def get_simple_split(branchfile):\n    parts = branchfile.split(\"/\")\n    if len(parts) >= 2:\n        return parts[0], parts[1]\n    else:\n        return None\n\n# Test cases\nprint(get_simple_split(\"branch/file.txt\"))  # Output: ('branch', 'file.txt')\nprint(get_simple_split(\"anotherbranch/file.txt\"))  # Output: ('anotherbranch', 'file.txt')\nprint(get_simple_split(\"onlyfile.txt\"))  # Output: None",
        "rewrite": "def get_simple_split(branchfile): parts = branchfile.split(\"/\") return (parts[0], \"/\".join(parts[1:])) if len(parts) > 1 else None # Test cases print(get_simple_split(\"branch/file.txt\")) # Output: ('branch', 'file.txt') print(get_simple_split(\"anotherbranch/file.txt\")) # Output: ('anotherbranch', 'file.txt') print(get_simple_split(\"onlyfile.txt\")) # Output: None"
    },
    {
        "original": "def migrate_non_shared(vm_, target, ssh=False):\n    \"\"\"\n    Attempt to execute non-shared storage \"all\" migration\n\n    :param vm_: domain name\n    :param target: target libvirt host name\n    :param ssh: True to connect over ssh\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' virt.migrate_non_shared <vm name> <target hypervisor>\n\n    A tunnel data migration can be performed by setting this in the\n    configuration:\n\n    .. code-block:: yaml\n\n        virt:\n            tunnel: True\n\n    For more details on tunnelled data migrations, report to\n    https://libvirt.org/migration.html#transporttunnel\n    \"\"\"\n    # Implement your solution here\n    pass",
        "rewrite": "def migrate_non_shared(vm_, target, ssh=False): \"\"\" Attempt to execute non-shared storage \"all\" migration :param vm_: domain name :param target: target libvirt host name :param ssh: True to connect over ssh CLI Example: .. code-block:: bash salt '*' virt.migrate_non_shared <vm name> <target hypervisor> A tunnel data migration can be performed by setting this in the configuration: .. code-block:: yaml virt: tunnel: True For more details on tunnelled data migrations, report to https://libvirt.org/migration.html#transporttunnel \"\"\" migrate_command = _get_migrate_command() target_option = _get_target(target, ssh) cmd = f\"{migrate_command} --copy-storage-all {vm_} {target_option}\" process = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True) if process.returncode == 0: return process.stdout.strip() else: raise RuntimeError(f\"Migration failed: {process.stderr}\")"
    },
    {
        "original": "import hashlib\n\ndef auth_user_oid(self, email):\n    hashed_email = hashlib.md5(email.encode()).hexdigest()\n    if self.openid_hash == hashed_email:\n        return True\n    else:\n        return False",
        "rewrite": "import hashlib def auth_user_oid(self, email): return self.openid_hash == hashlib.md5(email.encode()).hexdigest()"
    }
]
