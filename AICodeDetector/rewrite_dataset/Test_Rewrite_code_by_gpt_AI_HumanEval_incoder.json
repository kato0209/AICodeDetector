[
    {
        "original": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n, ",
        "rewrite": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)"
    },
    {
        "original": "<code>\ndef pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    Examples:\n    >>> pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return pile(n // 2)\n    else:\n        return pile(n // 2) + [",
        "rewrite": "def pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    Examples:\n    >>> pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + pile(n + 1)\n    else:\n        return [n] + pile(n + 2)"
    },
    {
        "original": "<code>\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split(',')\n    return words\n</code>\n<|/ a tags=python,string |>\n<| c |>\nThanks so much",
        "rewrite": "```python\ndef words_string(s):\n    words = s.replace(',', ' ').split()\n    return words\n```"
    },
    {
        "original": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n        else:\n            return y\n    else:\n        return -1\n<|/ c |>\n<| c |>\n: I added a comment to my answer about your `choose_num` function.\n<|/ c |>\n<| ",
        "rewrite": "def choose_num(x, y):\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return max(x, y)\n        else:\n            return x\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1"
    },
    {
        "original": "<code>\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    binary = bin(n)\n    binary = bin",
        "rewrite": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)"
    },
    {
        "original": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    Note: Returned list should be sorted in increasing order.\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n, no explanation, just code:\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    Note: Returned list should be sorted in increasing order.",
        "rewrite": "def unique_digits(x):\n    res = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            res.append(num)\n    \n    return sorted(res)"
    },
    {
        "original": "<code>\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      If the array ",
        "rewrite": "def by_length(arr):\n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_arr = sorted_arr[::-1]\n    return [num_names[num-1] for num in reversed_arr]\n</code>"
    },
    {
        "original": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n, no explanation, just code:\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i ",
        "rewrite": "def f(n):\n    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]"
    },
    {
        "original": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    Example 1:\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    Example 2:\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.",
        "rewrite": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"
    },
    {
        "original": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n, no explanation, just code:\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is ",
        "rewrite": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count"
    },
    {
        "original": "<code>\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n    If it is possible to obtain the sorted array ",
        "rewrite": "def move_one_ball(arr):\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False</code>"
    },
    {
        "original": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input list",
        "rewrite": "def exchange(lst1, lst2):\n    sum1 = sum(i % 2 for i in lst1)\n    sum2 = sum(i % 2 for i in lst2)\n    \n    if sum1 > 0:\n        return \"NO\"\n    \n    return \"YES\""
    },
    {
        "original": "<code>\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    letters = {}\n    for letter in test.split():",
        "rewrite": "def histogram(test):\n    letters = {}\n    for letter in test.split():\n        if letter in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] = 1\n    max_count = max(letters.values())\n    return {letter: count for letter, count in letters.items() if count == max_count}"
    },
    {
        "original": "<code>\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)",
        "rewrite": "def reverse_delete(s, c):\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])"
    },
    {
        "original": "<code>\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8",
        "rewrite": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(\"the number of odd elements in the string {} of the input.\".format(odd_count))\n    return result\n\nprint(odd_count(['1234567'])) # [\"the number of odd elements in the string 4 of the input.\"]\nprint(odd_count(['3', '11111111'])) # [\"the number of odd elements in the string 1 of the input.\", \"the number of odd elements in the string 8 of the input.\"]"
    },
    {
        "original": "<code>\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"",
        "rewrite": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))  # Output: -6\n</code>"
    },
    {
        "original": "<code>\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n    Example 2:\n        Input: ",
        "rewrite": "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total_water = 0\n    \n    for row in grid:\n        ones_in_row = sum(row)\n        total_water += ones_in_row\n    \n    return total_water * capacity\n\ngrid1 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\ncapacity1 = 1\nprint(max_fill(grid1, capacity1))  # Output: 6\n\ngrid2 = [[0, 1, 1, 0], [1, 1, 0, 1], [0, 0, 0, 1]]\ncapacity2 = 2\nprint(max_fill(grid2, capacity2))  # Output: 10</code>"
    },
    {
        "original": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n, no explanation, just code:\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to",
        "rewrite": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))"
    },
    {
        "original": "<code>\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> ",
        "rewrite": "def select_words(s, n):\n    #Given a string s and a natural number n, the function returns a list of words that contain exactly n consonants \n    words = s.split()\n    result = []\n    for word in words:\n        if len([c for c in word.lower() if c not in 'aeiou']) == n:\n            result.append(word)\n    return result\n</code>"
    },
    {
        "original": "<code>\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    You may assume that the given string contains English letter only.\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab",
        "rewrite": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word) - 3, 0, -1):\n        if word[i] in vowels and word[i - 1] in consonants and word[i + 1] in consonants:\n            return word[i]\n    return \"\"</code>"
    },
    {
        "original": "<code>\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'",
        "rewrite": "def match_parens(lst):\n    open_paren_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_paren_count += 1\n            else:\n                if open_paren_count == 0:\n                    return 'No'\n                open_paren_count -= 1\n    if open_paren_count == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "original": "<code>\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    Example 1:\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n    Example 2:\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n    Example 3:\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-",
        "rewrite": "def maximum(arr, k):\n    return sorted(arr)[-k:]\n</code>"
    },
    {
        "original": "<code>\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            odd_sum += num\n    return odd_sum\n</code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nThank you so much! ",
        "rewrite": "<code>\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum\n</code>"
    },
    {
        "original": "<code>\ndef sum_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    Example:\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n        else:\n            sum += arr[i] + arr[i//2]\n    return sum + sum_element",
        "rewrite": "def sum_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"
    },
    {
        "original": "<code>\ndef collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    Note: \n        1. Col",
        "rewrite": "def collatz(n):\n    collatz_list = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_list.append(n)\n    return sorted([num for num in collatz_list if num % 2 != 0])"
    },
    {
        "original": "<code>\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    for ",
        "rewrite": "def valid_date(date):\n    if date == \"\":\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if int(month) < 1 or int(month) > 12:\n        return False\n    \n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) < 1 or int(day) > 31:\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if int(day) < 1 or int(day) > 30:\n            return False\n    elif int(month) == 2:\n        if int(day) < 1 or int(day) > 29:\n            return False\n    \n    return True\n</code>"
    },
    {
        "original": "<code>\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    words = txt.split()",
        "rewrite": "def split_words(txt):\n    words = txt.split()\n    return words"
    },
    {
        "original": "<code>\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]",
        "rewrite": "def is_sorted(lst):\n    if lst == sorted(set(lst)):\n        return True\n    return False"
    },
    {
        "original": "<code>\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, ",
        "rewrite": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    intersection_length = end - start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n</code>"
    },
    {
        "original": "<code>\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    signs = [1, -1]\n    product = 1\n    for num in arr:\n        product *= num\n        sign = signs.pop()\n        if sign == -1:\n            product *= -1\n    return product\n</code>",
        "rewrite": "<code>\ndef prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    signs = [1, -1]\n    product = 1\n    for num in arr:\n        product *= num\n        sign = signs.pop()\n        if sign == -1:\n            product *= -1\n    return product\n</code>"
    },
    {
        "original": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).",
        "rewrite": "def minPath(grid, k):\n    N = len(grid)\n    if not grid or N < 2:\n        return 0\n    def dfs(i, j, k):\n        if k == 0:\n            return 0\n        min_val = float('inf')\n        for ni, nj in [(i - 1, j), (i, j - 1), (i + 1, j), (i, j + 1)]:\n            if 0 <= ni < N and 0 <= nj < N and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                min_val = min(min_val, dfs(ni, nj, k - 1) + abs(grid[ni][nj] - grid[i][j]))\n                visited.remove((ni, nj))\n        return min_val\n    visited = set()\n    min_len = float('inf')\n    for i in range(N):\n        for j in range(N):\n            visited.add((i, j))\n            min_len = min(min_len, dfs(i, j, k - 1))\n            visited.remove((i, j))\n    return min_len"
    },
    {
        "original": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = ",
        "rewrite": "def tri(n):\n    if n == 1:\n        return 3\n    elif n % 2 == 0:\n        return 1 + n / 2\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)"
    },
    {
        "original": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n, no explanation, just code:\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n, no explanation, just code:\ndef digits(n):\n    \"\"\"Given ",
        "rewrite": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.\"\"\"\n    return 0 if all(int(d) % 2 == 0 for d in str(n)) else eval('*'.join(d for d in str(n) if int(d) % 2 != 0))"
    },
    {
        "original": "<code>\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True",
        "rewrite": "def is_nested(string):\n    return (\"[\" in string and \"]\" in string) or string.count(\"]\") > string.count(\"[\") and string.count(\"[\") > 0 or string.count(\"]\") > 0 and string.index(\"]\") < string.index(\"[\") < string.rindex(\"]\")"
    },
    {
        "original": "<code>\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    lst = map(lambda x: round(x, 2), lst)\n    return sum(lst)\n</code>\n<|/",
        "rewrite": "```python\ndef sum_squares(lst):\n    lst = list(map(lambda x: int((x+0.5) // 1), lst))\n    return sum([x**2 for x in lst])\n```"
    },
    {
        "original": "<code>\ndef last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in \"aeiou\"\n</code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nThanks so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in \"aeiou\"\n</code>\n<|/ a tags=python,python-3.x ",
        "rewrite": "def last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in \"aeiou\""
    },
    {
        "original": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n, no explanation, just code:\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    Examples:",
        "rewrite": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index"
    },
    {
        "original": "<code>\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    largest, smallest = lst[0], lst[0]\n    for num in lst:\n        if num < 0:\n            largest -= num\n        else:",
        "rewrite": "<code>\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negative_nums = [num for num in lst if num < 0]\n    positive_nums = [num for num in lst if num > 0]\n    largest = max(negative_nums) if negative_nums else None\n    smallest = min(positive_nums) if positive_nums else None\n    return (largest, smallest)"
    },
    {
        "original": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n, no explanation, just code:\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that ",
        "rewrite": "def compare_one(a, b):\n    if type(a) == str:\n        a = float(a.replace(\",\", \".\"))\n    if type(b) == str:\n        b = float(b.replace(\",\", \".\"))\n        \n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "original": "<code>\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_even = 0\n    sum_odd = 1\n    while sum_even < n:\n        if n % sum_even == 0:\n            sum_even += 1\n        else:\n            sum_odd += 1\n    return sum_even == sum_odd\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question, which is about how to write python code (",
        "rewrite": "```python\ndef is_equal_to_sum_even(n):\n    count = n // 2\n    return count % 2 == 0 and count >= 2\n```"
    },
    {
        "original": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n    For example:\n    >>> special_factorial(4)\n    288\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n, no explanation, just code:\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where ",
        "rewrite": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact = fact * j\n        result = result * fact\n    return result"
    },
    {
        "original": "<code>\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \" _ \") # replace all spaces with underscores\n</code>\n<|/ a dscore=0 |>\n<| a tags=",
        "rewrite": "<code>\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result += \"-\"\n                consecutive_spaces = 0\n        else:\n            if consecutive_spaces > 0:\n                result += \"_\"\n            result += char\n            consecutive_spaces = 0\n    return result\n</code>"
    },
    {
        "original": "<code>\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these",
        "rewrite": "def file_name_check(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    if len(name) == 0 or not name[0].isalpha():\n        return 'No'\n    \n    valid_ext = ['pdf', 'txt', 'doc', 'html']\n    if ext not in valid_ext:\n        return 'No'\n    \n    return 'Yes'</code>"
    },
    {
        "original": "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"",
        "rewrite": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"
    },
    {
        "original": "<code>\nsentence = input(\"Enter a sentence: \")\nwords = sentence.split()\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, ",
        "rewrite": "```python\nsentence = input(\"Enter a sentence: \")\nwords = sentence.split()\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313]\n```"
    },
    {
        "original": "<code>\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    if n == '0':\n        return True\n    elif n",
        "rewrite": "def simplify(x, n):\n    fraction1 = x.split('/')\n    fraction2 = n.split('/')\n    result = int(fraction1[0]) * int(fraction2[0]) / (int(fraction1[1]) * int(fraction2[1])\n    return result.is_integer()"
    },
    {
        "original": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n, no explanation, just code:\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several item",
        "rewrite": "def order_by_points(nums):\n    nums.sort(key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n    return nums"
    },
    {
        "original": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n, no explanation, just code:\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9",
        "rewrite": "def specialFilter(nums):\n    return sum(num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0 for num in nums)"
    },
    {
        "original": "<code>\ndef triples_count(n):\n    triples = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            for k in range(1, j+1):\n                if i*i - j + k % 3 == 0:\n                    triples += 1\n    return triples \n</code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nThis doesn't answer the question at all. He wants to know how many triples there are that sum to `3*3*3`, not how many triples there are that sum to `3*3*3*3`.\n<|/ c |>\n<| c |>\n, thanks for your comment, i just updated my answer, hope it ",
        "rewrite": "<code>\ndef triples_count(n):\n    triples = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            for k in range(1, j+1):\n                if i + j + k == 3*3*3:\n                    triples += 1\n    return triples \n</code>"
    },
    {
        "original": "<code>\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if ",
        "rewrite": "def planets_between(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(sorted(planets[index1+1:index2], key=lambda x: planets.index(x))) if 0 <= index1 < len(planets) and 0 <= index2 < len(planets) else ()\n</code>"
    },
    {
        "original": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]",
        "rewrite": "def sorted_list_sum(lst):\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst"
    },
    {
        "original": "def x_or_y(n, x, y):\n    \"\"\"\n    A simple program which should return the value of x if n is a\n    prime number and should return the value of y otherwise.\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if n % x == 0:\n        return y\n    else:\n        return x\n<|/ c |>\n<| c |>\n: I added an explanation to the answer.\n<|/ c |>\n<| a |>\n<code>\ndef x_or_y(n, x, y):\n    \"\"\"\n    A simple program which should return the value of x if n is a\n    prime ",
        "rewrite": "def x_or_y(n, x, y):\n    is_prime = True\n    if n < 2:\n        is_prime = False\n    for i in range(2, int(n/2) + 1):\n        if n % i == 0:\n            is_prime = False\n            break\n    \n    if is_prime:\n        return x\n    else:\n        return y"
    },
    {
        "original": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    If the input list is empty, return 0.\n    '''\n, no explanation, just code:\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integ",
        "rewrite": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x > 0 and x % 2 != 0) if lst else 0"
    },
    {
        "original": "<code>\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute ",
        "rewrite": "def compare(game, guess):\n    return [abs(i - j) for i, j in zip(game, guess)]</code>"
    },
    {
        "original": "<code>\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that come",
        "rewrite": "def Strongest_Extension(class_name, extensions):\n    extensions_strength = {}\n    for extension in extensions:\n        uppercase_count = sum(1 for char in extension if char.isupper())\n        lowercase_count = sum(1 for char in extension if char.islower())\n        strength = uppercase_count - lowercase_count\n        extensions_strength[extension] = strength\n\n    strongest_extension = max(extensions_strength, key=extensions_strength.get)\n    return class_name + '.' + strongest_extension\n</code>"
    },
    {
        "original": "<code>\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"",
        "rewrite": "def cycpattern_check(a, b):\n    if b in a + a:\n        return True\n    return False\n</code>"
    },
    {
        "original": "<code>\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd = 1, 1\n    while num > 0:\n        even = num % 2\n        num = num // 2\n        odd = num % 2\n    return even, odd\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| ",
        "rewrite": "```python\ndef even_odd_count(num):\n    even, odd = 0, 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n```"
    },
    {
        "original": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'xix'\n    if number < 1000:\n        return str(number) + 'x'\n    numerals = [str(number), str(number/10), 'ix', 'iv', '",
        "rewrite": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'xix' \n    if number > 1000:\n        return 'Please use a value below or equal to 1000'\n    \n    numerals = ['', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xx', 'xxx', 'xl', 'l', 'lx', 'lxx', 'lxxx', 'xc', 'c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc', 'dccc', 'cm', 'm', 'mc', 'mcc', 'mccx', 'mccxx', 'mccxxx', 'mcccxl', 'mcccxl', 'mcd', 'mcdl', 'mcdlx', 'mcdlxx', 'mcml', 'mcm']\n\n    m = ''\n    remainder = number\n\n    if remainder >= 1000:\n        m += numerals[int(remainder / 1000) + 27]\n        remainder %= 1000\n\n    if remainder >= 100:\n        m += numerals[int(remainder / 100) + 18]\n        remainder %= 100\n\n    if remainder >= 10:\n        m += numerals[int(remainder / 10) + 9]\n        remainder %= 10\n    \n    if remainder > 0:\n        m += numerals[remainder]\n    \n    return m.lower()"
    },
    {
        "original": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n, no explanation, just code:\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-",
        "rewrite": "def right_angle_triangle(a, b, c):\n    c_square = max(a, b, c) ** 2\n    return c_square == (a ** 2 + b ** 2 + c ** 2 - c_square)  # Pythagorean theorem"
    },
    {
        "original": "<code>\ndef max_unique_chars(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    return ",
        "rewrite": "def max_unique_chars(words):\n    word_count = {}\n    for word in words:\n        chars = set(word)\n        unique_chars = len(chars)\n        word_count[word] = word_count.get(word, 0) + unique_chars\n    max_count = max(word_count.values())\n    max_words = [word for word, count in word_count.items() if count == max_count]\n    return sorted(max_words)[0] if max_words else \"\""
    },
    {
        "original": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, ",
        "rewrite": "def eat(number, need, remaining):    \n    total_eaten_carrots = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    \n    return [total_eaten_carrots, remaining_carrots]"
    },
    {
        "original": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n    Note:",
        "rewrite": "def do_algebra(operator, operand):\n    expression = ''\n    for i, op in enumerate(operator):\n        expression += str(operand[i])\n        expression += op\n    expression += str(operand[-1])\n    return eval(expression)"
    },
    {
        "original": "<code>\ndef solve(s):\n    s=s.lower()\n    s=s.upper()\n    s=s.replace(\"#\",\"\")\n    s=s.replace(\"@\",\"\")\n    s=s.replace(\"c\",\"\")\n    s=s.replace(\"a\",\"\")\n    return s\n</code>\n<|/ a tags=python,python-3.x |>\n<| c |>\n`s.replace(\"#\",\"\")` should be `s.replace(\"#\",\"\")`\n<|/ c |>\n<| c |>\n`s.replace(\"#\",\"\")` will replace all occurrences of `#` with an empty string. `s.replace(\"#\",\"\")` will replace all occurrences of `#` ",
        "rewrite": "<code>\ndef solve(s):\n    s = s.lower()\n    s = s.upper()\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"c\", \"\")\n    s = s.replace(\"a\", \"\")\n    return s\n</code>"
    },
    {
        "original": "<code>\n>>> import hashlib\n>>> hashlib.md5('Hello world').hexdigest()\n'3e25960a79dbc69b674cd4ec67a72c62'\n</code>\n<|/ a |>\n<| c |>\nThanks, I didn't know about this module. I'll check it out.\n<|/ c |>\n<| c |>\n: No problem. Just be aware that `md5` is considered a weak hashing algorithm, and that `md5` itself is considered a weak hashing algorithm. `hashlib` is much safer.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
        "rewrite": "<code>\nimport hashlib\nhashlib.sha256('Hello world'.encode()).hexdigest()\n</code>"
    },
    {
        "original": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"",
        "rewrite": "def generate_integers(a, b):\n    return [i for i in range(a, b + 1) if i % 2 == 0] if a < b else [i for i in range(b, a + 1) if i % 2 == 0]"
    }
]
