[
    {
        "original": "    return any(abs(numbers[i] - numbers[i + 1]) > threshold for i in range(len(numbers) - 1))\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0",
        "rewrite": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    return any(abs(numbers[i] - numbers[i + 1]) < threshold for i in range(len(numbers) - 1)"
    },
    {
        "original": "    return [paren_string[i:j] for i, j in find_paren_groups(paren_string)]\ndef find_paren_groups(paren_string: str) -> List[Tuple[int, int]]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    find the start and end index of each group and return the list of tuples.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> find_paren_groups('( )",
        "rewrite": "from typing import List, Tuple\n\ndef find_paren_groups(paren_string: str) -> List[Tuple[int, int]]:\n    start = []\n    res = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            start.append(i)\n        elif char == ')' and start:\n            res.append((start.pop(), i))\n    return res\n\ndef test_find_paren_groups():\n    assert find_paren_groups('()') == [(0, 1)]\n    assert find_paren_groups('()()') == [(0, 1), (2, 3)]\n    assert find_paren_groups('(())') == [(0, 1), (2, 3)]\n    assert find_paren_groups('( )(\" . No need to explain. Just write code:') == [(0, 1), (12, 15), (18, 27)]\n\ntest_find_paren_groups()"
    },
    {
        "original": "def truncate_number(number: float) -> float:\n    return number - int(number)\nprint(truncate_number(3.5))\nprint(truncate_number(3.9))\nprint(truncate_number(3.0))\nprint(truncate_number(3))\nprint(truncate_number(0.5))\nprint(truncate_number(0.0))\nprint(truncate_number(0))\nprint(truncate_number(-0.5))\nprint(truncate_number(-0.0))\nprint(truncate_number(-0))",
        "rewrite": "def truncate_number(number: float) -> float:\n    return number - int(number)\n\nprint(truncate_number(3.5))\nprint(truncate_number(3.9))\nprint(truncate_number(3.0))\nprint(truncate_number(3))\nprint(truncate_number(0.5))\nprint(truncate_number(0.0))\nprint(truncate_number(0))\nprint(truncate_number(-0.5))\nprint(truncate_number(-0.0))\nprint(truncate_number(-0))"
    },
    {
        "original": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False",
        "rewrite": "for operation in operations:\n    if operation < 0:\n        return True\nreturn False"
    },
    {
        "original": "    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)",
        "rewrite": "return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)"
    },
    {
        "original": "    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + [numbers[2]] + [delimeter] + [numbers[3]] + [delimeter] + [numbers[4]] + [delimeter] + [numbers[5]] + [delimeter] + [numbers[6]] + [delimeter] + [numbers[7]] + [delimeter] + [numbers[8]] + [delimeter] + [numbers[9]] + [delimeter] + [numbers[10]] + [delimeter] + [numbers[1",
        "rewrite": "return \" \".join(map(str, numbers)[:-1]) + \" \" + delimeter + \" \" + numbers[-1]"
    },
    {
        "original": "    return [len(re.findall(r'\\(', paren_string)) for paren_string in paren_string.split()]\ndef parse_nested_parens_2(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens_2('(()()) ((())) () ((())()",
        "rewrite": "import re\n\ndef parse_nested_parens_2(paren_string: str) -> List[int]:\n    return [len(re.findall(r'\\(', paren)) for paren in paren_string.split()]"
    },
    {
        "original": "    return [s for s in strings if substring in s]\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\ndef filter_by_substring(strings: List[str",
        "rewrite": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\nfilter_by_substring([], 'a')\nfilter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')"
    },
    {
        "original": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ +=",
        "rewrite": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in the list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product"
    },
    {
        "original": "    return [max(numbers[i - k:i + 1]) for i in range(len(numbers))]\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 2, 2, 2, 2]\n    \"\"\"\n, no explanation, just code:\n    return",
        "rewrite": "from typing import List\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    return [min(numbers[max(i-2,0):i+1]) for i in range(len(numbers))]"
    },
    {
        "original": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = ''\n    for i in range(len",
        "rewrite": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]\n    return string"
    },
    {
        "original": "    return bin(int(a, 2) ^ int(b, 2))[2:]\ndef string_xor_list(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list(['010', '110'], ['110', '010'])\n    ['100', '000']\n    \"\"\"\n,",
        "rewrite": "from typing import List\n\ndef string_xor_list(a: List[str], b: List[str]) -> List[str]:\n    return [bin(int(x, 2) ^ int(y, 2))[2:].zfill(len(x)) for x, y in zip(a, b)]"
    },
    {
        "original": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\ndef longest_with_default(strings: List[str], default: str = 'no strings') -> str:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return the default value in case the input list is empty.\n    >>> longest_with_default([])\n    'no strings'\n    >>>",
        "rewrite": "from typing import List\n\ndef longest_string(strings: List[str]) -> str:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\ndef longest_with_default(strings: List[str], default: str = 'no strings') -> str:\n    if not strings:\n        return default\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str\n\n#test cases\nprint(longest_with_default([]))"
    },
    {
        "original": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n# 2. Write a function that takes a string and returns a list of words in the string.\n# Example:\n# >>>",
        "rewrite": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n# 2. Write a function that takes a string and returns a list of words in the string.\n# Example:\n# >>>\" . No need to explain. Just write code:"
    },
    {
        "original": "    return [string[:i] for i in range(len(string) + 1)]\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \"\"\"\n, no explanation, just code:\n    return [string[i:] for i in range(len(string) + 1)]\ndef all_substrings(string: str) -> List[str]:\n    \"\"\" Return list of all substrings from",
        "rewrite": "return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]"
    },
    {
        "original": "def string_sequence(n: int) -> str:\n    return''.join(str(i) for i in range(n))\nprint(string_sequence(5))\n# + [markdown] id=\"33-45812\"\n# ## 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2",
        "rewrite": "def string_sequence(n: int) -> str:\n    return ''.join(str(i) for i in range(n))\n\nprint(string_sequence(5))"
    },
    {
        "original": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n# + [markdown] id=\"6-78-9865-691b-4272-975b-29107909157e\"\n# ## ",
        "rewrite": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"
    },
    {
        "original": "    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two be",
        "rewrite": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
    },
    {
        "original": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n# -\n# ## 2.1.2.2.2.1.2.2.2.2.2.2.",
        "rewrite": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    \"\"\"\n    if not string or not substring:\n        return 0\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+len(substring)] == substring:\n            count += 1\n            index += len(substring) - 1\n        index += 1\n    return count\n\n# Sample test cases\nprint(how_many_times('', 'a')) # Output: 0\nprint(how_many_times('aaa', 'a')) # Output: 3\nprint(how_many_times('aaaa', 'aa')) # Output: 3"
    },
    {
        "original": "    return''.join(sorted(numbers.split()))\ndef sort_numbers_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_2('three one five')\n    'one three five'\n    \"\"\"\n    return''.join(sorted(numbers.",
        "rewrite": "def sort_numbers_2(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_2('three one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split()))"
    },
    {
        "original": "    return (min(numbers), max(numbers))\ndef find_closest_elements_2(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements_2([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_",
        "rewrite": "from typing import List, Tuple\n\ndef find_closest_elements_2(numbers: List[float]) -> Tuple[float, float]:\n    numbers = sorted(numbers)  # sort numbers in ascending order\n    min_diff = float('inf')  # initialize min diff with infinite value \n    result = ()\n    \n    # iterate through the list\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]  # difference between two numbers\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])  # update result with closest numbers\n    return result\n\n# test cases\nprint(find_closest_elements_2([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Output: (2.0, 2.2)"
    },
    {
        "original": "    return [x / max(numbers) for x in numbers]\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75",
        "rewrite": "def rescale_to_unit(numbers: List[float]) -> List[float]: \n    return [x / max(numbers) for x in numbers]"
    },
    {
        "original": "    return [value for value in values if isinstance(value, int)]\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    []\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['abc']\n    \"\"\"\n, no explanation, just code:\n    return [value for value in values if isinstance(value, str)]\ndef filter_floats(values: List[Any]) ->",
        "rewrite": "\"    return [value for value in values if isinstance(value, float)]\""
    },
    {
        "original": "def strlen(string: str) -> int:\n    return len(string)\n# +\n# Write a function that takes a string and returns the number of vowels in the string.\ndef count_vowels(string: str) -> int:\n    \"\"\" Return number of vowels in given string\n    >>> count_vowels('abc')\n    2\n    >>> count_vowels('abracadabra')\n    5\n    \"\"\"\n# -\n# Write a function that takes a string and returns the number of vowels in the string.\ndef",
        "rewrite": "def count_vowels(string: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in string if char in vowels)"
    },
    {
        "original": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n# -\n# ## 2.2.2.2.1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.",
        "rewrite": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"
    },
    {
        "original": "    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "rewrite": "if n == 1:\n    return [1]\nfactors = []\nfor i in range(2, n + 1):\n    if n % i == 0:\n        factors.append(i)\n        n //= i\nreturn factors\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "    return list(set(numbers))\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))\ndef remove_duplicates_3(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all",
        "rewrite": "return list(dict.fromkeys(numbers))"
    },
    {
        "original": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n# 1. Write a function that takes a string and returns a new string with all the vowels replaced by the character 'x'.\n# 2. Write a function that takes a string and returns a new string with all the vowels replaced by the character 'x'.\n# 3. Write a function that takes a string and",
        "rewrite": "def replace_vowels_with_x(string: str) -> str:\n    \"\"\" For a given string, replaces all vowels with the character 'x'.\n    >>> replace_vowels_with_x('Hello')\n    'Hxllx'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(['x' if char in vowels else char for char in string])"
    },
    {
        "original": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
        "rewrite": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"
    },
    {
        "original": "    return [s for s in strings if s.startswith(prefix)]\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['bcd', 'cde']\n    \"\"\"\n, no explanation, just code:\n    return [s for s in strings if s.endswith(suffix)]\ndef filter",
        "rewrite": "_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    return [s for s in strings if s.endswith(suffix)]"
    },
    {
        "original": "def get_positive(l: list):\n    return [x for x in l if x > 0]\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\ndef",
        "rewrite": "def get_positive(l: list):\n    return [x for x in l if x > 0]"
    },
    {
        "original": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n %",
        "rewrite": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "original": "    if len(xs) % 2 == 0:\n        for i in range(len(xs) // 2):\n            if xs[i]!= 0:\n                return -xs[i] / xs[i + 1]\n    else:\n        return -xs[0] / xs[1]\ndef find_roots(xs: list):\n    \"\"\"\n    find_roots find all roots of polynomial with coefficients xs.\n    find_roots returns only zero points, even if there are many.\n    Moreover, find_roots only takes list xs having even number of coefficients\n    and largest non",
        "rewrite": "def find_roots(xs: list):\n    if len(xs) % 2 == 0:\n        for i in range(len(xs) // 2):\n            if xs[i] != 0:\n                root = -xs[i] / xs[i + 1]\n                if root == 0:\n                    return [0.0]\n        return None\n    else:\n        root = -xs[0] / xs[1]\n        return [root] if root == 0 else None"
    },
    {
        "original": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [",
        "rewrite": "def sort_third(l: list):\n     new_l = [x for x in l]\n     for i in range(0,len(new_l),3):\n         new_l[i:i+3] = sorted(new_l[i:i+3])\n     return new_l"
    },
    {
        "original": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 1",
        "rewrite": "offering a more efficient solution to return unique elements in a sorted manner\n\n```python\ndef unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))\n```"
    },
    {
        "original": "def max_element(l: list):\n    return max(l)\n# +\n# 1. Write a function that takes a list of integers as an argument and returns the sum of all the even numbers in the list.\n# 2. Write a function that takes a list of integers as an argument and returns the sum of all the odd numbers in the list.\n# 3. Write a function that takes a list of integers as an argument and returns the sum of all the positive numbers in the list.\n# 4. Write a function that takes a list of integers as an argument",
        "rewrite": "def sum_even_numbers(l: list):\n    return sum(num for num in l if num % 2 == 0)\n\ndef sum_odd_numbers(l: list):\n    return sum(num for num in l if num % 2 != 0)\n\ndef sum_positive_numbers(l: list):\n    return sum(num for num in l if num > 0)"
    },
    {
        "original": "def fizz_buzz(n: int):\n    return (n//11) + (n//13)\n# + [markdown] id=\"86788091\"\n# ## 1.2.2.1.2.1.1.1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1",
        "rewrite": "def fizz_buzz(n: int):\n    return (n//11) + (n//13)"
    },
    {
        "original": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_even = [l",
        "rewrite": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, \n    while its values at the even indices are equal to the values of the even indices of l, but sorted.\n\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    l_even.sort()\n    l_odd = [l[i] for i in range(len(l)) if i % 2 != 0]\n    sorted_list = []\n\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_list.append(l_even.pop(0))\n        else:\n            sorted_list.append(l_odd.pop(0))\n\n    return sorted_list"
    },
    {
        "original": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to string\n    return \"\".join(groups)\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded",
        "rewrite": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "original": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\nprint(",
        "rewrite": "def prime_fib(n: int):\n    if n <= 1:\n        return 1\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)"
    },
    {
        "original": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7",
        "rewrite": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "original": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they",
        "rewrite": "def car_race_collision(n: int):\n    left_cars = set()\n    right_cars = set()\n    \n    for i in range(n):\n        left_cars.add(i)\n        right_cars.add(i)\n    \n    collisions = 0\n    \n    for i in range(n):\n        if i in left_cars and i in right_cars:\n            collisions += 1\n    \n    return collisions"
    },
    {
        "original": "def incr_list(l: list):\n    return [x+1 for x in l]\n# 1. Write a function that takes a list and returns a list with the elements of the list incremented by 1.\n# 2. Write a function that takes a list and returns a list with the elements of the list incremented by 1.\n# 3. Write a function that takes a list and returns a list with the elements of the list incremented by 1.\n# 4. Write a function that takes a list and returns a list with the elements of the",
        "rewrite": "def incr_list(lst: List[int]) -> List[int]:\n    return [x + 1 for x in lst]"
    },
    {
        "original": "    return False if len(l) < 2 else any(l[i] + l[j] == 0 for i in range(len(l)) for j in range(i+1, len(l)))\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\npairs",
        "rewrite": "def pairs_sum_to_zero(l):\n    return False if len(l) < 2 else any(l[i] + l[j] == 0 for i in range(len(l)) for j in range(i+1, len(l))\n\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])"
    },
    {
        "original": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return str(x) + change_base(x //",
        "rewrite": "def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return str(x) + change_base(x // base, base) + str(x % base) if x > 0 else ''"
    },
    {
        "original": "def triangle_area(a, h):\n    return a * h / 2\ndef triangle_area(a, h):\n    return a * h / 2\ndef triangle_area(a, h):\n    return a * h / 2\ndef triangle_area(a, h):\n    return a * h / 2\ndef triangle_area(a, h):\n    return a * h / 2\ndef triangle_area(a, h):\n    return a * h / 2\ndef triangle_area(a, h):\n    return a",
        "rewrite": "def triangle_area(a, h):\n    return a * h / 2"
    },
    {
        "original": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number",
        "rewrite": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"
    },
    {
        "original": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\ndef median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(",
        "rewrite": "def median(lst: list):\n    lst.sort()\n    if len(lst) % 2 == 0:\n        return (lst[len(lst)//2] + lst[len(lst)//2 - 1]) / 2\n    else:\n        return lst[len(lst)//2]"
    },
    {
        "original": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n# -\n# ### 1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2",
        "rewrite": "def is_palindrome(text: str):\n    return text == text[::-1]"
    },
    {
        "original": "def modp(n: int, p: int):\n    return pow(2, n, p) % p\n# 1. 2^n modulo p\n# 2. 2^n modulo p\n# 3. 2^n modulo p\n# 4. 2^n modulo p\n# 5. 2^n modulo p\n# 6. 2^n modulo p\n# 7. 2^n modulo p\n# 8. 2^n modulo p\n# 9. 2^n modulo p\n#",
        "rewrite": "def modp(n: int, p: int):\n    return pow(2, n, p) % p  # 2^n modulo p"
    },
    {
        "original": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in",
        "rewrite": "def decode_shift(s: str):\n    \"\"\"\n    Takes encoded string as input and returns the decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef encode_shift(s: str):\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "original": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd",
        "rewrite": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n\n    vowels = 'AEIOUaeiou'\n    return ''.join([char for char in text if char not in vowels])"
    },
    {
        "original": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\ndef below_threshold(l: list, t: int):\n    return all(x",
        "rewrite": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"
    },
    {
        "original": "def add(x, y):\n    return x + y\ndef add(x, y):\n    return x + y\ndef add(x, y):\n    return x + y\ndef add(x, y):\n    return x + y\ndef add(x, y):\n    return x + y\ndef add(x, y):\n    return x + y\ndef add(x, y):\n    return x + y\ndef add(x, y):\n    return x + y\ndef add(x, y):\n    return x + y",
        "rewrite": "def add(x, y):\n    return x + y"
    },
    {
        "original": "    return s0 == s1 and len(s0) == len(s1) and all(c in s0 for c in s1)\ndef same_chars(s0: str, s1: str):\n    return s0 == s1 and len(s0) == len(s1) and all(c in s0 for c in s1)\ndef same_chars(s0: str, s1: str):\n    return s0 == s1 and len(s0) == len(s1) and all(c in s0 for c in s",
        "rewrite": "def same_chars(s0: str, s1: str):\n    return s0 == s1 and len(s0) == len(s1) and all(c in s0 for c in s1)"
    },
    {
        "original": "\"\"\"\ndef fib(n: int):\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\nprint(fib(10))\nprint(fib(1))\nprint(fib(8))\n# + [markdown] id=\"1234\"\n# # 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.",
        "rewrite": "def fib(n: int):\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\nprint(fib(10))\nprint(fib(1))\nprint(fib(8))"
    },
    {
        "original": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return",
        "rewrite": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    Return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n# Test Cases\nprint(correct_bracketing(\"<\")) \nprint(correct_bracketing(\"<>\"))\nprint(correct_bracketing(\"<<><>>\"))\nprint(correct_bracketing(\"><<>\"))"
    },
    {
        "original": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    return l[1] >= l[0] and monotonic(l[1:])\n# 2. Write a function that",
        "rewrite": "def monotonic(l: list):\n    if len(l) < 2:\n        return True\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1) )"
    },
    {
        "original": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1",
        "rewrite": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))"
    },
    {
        "original": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:",
        "rewrite": "2,\n        return largest_prime_factor(n // i)\n    return n"
    },
    {
        "original": "def sum_to_n(n: int):\n    return (n * (n + 1)) / 2\n# 1. Write a function that takes a string and returns a new string with the first character capitalized.\n# 2. Write a function that takes a string and returns a new string with the first character capitalized.\n# 3. Write a function that takes a string and returns a new string with the first character capitalized.\n# 4. Write a function that takes a string and returns a new string with the first character capitalized.\n# 5",
        "rewrite": "def capitalize_first_char(s: str):\n    return s[0].upper() + s[1:]"
    },
    {
        "original": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    # your code here\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return",
        "rewrite": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "original": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * (i - 1) for i in xs]\ndef derivative(xs",
        "rewrite": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]"
    },
    {
        "original": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5",
        "rewrite": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "original": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0",
        "rewrite": "def vowels_count(s):\n    count = 0\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    \n    if s[-1].lower() == 'y':\n        s = s[:-1] + 'Y'\n    \n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "original": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]\nprint(circular_shift(12, 1))\nprint(circular_shift(12, 2))\n# +\n# 1. Write a Python function that takes a string and returns the string reversed.\n# 2. Write a Python function that takes a string and returns the string reversed.\n# 3. Write a Python function that takes a string and returns the string reversed.\n# 4. Write a Python function that takes a string",
        "rewrite": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]\n\nprint(circular_shift(12, 1))\nprint(circular_shift(12, 2))\n\ndef reverse_string(s):\n    return s[::-1]\n\ndef reverse_string(s):\n    return \"\".join(reversed(s))\n\ndef reverse_string(s):\n    return \"\".join(s[i] for i in range(len(s)-1, -1, -1))\n\ndef reverse_string(s):\n    return s[::-1]"
    },
    {
        "original": "    return sum(ord(c) - 65 for c in s if c.isupper())\n# 10. Write a Python program to find the length of the longest substring without repeating characters.\ndef longest_substring(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the length of the longest substring without repeating characters.\n    Examples:\n        longest_substring(\"abcabcbb\") => 3\n        longest_substring(\"bbbbb\") => 1\n        longest_substring(\"pwwkew\") => 3\n        longest_substring(\" \") => 1",
        "rewrite": "def longest_substring(s):\n    seen = {}\n    start = 0\n    longest = 0\n    \n    for i, c in enumerate(s):\n        if c in seen and start <= seen[c]:\n            start = seen[c] + 1\n        else:\n            longest = max(longest, i - start + 1)\n        seen[c] = i\n        \n    return longest"
    },
    {
        "original": "def fruit_distribution(s,n):\n    return s.count('m')\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\n# + [markdown] id=\"w0169925\"\n# # 1.2.2",
        "rewrite": "def fruit_distribution(s, n):\n    return s.count('apples') if 'apples' in s else s.count('apple')\n  \nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120))"
    },
    {
        "original": "    if not arr:\n        return []\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    return [min_val, min_idx]\n# 10000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "rewrite": "if not arr:\n        return []\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    return [min_val, min_idx]"
    },
    {
        "original": "def search(lst):\n    for i in lst:\n        if i > 0 and lst.count(i) >= i:\n            return i\n    return -1\n# 10. Write a function that takes a string and returns a new string where the first and last characters have been exchanged.\n# Examples:\n#     swap_first_last(\"Hello\") == \"olleH\"\n#     swap_first_last(\"Hi\") == \"Hi\"\n#     swap_first_last(\"abc\") == \"cba\"\n#     swap_first_last(\"ab\")",
        "rewrite": "def search(lst):\n    for i in lst:\n        if i > 0 and lst.count(i) >= i:\n            return i\n    return -1\n\ndef swap_first_last(s):\n    if len(s) <= 1:\n        return s\n    return s[-1] + s[1:-1] + s[0]"
    },
    {
        "original": "    return [min(lst), max(lst), min(lst), max(lst)]\n# 10. Write a function that takes a string and returns a new string where all the vowels have been removed.\n# Example:\n# remove_vowels(\"Hello World\") == \"Hll wrld\"\ndef remove_vowels(s):\n    '''\n    Given a string, return a new string where all the vowels have been removed.\n    '''\n, no explanation, just code:\n    return ''.join(c for c in s if c not in 'aeiou",
        "rewrite": "def remove_vowels(s):\n    return ''.join(c for c in s if c not in 'aeiouAEIOU')"
    },
    {
        "original": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a + b + c) / 2\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(1, 2, 1))\nprint(triangle_area(1, 2, 100))\nprint(triangle_area(1, 2,",
        "rewrite": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a + b + c) / 2\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(1, 2, 1))\nprint(triangle_area(1, 2, 100))"
    },
    {
        "original": "def will_it_fly(q,w):\n    return sum(q) <= w and is_palindrome(q)\ndef is_palindrome(q):\n    return q == q[::-1]\n# will_it_fly([1, 2], 5)\n# will_it_fly([3, 2, 3], 1)\n# will_it_fly([3, 2, 3], 9)\n# will_it_fly([3], 5)\n# 1. sum(q) <= w",
        "rewrite": "def will_it_fly(q, w):\n    \n    def is_palindrome(q):\n        return q == q[::-1]\n    \n    return sum(q) <= w and is_palindrome(q)"
    },
    {
        "original": "    arr.sort()\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if n == 3:\n        if arr[0] == arr[1] and arr[1] == arr[2]:\n            return 0\n        else:\n            return 1\n    if n == 4:\n        if arr[0] == arr[1] and arr[1] == arr[",
        "rewrite": "2]:\n            return 0\n        if arr[0] == arr[1] or arr[1] == arr[2] or arr[2] == arr[3]:\n            return 1\n        return 2\n    if n == 5:\n        if arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] and arr[3] == arr[4]:\n            return 0\n        if arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] or arr[1] == arr[2] and arr[2] == arr[3] and arr[3] == arr[4]:\n            return 1\n        if arr[0] == arr[1] and arr[1] == arr[2] or arr[1] == arr[2] and arr[2] == arr[3] or arr[2] == arr[3] and arr[3] == arr[4]:\n            return 2\n        return 3"
    },
    {
        "original": "def total_match(lst1, lst2):\n    return [x for x in lst1 if x not in lst2] + [x for x in lst2 if x not in lst1]\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3',",
        "rewrite": "def total_match(lst1, lst2):\n    return list(set(lst1) ^ set(lst2))\n\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3']))"
    },
    {
        "original": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        if a % 3 == 0:\n            return False\n        if a % 5 == 0:\n            return",
        "rewrite": "def is_multiply_prime(a):\n    if a < 100 and a % 2 != 0 and a % 3 != 0 and a % 5 != 0:\n        return True\n    else:\n        return False"
    },
    {
        "original": "def is_simple_power(x, n):\n    return n**int(x) == x\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))<jupyter_output><empty_output><jupyter_text>1.2.1.1.2.2.2.2.2",
        "rewrite": "def is_simple_power(x, n):\n    return n ** int(x) == x\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
        "original": "def iscube(a):\n    return a**3 == a\nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\nprint(iscube(64))\nprint(iscube(0))\nprint(iscube(180))\n# + [markdown] id=\"f054b011\"\n# ### 1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2",
        "rewrite": "```\ndef iscube(a):\n    return a**3 == a\n\nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\nprint(iscube(64))\nprint(iscube(0))\nprint(iscube(180))\n```"
    },
    {
        "original": "    num = num.upper()\n    count = 0\n    for i in num:\n        if i in '2357BDE':\n            count += 1\n    return count\n# 100/100 test cases passed.\n# Your runtime beats 99.99 % of python3 submissions.\n# Your memory usage beats 100 % of python3 submissions (1.4 MB).\n# 100/100 test cases passed.\n# Your runtime beats 99.99 % of python3 submissions.\n#",
        "rewrite": "num = num.upper()\ncount = 0\nfor i in num:\n    if i in '2357BDE':\n        count += 1\nreturn count"
    },
    {
        "original": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_",
        "rewrite": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""
    },
    {
        "original": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False",
        "rewrite": "def is_happy(s):\n    if len(s) < 3:\n        return False"
    },
    {
        "original": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.",
        "rewrite": "def numerical_letter_grade(grades):\n    letter_grades = []\n    \n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"B+\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.3:\n            letter_grades.append(\"C+\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.3:\n            letter_grades.append(\"D+\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D\")\n        else:\n            letter_grades.append(\"F\")\n    \n    return letter_grades"
    },
    {
        "original": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    for i in range(2, len(string)):\n        if string[0] == string[i]:\n            return False\n    return True\n# 2. Write a function that",
        "rewrite": "def prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"
    },
    {
        "original": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1'):\n            count += 1\n        if str(i).endswith('1'):\n            count += 1\n    return count\n# 1000000000000000000000000000000",
        "rewrite": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"
    },
    {
        "original": "    return sum(bin(N)[2:].split('0'))\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))\n# -\n# ### 10. Write a function that returns the sum of the digits of a given integer.\n#\n# Example\n#\n# For input_number = 123, the output should be sumOfDigits(input_number) = 6.\n#\n# Input/Output\n#\n# - **\\[execution time limit\\] 4 seconds (py",
        "rewrite": "def sumOfDigits(input_number):\n    return sum([int(digit) for digit in str(input_number)])\n\nprint(sumOfDigits(123))\nprint(sumOfDigits(456))\nprint(sumOfDigits(789))"
    },
    {
        "original": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and i % 2!= 0)\n# 2. Write a function that takes a list of integers and returns a list of integers where each element is the square of the corresponding element in the original list.\n# 3. Write a function that takes a list of integers and returns a list of integers where each element is the cube of the corresponding element in the original list.\n# 4. Write a function that takes a list of integers",
        "rewrite": "def square_elements(lst):\n    return [num**2 for num in lst]\n\ndef cube_elements(lst):\n    return [num**3 for num in lst]\n\ndef custom_function(lst):\n    # Write your custom function code here\n    pass"
    },
    {
        "original": "def anti_shuffle(s):\n    return ''.join(sorted(s))\nprint(anti_shuffle('Hi'))\nprint(anti_shuffle('hello'))\nprint(anti_shuffle('Hello World!!!'))\n# + [markdown] id=\"3b-50118\"\n# ### 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.",
        "rewrite": "def anti_shuffle(s):\n    return ''.join(sorted(s))\n\nprint(anti_shuffle('Hi'))\nprint(anti_shuffle('hello'))\nprint(anti_shuffle('Hello World!!!'))"
    },
    {
        "original": "    return [ (i, j) for i, row in enumerate(lst) for j, _ in enumerate(row) if _ == x ]\n# +\n# write your code here\n# +\n# test your code\nassert get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5",
        "rewrite": "return [ (i, j) for i, row in enumerate(lst) for j, _ in enumerate(row) if _ == x ]  \n        \nassert get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5)"
    },
    {
        "original": "    def sort_array(array):\n        return sorted(array, key=lambda x: sum(x))\n# 2. Write a function that takes a string and returns a new string where all the vowels have been removed.\n# Example:\n# remove_vowels('Hello') => 'Hll'\n# remove_vowels('Hi') => 'Hi'\n# remove_vowels('Hey') => 'Hey'\n# remove_vowels('Hey!') => 'Hey!'\n# remove_vowels('Hey!!')",
        "rewrite": "def remove_vowels(string):\n    return ''.join([char for char in string if char.lower() not in 'aeiou'])"
    },
    {
        "original": "def encrypt(s):\n    return ''.join(chr(ord(c) + 2) for c in s)\nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\nprint(encrypt('gf'))\nprint(encrypt('et'))\n# +\n# 1. Write a function that takes a string as an argument and returns a string \n# encrypted with the alphabet being rotated. The alphabet should be rotated \n# in a manner such that the letters shift down by two multiplied to two \n# places. For example:\n# encrypt('hi",
        "rewrite": "def encrypt(s):\n    return ''.join(chr(ord(c) + (2 * 2)) for c in s)\n\nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\nprint(encrypt('gf'))\nprint(encrypt('et'))"
    },
    {
        "original": "def next_smallest(lst):\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        if lst[0] < lst[1]:\n            return lst[1]\n        else:\n            return lst[0]\n    if len(lst) == 3:\n        if lst[0] < lst[1] and lst[1] < lst[2]:\n            return lst[1]\n        elif lst[0] < lst[2] and lst[2]",
        "rewrite": "def next_smallest(lst):\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        if lst[0] < lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n    if len(lst) == 3:\n        if lst[0] < lst[1] and lst[1] < lst[2]:\n            return lst[1]\n        elif lst[0] < lst[2]:\n            return lst[2]\n        else:\n            return lst[0]"
    },
    {
        "original": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):",
        "rewrite": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for word in S.split('. '):\n        if word.startswith('I'):\n            count += 1\n    return count"
    },
    {
        "original": "def any_int(x, y, z):\n    return x == (y + z) and x.is_integer() and y.is_integer() and z.is_integer()\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\n# + [markdown] id=\"97046793\"\n#",
        "rewrite": "def any_int(x, y, z):\n    return x == (y + z) and x.is_integer() and y.is_integer() and z.is_integer()\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))"
    },
    {
        "original": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # your code here\n    # write your code here\n    # write your code here\n    # write your code",
        "rewrite": "def encode(message):\n    encoded = ''\n    vowels = 'AEIOUaeiou'\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded += chr((ord(char) - 65 + 2) % 26 + 65) if char.isupper() else chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                encoded += char.upper() if char.islower() else char.lower()\n        else:\n            encoded += char\n    return encoded"
    },
    {
        "original": "    return sum(map(int, str(max(lst))))\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nprint(sk",
        "rewrite": "def skjkasdkd(lst):\n    return sum(map(int, str(max(lst)))\n\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))"
    },
    {
        "original": "def check_dict_case(dict):\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            return False\n    return True\n# 10. Write a function that takes a string and returns a string where all the vowels have been removed.\n# Examples:\n# remove_vowels(\"Hello\") should return \"Hll\".\n#",
        "rewrite": "def check_dict_case(dict):\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() or key.isupper():\n            return False\n    return True\n\ndef remove_vowels(string):\n    vowels = 'AEIOUaeiou'\n    return ''.join([char for char in string if char not in vowels])\n\n# Example usage:\n# print(remove_vowels(\"Hello\"))  # Output should be \"Hll\""
    },
    {
        "original": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up",
        "rewrite": "def count_up_to(n):\n    primes = []\n    if n <= 1:\n        return primes\n    for num in range(2, n):\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n    return primes"
    },
    {
        "original": "def multiply(a, b):\n    return a * b % 10\nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15))\n# + [markdown] id=\"19610365-4751-445d-869b-23253b840007\"\n# ### 1.3.2.",
        "rewrite": "def multiply(a, b):\n    return a * b % 10\n\nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14, -15))"
    },
    {
        "original": "def count_upper(s):\n    return sum(1 for c in s if c in 'AEIOU')\nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))\n# + [markdown] id=\"13812035\"\n# ### 1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2",
        "rewrite": "def count_upper(s):\n    return sum(1 for c in s if c.isupper())\n\nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))"
    },
    {
        "original": "def closest_integer(value):\n    if value.is_integer():\n        return int(value)\n    else:\n        return int(value) + 1 if int(value) % 2 == 0 else int(value) - 1\n# 1.5. Write a function that takes a string and returns the number of\n#    characters in the string.\n# 1.6. Write a function that takes a string and returns the number of\n#    words in the string.\n# 1.7. Write a function that takes a string and returns the number of",
        "rewrite": "def number_of_characters(s):\n    return len(s)\n\ndef number_of_words(s):\n    return len(s.split())\n\ndef number_of_sentences(s):\n    return s.count('.') + s.count('!') + s.count('?')"
    },
    {
        "original": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    Examples:\n    >>> make_a_pile(3)\n    [3,",
        "rewrite": "def make_a_pile(n):\n    stones = []\n    for i in range(n, 0, -1):\n        stones.append(n)\n        n = n + 1 if n % 2 == 0 else n + 2\n    return stones\n\nprint(make_a_pile(3))"
    },
    {
        "original": "def words_string(s):\n    return s.split(',')\n# +\n# 2. Write a function that takes a string and returns the number of words in the string.\n# For example:\n# words_count(\"Hi, my name is John\") == 5\n# words_count(\"One, two, three, four, five, six\") == 6\ndef words_count(s):\n    return len(s.split(','))\n# +\n# 3. Write a function that takes a string and returns the number of letters in the string.",
        "rewrite": "def words_string(s):\n    return s.split(',')\n\ndef words_count(s):\n    return len(s.split())\n\ndef letters_count(s):\n    return sum(c.isalpha() for c in s)"
    },
    {
        "original": "    if x > y:\n        x, y = y, x\n    if x % 2 == 0:\n        return x\n    if y % 2 == 0:\n        return y\n    if x % 2!= 0 and y % 2!= 0:\n        return -1\n    if x % 2!= 0:\n        return choose_num(x + 1, y)\n    if y % 2!= 0:\n        return choose_num(x, y + 1)\n# test\nprint(choose_num(12, 15))\nprint",
        "rewrite": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    if x % 2 == 0:\n        return x\n    if y % 2 == 0:\n        return y\n    if x % 2 != 0 and y % 2 != 0:\n        return -1\n    if x % 2 != 0:\n        return choose_num(x + 1, y)\n    if y % 2 != 0:\n        return choose_num(x, y + 1)\n\n# test\nprint(choose_num(12, 15))"
    },
    {
        "original": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    return bin(int((n+m)/2))[2:]\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\n# +\n# 100000000000000000000000000000000",
        "rewrite": "def rounded_avg(n, m):\n    return bin(int((n+m)/2))[2:] if n <= m else -1\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\nprint(\"100000000000000000000000000000000\")"
    },
    {
        "original": "\"\"\"\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    Note: Returned list should be sorted in increasing order.\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [i for i in x if not any(",
        "rewrite": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x, return a sorted list of all elements that haven't any even digit.\n    Note: The returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([i for i in x if not any(int(d) % 2 == 0 for d in str(i))])"
    },
    {
        "original": "    \"\"\"\n    def by_length(arr):\n        \"\"\"\n        Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n        reverse the resulting array, and then replace each digit by its corresponding name from\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n        For example:\n          arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, ",
        "rewrite": "def by_length(arr):\n    arr = sorted([x for x in arr if 1 <= x <= 9])[::-1]\n    return [digit for digit in ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n              if digit in arr]"
    },
    {
        "original": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n ==",
        "rewrite": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"
    },
    {
        "original": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    Example 1:\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    Example 2:\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are",
        "rewrite": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"
    },
    {
        "original": "    return sum(1 for i in arr if sum(abs(int(i))) > 0)\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == ",
        "rewrite": "def count_nums(arr):\n    return sum(1 for i in arr if sum(abs(int(x)) for x in str(i) if x.isdigit()) > 0)"
    },
    {
        "original": "    def move_one_ball(arr):\n        if not arr:\n            return True\n        for i in range(len(arr)):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n# + id=\"1p503850\"\n# 10. Write a Python program to find the sum of the digits of a given number.\n# Example 1:\n# Input: 345\n# Output: 1\n# Explanation: The digits are 3, 4, 5. The sum is 3 + ",
        "rewrite": "def move_one_ball(arr):\n    if not arr:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n# Write a Python program to find the sum of the digits of a given number.\ndef sum_of_digits(num):\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total\n\n# Example:\nprint(sum_of_digits(345)) # Output: 12"
    },
    {
        "original": "def exchange(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return \"NO\"\n    return \"YES\"\n# 10. Write a function that takes a string and returns a list of its characters\ndef get_chars(s):\n    \"\"\"\n    >>> get_chars('Hello')\n    ['H', 'e', 'l', 'l', 'o']\n    >>> get",
        "rewrite": "def exchange(lst1, lst2):\n    if len(lst1) != len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != lst2[i] % 2:\n            return \"NO\"\n    return \"YES\"\n\n# 10. Write a function that takes a string and returns a list of its characters\ndef get_chars(s):\n    \"\"\"\n    >>> get_chars('Hello')\n    ['H', 'e', 'l', 'l', 'o']\n    \"\"\"\n    return list(s)"
    },
    {
        "original": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b",
        "rewrite": "def histogram(test):\n    lis = test.split()\n    d = {}\n    for i in lis:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_rep = max(d.values())\n    return {k: v for k, v in d.items() if v == max_rep}"
    },
    {
        "original": "    def reverse_delete(s,c):\n        for i in range(len(s)):\n            if s[i] in c:\n                s = s[:i] + s[i+1:]\n        return s, s == s[::-1]\n# 1000000000000000000000000000000000000000000000000000000000000000000000",
        "rewrite": "def reverse_delete(s, c):\r\n    s = ''.join([char for char in s if char not in c])\r\n    return s, s == s[::-1]"
    },
    {
        "original": "def odd_count(lst):\n    return [str(lst.count(i)) + 'n the str' + str(lst.index(i)) +'of the'+ str(lst.index(i)) + 'nput.' for i in lst if i.isdigit()]\n# 1. Write a function that takes a list of strings as an argument and returns a list of strings.\n# The strings in the list should be the number of times each string occurs in the list.\n# For example, if the input is ['a', 'b', 'c', 'a",
        "rewrite": "def string_count(lst):\n    return [str(lst.count(i)) + ' times the string ' + i + ' at index ' + str(lst.index(i)) for i in lst]"
    },
    {
        "original": "    def minSubArraySum(nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[",
        "rewrite": "# Define the function\ndef minSubArraySum(nums):\n    # Handle special cases\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    return min(nums)\n\n# Test with some example inputs\nprint(minSubArraySum([1, 2, 3, 4])) # 1\nprint(minSubArraySum([4, 2, 3, 1])) # 1\nprint(minSubArraySum([])) # 0"
    },
    {
        "original": "    # write your code here\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    #",
        "rewrite": "# write your code here\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)\n# O(n^2)"
    },
    {
        "original": "def sort_array(arr):\n    return sorted(arr, key=lambda x: bin(x).count('1'), reverse=True)\n# or\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: bin(x).count('1'), reverse=True)\n# or\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: bin(x).count('1'), reverse=True)\n# or\ndef sort_array(arr):\n    return sorted(arr, key=lambda x:",
        "rewrite": "def sort_array(arr):\n    return sorted(arr, key=lambda x: bin(x).count('1'), reverse=True)"
    },
    {
        "original": "def select_words(s, n):\n    return [word for word in s.split() if len(word) == n]\n# 2. Write a function that takes a string and returns a list of all the words in the string.\n# The function should ignore all non-alphabetic characters.\n# Examples:\n# words(\"Hello world\") ==> [\"Hello\", \"world\"]\n# words(\"Hello 123 world\") ==> [\"Hello\", \"123\", \"world\"]\n# words(\"Hello world!\") ==> [\"Hello\", \"world\"]\n# words(\"Hello",
        "rewrite": "def words(s):\n    return [word for word in s.split() if word.isalpha()]\n# Examples:\n# words(\"Hello world\") ==> [\"Hello\", \"world\"]\n# words(\"Hello 123 world\") ==> [\"Hello\", \"world\"]\n# words(\"Hello world!\") ==> [\"Hello\", \"world\"]\n# words(\"Hello\""
    },
    {
        "original": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    You may assume that the given string contains English letter only.\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest",
        "rewrite": "def get_closest_vowel(word):\n    for i in range(len(word) - 1, 1, -1):\n        if word[i] in \"aeiouAEIOU\" and word[i-1] not in \"aeiouAEIOU\" and word[i-2] not in \"aeiouAEIOU\":\n            return word[i]\n    return \"\""
    },
    {
        "original": "    def match_parens(lst):\n        if len(lst) == 0:\n            return True\n        if lst[0] == '(':\n            return match_parens(lst[1:]) and match_parens(lst[2:])\n        else:\n            return match_parens(lst[1:]) and match_parens(lst[2:])\n# 2019-01-28 15:30:00+08:00\n# 2019-01-28 15:30:00+",
        "rewrite": "def match_parens(lst):\n    if len(lst) == 0:\n        return True\n    if lst[0] == '(':\n        return match_parens(lst[1:]) and match_parens(lst[2:])\n    else:\n        return match_parens(lst[1:]) and match_parens(lst[2:])"
    },
    {
        "original": "    arr.sort()\n    return arr[-k:]\n# 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "rewrite": "arr.sort()\nreturn arr[-k:]"
    },
    {
        "original": "    return sum(lst[i] for i in range(len(lst)) if i%2==0 and lst[i]%2!=0)\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))\nprint(solution([1, 2, 3, 4, 5]))\nprint(solution([1, 2, 3, 4, 5,",
        "rewrite": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))\nprint(solution([1, 2, 3, 4, 5]))"
    },
    {
        "original": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    Example:\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(",
        "rewrite": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    Example:\n        Input: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9], k = 4\n        Output: 24 # sum of 21 + 3\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        if arr[i] >= 10 and arr[i] < 100:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "original": "    if n == 1:\n        return [1]\n    else:\n        return [n] + get_odd_collatz(3*n+1)\n# +\n# test your function\nget_odd_collatz(5)\n# -\n# ## 3.2.2.2.1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.",
        "rewrite": "if n == 1:\n    return [1]\nelse:\n    return [n] + get_odd_collatz(3*n + 1)\n\nget_odd_collatz(5)"
    },
    {
        "original": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.",
        "rewrite": "def valid_date(date):\n    if date == \"\":\n        return False\n    else:\n        day = int(date.split(\"/\")[0])\n        month = int(date.split(\"/\")[1])\n        if (month in [1, 3, 5, 7, 8, 10, 12] and day >= 1 and day <= 31) or (month in [4, 6, 9, 11] and day >= 1 and day <= 30):\n            return True\n        else:\n            return False"
    },
    {
        "original": "def split_words(txt):\n    return txt.split()\n# 10. Write a function that takes a string and returns a list of the words in the string, sorted alphabetically.\ndef sort_words(txt):\n    '''\n    Given a string of words, return a list of words sorted alphabetically.\n    Examples\n    sort_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    sort_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    sort_words(\"abcdef\") == [\"a\", \"b\", \"c\", \"d\", \"e",
        "rewrite": "def sort_words(txt):\n    words = txt.split()\n    return sorted(words)"
    },
    {
        "original": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\nis_sorted([1, 2, 3, 4, 5, 6, 7])\nis_sorted([1, 2, 2, 3, 3, 4])\nis_sorted([1, 2, 2, 2, 3, 4])\nis_sorted([1, 2, 3, 4",
        "rewrite": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\nis_sorted([1, 2, 3, 4, 5, 6, 7])\nis_sorted([1, 2, 2, 3, 3, 4])\nis_sorted([1, 2, 2, 2, 3, 4])\nis_sorted([1, 2, 3, 4])"
    },
    {
        "original": "    def intersection(interval1, interval2):\n        \"\"\"You are given two intervals,\n        where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n        The given intervals are closed which means that the interval (start, end)\n        includes both start and end.\n        For each given interval, it is assumed that its start is less or equal its end.\n        Your task is to determine whether the length of intersection of these two \n        intervals is a prime number.\n        Example, the intersection of the intervals (1, 3), (2, 4)",
        "rewrite": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    intersection_length = intersection_end - intersection_start + 1\n    return is_prime(intersection_length)"
    },
    {
        "original": "def prod_signs(arr):\n    if not arr:\n        return None\n    return sum(map(lambda x: x * (1 if x > 0 else -1), arr))\nprint(prod_signs([1, 2, 2, -4]))\nprint(prod_signs([0, 1]))\nprint(prod_signs([]))\n# + [markdown] id=\"w1118848\"\n# ### 10. Write a Python program to find the sum of the first n natural numbers.\n# +",
        "rewrite": "def sum_first_n(n):\n    return n * (n + 1) // 2\n\nprint(sum_first_n(5))\nprint(sum_first_n(10))\nprint(sum_first_n(20))"
    },
    {
        "original": "    # write your code here\n    # 1. init\n    n = len(grid)\n    if n == 0:\n        return []\n    m = len(grid[0])\n    if m == 0:\n        return []\n    if k == 0:\n        return [grid[0][0]]\n    # 2. init\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[0][i] = dp[0][i-1",
        "rewrite": "# write your code here\n    # 1. init\n    n = len(grid)\n    if n == 0:\n        return []\n    m = len(grid[0])\n    if m == 0:\n        return []\n    if k == 0:\n        return [grid[0][0]]\n    # 2. init\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[0][i] = dp[0][i-1]"
    },
    {
        "original": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n == 3:\n        return [1, 1, 2]\n    else:\n        return [1, 1, 2] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n# 10. Write a Python program to find the largest number in a list.\ndef max_num(l):\n    \"\"\"\n    Write a Python program to find the largest number in a list.",
        "rewrite": "def max_num(l):\n    return max(l)"
    },
    {
        "original": "    return 0 if n == 0 else n % 10 * digits(n // 10)\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))\n# + [markdown] id=\"85301211-3160-4380-8491-58554326097d\"\n# ### 1.1.2.2.2.1.2.2.2.2.2.2.2.2.2.",
        "rewrite": "def digits(n):\n    return 0 if n == 0 else n % 10 + digits(n // 10)\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))"
    },
    {
        "original": "def is_nested(string):\n    if string == '':\n        return False\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\nprint(is_nested('[]'))\nprint(is_nested('[]]'))\nprint(is_nested('[]][][]'))\nprint(is_nested('[]][][]]'))",
        "rewrite": "def is_nested(string):\n    if string == '':\n        return False\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\nprint(is_nested('[]'))\nprint(is_nested('[]]'))\nprint(is_nested('[]][][]'))\nprint(is_nested('[]][][]]'))"
    },
    {
        "original": "def sum_squares(lst):\n    return sum(map(lambda x: x**2, map(int, map(ceil, lst)))))\n# +\n# 1. Write a function that takes a list of numbers and returns the sum of the squares of the numbers.\n# 2. Write a function that takes a list of numbers and returns the sum of the squares of the numbers.\n# 3. Write a function that takes a list of numbers and returns the sum of the squares of the numbers.\n# 4. Write a function that takes a list of numbers and returns the",
        "rewrite": "from math import ceil\n\ndef sum_squares(lst):\n    return sum(map(lambda x: x**2, map(int, map(ceil, lst)))"
    },
    {
        "original": "    def check_if_last_char_is_a_letter(txt):\n        return txt[-1].isalpha() and not txt[-1].isalpha() in txt.split()\n# 10. Check if a string is a palindrome\n# https://www.codewars.com/kata/526f18081584847291000001\n# Write a function that checks if a string is a palindrome.\n# A palindrome is a word, number, phrase, or other sequence of characters",
        "rewrite": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in txt.split()\n\ndef is_palindrome(txt):\n    return txt == txt[::-1]"
    },
    {
        "original": "    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\nprint(can_arrange([1,2,4,3,5]))\nprint(can_arrange([1,2,3]))\n# + [markdown] id=\"5-73119b\"\n# ### 2.1.3.2.2.1.2.2.2.2.2.2.2.2.2.2.2.2.2.",
        "rewrite": "def can_arrange(arr):\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return -1\n    return 0\n\nprint(can_arrange([1,2,4,3,5]))\nprint(can_arrange([1,2,3]))"
    },
    {
        "original": "    if lst == []:\n        return (None, None)\n    neg = 0\n    pos = 0\n    for i in lst:\n        if i < 0:\n            neg += 1\n        else:\n            pos += 1\n    if neg == 0:\n        return (None, pos)\n    if pos == 0:\n        return (neg, None)\n    return (neg, pos)\n# 1. Write a function that takes a list of integers and returns a list of integers\n# that are the squares of the integers in the list.\n# For example, square_list([1",
        "rewrite": "def square_list(lst):\n    return [i ** 2 for i in lst]"
    },
    {
        "original": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif type(a) == type(b):\n        return a\n    elif type(a) > type(b):\n        return a\n    else:\n        return b\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n# +\n#",
        "rewrite": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        elif type(a) == int:\n            return max(a, b)\n    if type(a) > type(b):\n        return a\n    else:\n        return b\n\nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))"
    },
    {
        "original": "    if n % 2 == 0:\n        return False\n    if n % 4 == 0:\n        return True\n    return False\n# 2. Write a function that takes a string and returns the string reversed.\ndef reverse_string(s):\n    \"\"\"Reverse a string\n    Example\n    reverse_string(\"hello\") == \"olleh\"\n    reverse_string(\"hello world\") == \"dlrow olleh\"\n    \"\"\"\n, no explanation, just code:\n    return s[::-1]\n# 3. Write a function that takes a string and returns the string with the",
        "rewrite": "def add_quotes(s):\n    return '\"' + s + '\"'"
    },
    {
        "original": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n    For example:\n    >>> special_factorial(4)\n    288\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n#",
        "rewrite": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"
    },
    {
        "original": "def fix_spaces(text):\n    return text.replace(' ', '_').replace('  ', '_').replace('  ', '-').replace('  ', '_')\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))\n# + [markdown] id=\"y603c703\"\n# ### 3.1.2.2.1.2.2.2.2.2.2.2.2.2",
        "rewrite": "def fix_spaces(text):\n    return text.replace(' ', '_').replace('  ', '_').replace('   ', '_')\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))"
    },
    {
        "original": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin al",
        "rewrite": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    file_components = file_name.split('.')\n    \n    if len(file_components) != 2:\n        return 'No'\n    \n    if not file_components[0].isalpha() or len(file_components[0]) == 0:\n        return 'No'\n    \n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'"
    },
    {
        "original": "def sum_squares(lst):\n    return sum(x**2 for x in lst if x%3==0 and x%4!=0) + sum(x**3 for x in lst if x%4==0 and x%3!=0)\ndef sum_squares(lst):\n    return sum(x**2 for x in lst if x%3==0 and x%4!=0) + sum(x**3 for x in lst if x%4==0 and x%3!=0)\ndef sum_squares(lst):\n    return sum(x**2",
        "rewrite": "def sum_squares(lst):\n    return sum(x**2 for x in lst if x%3==0 and x%4!=0) + sum(x**3 for x in lst if x%4==0 and x%3!=0)"
    },
    {
        "original": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n    Constraints:",
        "rewrite": "def words_in_sentence(sentence):\r\n    def is_prime(n):\r\n        if n <= 1:\r\n            return False\r\n        elif n <= 3:\r\n            return True\r\n        elif n % 2 == 0 or n % 3 == 0:\r\n            return False\r\n        i = 5\r\n        while i * i <= n:\r\n            if n % i == 0 or n % (i + 2) == 0:\r\n                return False\r\n            i += 6\r\n        return True\r\n\r\n    words = sentence.split()\r\n    prime_word_list = [word for word in words if is_prime(len(word))]\r\n    return ' '.join(prime_word_list)"
    },
    {
        "original": "    if x.count('/')!= 1:\n        return False\n    num, den = x.split('/')\n    if int(num) * int(den) == 0:\n        return False\n    return True\nsimplify(\"1/5\", \"5/1\")\nsimplify(\"1/6\", \"2/1\")\nsimplify(\"7/10\", \"10/2\")\nsimplify(\"1/1\", \"1/1\")\nsimplify(\"1/1\", \"1/1\")\nsimplify(\"1/1\", \"1/1\")\nsimplify(\"1/1\", \"1/",
        "rewrite": "def simplify(x):\n    if x.count('/') != 1:\n        return False\n    num, den = x.split('/')\n    if int(num) * int(den) == 0:\n        return False\n    return True\n\nsimplify(\"1/5\")\nsimplify(\"5/1\")\nsimplify(\"1/6\")\nsimplify(\"2/1\")\nsimplify(\"7/10\")\nsimplify(\"10/2\")\nsimplify(\"1/1\")\nsimplify(\"1/1\")\nsimplify(\"1/1\")\nsimplify(\"1/1\")\nsimplify(\"1/\")"
    },
    {
        "original": "    def order_by_points(nums):\n        return sorted(nums, key=lambda x: sum(map(int, str(x))))\n# 2. Write a function which returns the sum of the digits of a given number.\n# 3. Write a function which returns the sum of the digits of a given number.\n# 4. Write a function which returns the sum of the digits of a given number.\n# 5. Write a function which returns the sum of the digits of a given number.\n# 6. Write a function which returns the sum of the digits of",
        "rewrite": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)))"
    },
    {
        "original": "    return sum(1 for num in nums if num > 10 and num % 10 in (1, 3, 5, 7, 9) and num % 100 in (1, 3, 5, 7, 9))\n# +\n# 2. Write a function that takes a list of numbers as input and returns the \n# number of even numbers in the list.\n# For example:\n# evenCount([1, 2, 3, 4, 5]) => 3\n# evenCount([1,",
        "rewrite": "def evenCount(nums):\n    return sum(1 for num in nums if isinstance(num, int) and num % 2 == 0)"
    },
    {
        "original": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\nprint(get_max_triples(5))\nprint(get_max_triples(6))\nprint(get_max_triples(7))",
        "rewrite": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\nprint(get_max_triples(5))\nprint(get_max_triples(6))\nprint(get_max_triples(7))"
    },
    {
        "original": "def bf(planet1, planet2):\n    if planet1 in planets and planet2 in planets:\n        return sorted(planets[planet1] & planets[planet2])\n    else:\n        return ()\n# test\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\n# + [markdown] id=\"2630066d-905c-4153-992f-721578",
        "rewrite": "def common_planets(planet1, planet2):\n    planets = {\n        \"Mercury\": set([\"Venus\", \"Earth\", \"Mars\"]),\n        \"Venus\": set([\"Mercury\", \"Earth\", \"Mars\"]),\n        \"Earth\": set([\"Mars\", \"Venus\"]),\n        \"Mars\": set([\"Earth\", \"Venus\"]),\n        \"Jupiter\": set([\"Saturn\", \"Uranus\"]),\n        \"Saturn\": set([\"Jupiter\", \"Uranus\"]),\n        \"Uranus\": set([\"Neptune\", \"Saturn\"]),\n        \"Neptune\": set([\"Uranus\"])\n    }\n    \n    if planet1 in planets and planet2 in planets:\n        return sorted(planets[planet1] & planets[planet2])\n    else:\n        return ()\n\n# test\nprint(common_planets(\"Jupiter\", \"Neptune\"))\nprint(common_planets(\"Earth\", \"Mercury\"))\nprint(common_planets(\"Mercury\", \"Uranus\"))"
    },
    {
        "original": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: len(x), reverse=True)\n# 1. Sort the list by length of each word\n# 2. Sort the list by length of each word, and then alphabetically\n# 3. Sort the list by length of each word, and then alphabetically, and then by length of each word\n# 4. Sort the list by length of each word, and then alphabetically, and then by length of each word, and then by length of each word\n# 5. Sort",
        "rewrite": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x))"
    },
    {
        "original": "def x_or_y(n, x, y):\n    if n in prime_numbers:\n        return x\n    else:\n        return y\n# 1. Write a function that takes a string and returns the length of the string.\n# 2. Write a function that takes a string and returns the length of the string.\n# 3. Write a function that takes a string and returns the length of the string.\n# 4. Write a function that takes a string and returns the length of the string.\n# 5. Write a function that takes a string and returns the",
        "rewrite": "def string_length(s):\n    return len(s)"
    },
    {
        "original": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x%2!= 0)\ndouble_the_difference([1, 3, 2, 0])\ndouble_the_difference([-1, -2, 0])\ndouble_the_difference([9, -2])\ndouble_the_difference([0])<jupyter_output><empty_output><jupyter_text>**Question 2**Write a function that takes a string and returns a list of the words in the string. For example, if the input string is \"Hello world\", the function should return [\"",
        "rewrite": "def get_words_from_string(s):\n    return s.split()"
    },
    {
        "original": "def compare(game,guess):\n    return [abs(g-g2) for g,g2 in zip(game,guess)]\n# +\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n# +\n# compare([1",
        "rewrite": "def compare(game, guess):\n    return [abs(g - g2) for g, g2 in zip(game, guess)]"
    },
    {
        "original": "    def Strongest_Extension(class_name, extensions):\n        \"\"\"You will be given the name of a class (a string) and a list of extensions.\n        The extensions are to be used to load additional classes to the class. The\n        strength of the extension is as follows: Let CAP be the number of the uppercase\n        letters in the extension's name, and let SM be the number of lowercase letters \n        in the extension's name, the strength is given by the fraction CAP - SM. \n        You should find the strongest extension and return a string in this \n        format: ClassName.StrongestExtension",
        "rewrite": "def Strongest_Extension(class_name, extensions):\n    def strength_of_extension(extension):\n        cap_letters = sum(1 for c in extension if c.isupper())\n        sm_letters = sum(1 for c in extension if c.islower())\n        return cap_letters - sm_letters\n\n    strongest_extension = max(extensions, key=strength_of_extension)\n        \n    return f\"{class_name}.{strongest_extension}\""
    },
    {
        "original": "def cycpattern_check(a, b):\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i] in a:\n            a = a[a.index(b[i])+1:]\n        else:\n            return False\n    return True\nprint(cycpattern_check(\"abcd\",\"abd\"))\nprint(cycpattern_check(\"hello\",\"ell\"))\nprint(cycpattern_check(\"whassup\",\"psus\"))\nprint(cycpattern_check(\"abab\",\"baa\"))\nprint",
        "rewrite": "def cycpattern_check(a, b):\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i] in a:\n            a = a[a.index(b[i])+1:]\n        else:\n            return False\n    return True\n\nprint(cycpattern_check(\"abcd\", \"abd\"))\nprint(cycpattern_check(\"hello\", \"ell\"))\nprint(cycpattern_check(\"whassup\", \"psus\"))\nprint(cycpattern_check(\"abab\", \"baa\"))"
    },
    {
        "original": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (",
        "rewrite": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (count_even, count_odd)"
    },
    {
        "original": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {1000",
        "rewrite": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x',\n                      9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n            \n    return result.lower()"
    },
    {
        "original": "def right_angle_triangle(a, b, c):\n    if a == b == c:\n        return True\n    elif a == b or a == c or b == c:\n        return False\n    else:\n        return True\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\nprint(right_angle_triangle(3, 4, 6))\n# + [markdown] id=\"09091011-438e-4959",
        "rewrite": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\nprint(right_angle_triangle(3, 4, 6))"
    },
    {
        "original": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len = 0\n    max",
        "rewrite": "def find_max(words):\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_len or (unique_chars == max_len and word < max_word):\n            max_len = unique_chars\n            max_word = word\n    return max_word"
    },
    {
        "original": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    Example:\n    * eat(5, 6",
        "rewrite": "def eat(number, need, remaining):\n    total_eaten = number + remaining\n    if remaining >= need:\n        remaining -= need\n    else:\n        remaining = 0\n    return [total_eaten, remaining]"
    },
    {
        "original": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result =",
        "rewrite": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(0, len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"
    },
    {
        "original": "def solve(s):\n    return ''.join(reversed(s) if c.isalpha() else c for c in s)\n# I don't know how to write this in python, so I will try to explain it.\n# The idea is to reverse the string, and then iterate over the string, \n# and if the character is an alphabet, then reverse the case of the character.\n# If the character is not an alphabet, then just keep it as it is.\n# The result is a string where the characters are in the reverse order.\n# The function should return the",
        "rewrite": "def solve(s):\n    return ''.join(c.swapcase() if c.isalpha() else c for c in reversed(s))"
    },
    {
        "original": "def string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n# +\n# 2. Write a function that takes a string and returns a list of words in the string.\n# The function should ignore any punctuation and capitalize the first letter of each word.\n# The function should return an empty list if the input string is empty.\n# The function should return a list of words in the string in the order they appear in the string.\n# Example:\n# >>>",
        "rewrite": "import re\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\ndef string_to_words_list(text):\n    if not text:\n        return []\n    words = re.findall(r'\\b\\w+\\b', text)\n    processed_words = [word.capitalize() for word in words]\n    return processed_words\n# +\n# 2. Write a function that takes a string and returns a list of words in the string."
    },
    {
        "original": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x%2==0]\nprint(generate_integers(2, 8))\nprint(generate_integers(8, 2))\nprint(generate_integers(10, 14))\n# + [markdown] id=\"w_h06_054185\"\n# ### 1.2.2.2.2.2.2.2.2.2.2.2.2.",
        "rewrite": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0]\n\nprint(generate_integers(2, 8))\nprint(generate_integers(10, 14))"
    }
]