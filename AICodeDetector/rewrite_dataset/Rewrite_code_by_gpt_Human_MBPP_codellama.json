[
    {
        "original": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
        "rewrite": "R = 3\nC = 3\n\ndef min_cost(cost, m, n):\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    \n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0]\n        \n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j]\n        \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j]\n            \n    return tc[m][n]"
    },
    {
        "original": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
        "rewrite": "def similar_elements(test_tup1, test_tup2):\n    res = tuple(set(test_tup1) & set(test_tup2))\n    return res"
    },
    {
        "original": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
        "rewrite": "import math\n\ndef is_not_prime(n):\n    result = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n            break\n    return result"
    },
    {
        "original": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "rewrite": "import heapq as hq\ndef heap_queue_largest(nums, n):\n    largest_nums = hq.nlargest(n, nums)\n    return largest_nums"
    },
    {
        "original": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] ",
        "rewrite": "def count_ways(n): \r\n    A = [0] * (n + 1) \r\n    B = [0] * (n + 1) \r\n    A[0] = 1\r\n    A[1] = 0\r\n    B[0] = 0\r\n    B[1] = 1\r\n    for i in range(2, n+1): \r\n        A[i] = A[i - 2] + 2 * B[i - 1] \r\n        B[i] = A[i - 1] + B[i - 2] \r\n    return A[n]"
    },
    {
        "original": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)",
        "rewrite": "def is_power_of_two(x):\n    return x and (not(x & (x - 1)))\n\ndef differ_at_one_bit_pos(a, b):\n    return is_power_of_two(a ^ b)"
    },
    {
        "original": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
        "rewrite": "import re\n\ndef find_char_long(text):\n    return re.findall(r\"\\b\\w{4,}\\b\", text)"
    },
    {
        "original": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums",
        "rewrite": "def square_nums(nums):\n    return [x ** 2 for x in nums]"
    },
    {
        "original": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ",
        "rewrite": "def find_Rotations(string):\n    temp = string + string\n    length = len(string)\n    for i in range(1, length + 1):\n        substring = temp[i: i + length]\n        if string == substring:\n            return i\n    return length"
    },
    {
        "original": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest",
        "rewrite": "import heapq\n\ndef small_nnum(list1, n):\n    smallest = heapq.nsmallest(n, list1)\n    return smallest"
    },
    {
        "original": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
        "rewrite": "def remove_Occ(s, ch):\n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s"
    },
    {
        "original": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
        "rewrite": "def sort_matrix(M):\r\n    result = sorted(M, key=lambda x: sum(x))\r\n    return result"
    },
    {
        "original": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
        "rewrite": "from collections import Counter\ndef count_common(words):\n    word_counts = Counter(words)\n    top_four = word_counts.most_common(4)\n    return top_four"
    },
    {
        "original": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
        "rewrite": "def find_volume(l, b, h):\n    return (l * b * h) / 2"
    },
    {
        "original": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
        "rewrite": "import re\n\ndef split_lowerstring(text):\n    return re.findall('[a-z][^a-z]*', text)"
    },
    {
        "original": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "rewrite": "import re\n\ndef text_lowercase_underscore(text):\n    patterns = '^([a-z]+_[a-z]+)$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    },
    {
        "original": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
        "rewrite": "def square_perimeter(a):\n    return 4*a"
    },
    {
        "original": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "rewrite": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\n\r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\n\r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\n\r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind += 1\r\n\treturn lst_to_string(str_list[0:res_ind])"
    },
    {
        "original": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
        "rewrite": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)"
    },
    {
        "original": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
        "rewrite": "def is_woodall(x):\n    if x % 2 == 0:\n        return False\n    if x == 1:\n        return True\n    x = x + 1\n    p = 0\n    while x % 2 == 0:\n        x = x / 2\n        p = p + 1\n        if p == x:\n            return True\n    return False"
    },
    {
        "original": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
        "rewrite": "def multiples_of_num(m, n):\n    return list(range(n, (m + 1) * n, n))"
    },
    {
        "original": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
        "rewrite": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for num in nums:\n        if num in num_set:\n            return num\n        else:\n            num_set.add(num)\n\n    return no_duplicate"
    },
    {
        "original": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
        "rewrite": "def maximum_sum(list1):\n    maxi = float('-inf')\n    for x in list1:\n        sum = 0\n        for y in x:\n            sum += y\n        maxi = max(sum, maxi)\n    return maxi"
    },
    {
        "original": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
        "rewrite": "def binary_to_decimal(binary):\n    binary_number = binary\n    decimal_number, position, length = 0, 0, 0\n    while(binary != 0):\n        digit = binary % 10\n        decimal_number = decimal_number + digit * pow(2, position) \n        binary = binary // 10\n        position += 1\n    return decimal_number"
    },
    {
        "original": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
        "rewrite": "def find_product(arr, n):\n    arr.sort()\n    prod = 1\n    for i in range(0, n, 1):\n        if (arr[i - 1] != arr[i]):\n            prod = prod * arr[i]\n    return prod;"
    },
    {
        "original": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
        "rewrite": "def check_k_elements(test_list, K):\n    res = True\n    for tup in test_list:\n        for ele in tup:\n            if ele != K:\n                res = False\n    return res"
    },
    {
        "original": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
        "rewrite": "import re\n\ndef remove(list):\n    pattern = '[0-9]'\n    cleaned_list = [re.sub(pattern, '', i) for i in list]\n    return cleaned_list"
    },
    {
        "original": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
        "rewrite": "def binomial_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)"
    },
    {
        "original": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
        "rewrite": "def get_Odd_Occurrence(arr, arr_size):\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if (count % 2 != 0):\n            return arr[i]\n    return -1"
    },
    {
        "original": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "rewrite": "def check_Equality(s):\n    return ord(s[0]) == ord(s[-1])\n\ndef count_Substring_With_Equal_Ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if check_Equality(s[i:i+j]):\n                result += 1\n    return result"
    },
    {
        "original": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
        "rewrite": "def func(nums, k):\n    import collections\n    import heapq\n    \n    d = collections.defaultdict(int)\n    \n    for row in nums:\n        for i in row:\n            d[i] += 1\n            \n    temp = []\n\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n                \n    result = []\n    \n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n        \n    return result"
    },
    {
        "original": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
        "rewrite": "import math\n\ndef max_prime_factors(n):\n    max_prime = -1\n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)"
    },
    {
        "original": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
        "rewrite": "def decimal_to_binary(N):\n    binary_number = 0\n    count = 0\n    \n    while N != 0:\n        rem = N % 2\n        power = pow(10, count)\n        binary_number += rem * power\n        N //= 2\n        count += 1\n        \n    return binary_number"
    },
    {
        "original": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
        "rewrite": "def find_missing(ar, N):\n    l = 0\n    r = N - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if ar[mid] != mid + 1 and ar[mid - 1] == mid:\n            return mid + 1\n        elif ar[mid] != mid + 1:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1"
    },
    {
        "original": "def find_rect_num(n):\r\n  return n*(n + 1) ",
        "rewrite": "def find_rect_num(n):\n    return n * (n + 1) // 2"
    },
    {
        "original": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
        "rewrite": "def find_Nth_Digit(p, q, N):  \n    while N > 0:  \n        N -= 1  \n        p *= 10  \n        res = p // q  \n        p %= q  \n    return res"
    },
    {
        "original": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
        "rewrite": "def sort_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if isinstance(i, int)])\n    str_part = sorted([i for i in mixed_list if isinstance(i, str)])\n    return int_part + str_part"
    },
    {
        "original": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
        "rewrite": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    if first_odd != 0:\n        return (first_even / first_odd)\n    else:\n        return \"Cannot divide by zero\""
    },
    {
        "original": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
        "rewrite": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    \n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    \n    ans = []\n    \n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        \n        if nct1 + 1: \n            heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: \n            heapq.heappush(heap, (nct2 + 1, char2))\n    \n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "original": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
        "rewrite": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums):\n    result = Counter(chain.from_iterable(nums))\n    return result"
    },
    {
        "original": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
        "rewrite": "def filter_even_numbers(nums):\n    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    return even_nums"
    },
    {
        "original": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
        "rewrite": "def find_Sum(arr):\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "original": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
        "rewrite": "import re\n\ndef text_match(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    },
    {
        "original": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "rewrite": "import re\n\ndef text_match_string(text):\n    patterns = '^\\w+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    },
    {
        "original": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
        "rewrite": "def find_gcd(x, y): \n    while(y): \n        x, y = y, x % y \n    return x \n\ndef get_gcd(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd"
    },
    {
        "original": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
        "rewrite": "def test_distinct(data):\n    return len(data) == len(set(data))"
    },
    {
        "original": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
        "rewrite": "def compute_last_digit(A, B): \n    variable = 1\n    if A == B:\n        return 1\n    elif B - A >= 5:\n        return 0\n    else: \n        for i in range(A + 1, B + 1): \n            variable = (variable * (i % 10)) % 10\n        return variable % 10"
    },
    {
        "original": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
        "rewrite": "def odd_bit_set_number(n):\n    count = 0\n    res = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n | res)"
    },
    {
        "original": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
        "rewrite": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result"
    },
    {
        "original": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
        "rewrite": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: len(i))\n    return min_length, min_list"
    },
    {
        "original": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
        "rewrite": "def check_equilateral(x, y, z):\n    return x == y == z"
    },
    {
        "original": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
        "rewrite": "def parallelogram_area(b, h):\n    area = b * h\n    return area"
    },
    {
        "original": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ",
        "rewrite": "def check_equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\""
    },
    {
        "original": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list",
        "rewrite": "def counting_sort(my_list):\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n        for a in range(buckets[j]):\n            my_list[i] = j\n            i += 1\n    return my_list"
    },
    {
        "original": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
        "rewrite": "import math\n\ndef tn_gp(a, n, r):\n    tn = a * (math.pow(r, n - 1))\n    return tn"
    },
    {
        "original": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ",
        "rewrite": "def rev(num):    \n    rev_num = 0\n    while (num > 0):\n        rev_num = (rev_num * 10 + num % 10)\n        num = num // 10\n    return rev_num\n\ndef check(n):    \n    return (2 * rev(n) == n + 1)"
    },
    {
        "original": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
        "rewrite": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    num = arr[0]\n    for i in range(1, n):\n        num = num * 10 + arr[i]\n    return num"
    },
    {
        "original": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ",
        "rewrite": "def opposite_signs(x, y):\n    return (x * y) < 0"
    },
    {
        "original": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
        "rewrite": "def is_octagonal(n):\n    return 3 * n * n - 2 * n"
    },
    {
        "original": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
        "rewrite": "def max_len_sub(arr, n):\n    mls = [1] * n\n    max = 0\n    for i in range(n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1:\n                mls[i] = mls[j] + 1\n    for i in range(n):\n        if max < mls[i]:\n            max = mls[i]\n    return max"
    },
    {
        "original": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count",
        "rewrite": "from collections import defaultdict\n\ndef count_substrings(s, n):\n    count, sum = 0, 0\n    mp = defaultdict(lambda: 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count"
    },
    {
        "original": "def smallest_num(xs):\n  return min(xs)\n",
        "rewrite": "def smallest_num(xs):\n  return min(xs)"
    },
    {
        "original": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ",
        "rewrite": "def max_difference(test_list):\n    temp = [abs(b - a) for a, b in test_list]\n    res = max(temp)\n    return res"
    },
    {
        "original": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
        "rewrite": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "original": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
        "rewrite": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"
    },
    {
        "original": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ",
        "rewrite": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num >= 0:\n            count += 1\n    return count"
    },
    {
        "original": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ",
        "rewrite": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"
    },
    {
        "original": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "rewrite": "def is_monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))"
    },
    {
        "original": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set",
        "rewrite": "def is_sublist(l, s):\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1                \n                if n == len(s):\n                    sub_set = True\n    return sub_set"
    },
    {
        "original": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")",
        "rewrite": "def find_equal_tuple(input, k):\n    flag = 1\n    for tup in input:\n        if len(tup) != k:\n            flag = 0\n            break\n    return flag\n\ndef get_equal(input, k):\n    if find_equal_tuple(input, k) == 1:\n        return \"All tuples have same length\"\n    else:\n        return \"All tuples do not have same length\""
    },
    {
        "original": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums",
        "rewrite": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(gaps / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i + gaps]:\n                nums[i], nums[i + gaps] = nums[i + gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums"
    },
    {
        "original": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False",
        "rewrite": "def dif_Square(n):\n    if n % 4 != 2:\n        return True\n    return False"
    },
    {
        "original": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))",
        "rewrite": "import re\n\ndef multiple_split(text):\n    return re.split('; |, |\\*|\\n', text)"
    },
    {
        "original": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True",
        "rewrite": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    sdict = {}\n    pset = set()\n    sset = set()\n    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        \n        if patterns[i] not in sdict:\n            sdict[patterns[i]] = []\n        \n        sdict[patterns[i]].append(colors[i])\n    \n    if len(pset) != len(sset):\n        return False\n    \n    for values in sdict.values():\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n            \n    return True"
    },
    {
        "original": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ",
        "rewrite": "def find_tuples(test_list, K):\n    res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return tuple(res)"
    },
    {
        "original": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
        "rewrite": "def count_squares(m, n):\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "original": "def is_Diff(n): \r\n    return (n % 11 == 0) ",
        "rewrite": "def is_divisible_by_11(n):\n    return n % 11 == 0"
    },
    {
        "original": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ",
        "rewrite": "def count_with_odd_set_bits(n):\n    if (n % 2 != 0):\n        return (n + 1) // 2\n    count = bin(n).count('1')\n    ans = n // 2\n    if (count % 2 != 0):\n        ans += 1\n    return ans"
    },
    {
        "original": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False",
        "rewrite": "def word_len(s):\n    s = s.split(' ')\n    for word in s:\n        if len(word) % 2 != 0:\n            return True\n    return False"
    },
    {
        "original": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6",
        "rewrite": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6"
    },
    {
        "original": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ",
        "rewrite": "def zip_tuples(test_tup1, test_tup2):\n    res = []\n    for i, j in enumerate(test_tup1):\n        res.append((j, test_tup2[i % len(test_tup2)]))\n    return res"
    },
    {
        "original": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume",
        "rewrite": "import math\n\ndef volume_sphere(r):\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "original": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)",
        "rewrite": "def get_Char(strr):\n    summ = 0\n    for i in range(len(strr)):\n        summ += (ord(strr[i]) - ord('a') + 1)\n    if (summ % 26 == 0):\n        return ord('z')\n    else:\n        summ = summ % 26\n        return chr(ord('a') + summ - 1)"
    },
    {
        "original": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "rewrite": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "original": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea",
        "rewrite": "import math\n\ndef surfacearea_sphere(r):\n    surfacearea = 4 * math.pi * r * r\n    return surfacearea"
    },
    {
        "original": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
        "rewrite": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"
    },
    {
        "original": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict",
        "rewrite": "import collections as ct\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2, dict3))\n    return merged_dict"
    },
    {
        "original": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count",
        "rewrite": "import collections\n\ndef freq_count(list1):\n    freq_count = collections.Counter(list1)\n    return freq_count"
    },
    {
        "original": "def closest_num(N):\r\n  return (N - 1)",
        "rewrite": "def closest_num(N):\r\n  return N - 1"
    },
    {
        "original": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max",
        "rewrite": "def len_log(list1):\n    max_length = len(list1[0])\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length"
    },
    {
        "original": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False",
        "rewrite": "def find_substring(str1, sub_str):\n    return any(sub_str in s for s in str1)"
    },
    {
        "original": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True",
        "rewrite": "def is_undulating(n): \n    if len(n) <= 2: \n        return False\n    for i in range(2, len(n)): \n        if n[i - 2] == n[i]: \n            return False\n    return True"
    },
    {
        "original": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
        "rewrite": "def power(a, b):\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b - 1)"
    },
    {
        "original": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ",
        "rewrite": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n    res = min(test_list, key=itemgetter(1))[0]\r\n    return res"
    },
    {
        "original": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ",
        "rewrite": "def find_min_length(lst):\n    min_length = min(len(x) for x in lst)\n    return min_length"
    },
    {
        "original": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x",
        "rewrite": "def divisor(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n    return x"
    },
    {
        "original": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
        "rewrite": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data:\n            dic_data[num] += 1\n        else:\n            dic_data[num] = 1\n    return dic_data"
    },
    {
        "original": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ",
        "rewrite": "def average_multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers)"
    },
    {
        "original": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ",
        "rewrite": "def decimal_to_binary(n):\n    return bin(n)[2:]"
    },
    {
        "original": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i",
        "rewrite": "import sys\n\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num + 1, sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i"
    },
    {
        "original": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]",
        "rewrite": "def kth_element(arr, n, k):\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr[k-1]"
    },
    {
        "original": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "rewrite": "def snake_to_camel(word):\r\n    import re\r\n    return ''.join(x.capitalize() for x in word.split('_') if x)"
    },
    {
        "original": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "rewrite": "def eulerian_num(n, m):\r\n    if m >= n or n == 0:\r\n        return 0\r\n    if m == 0:\r\n        return 1\r\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "original": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r",
        "rewrite": "def sort_sublists(input_list):\n    result = [sorted(x, key=lambda x: x[0]) for x in input_list]\n    return result"
    },
    {
        "original": "def count(lst):   \r\n    return sum(lst) ",
        "rewrite": "def count(lst):\n    return len(lst)"
    },
    {
        "original": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ",
        "rewrite": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return res"
    },
    {
        "original": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ",
        "rewrite": "def count_Hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if 10 <= i <= 15:\n            count += 1\n        elif i > 15:\n            k = i\n            while k != 0:\n                if k % 16 >= 10:\n                    count += 1\n                k = k // 16\n    return count"
    },
    {
        "original": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)",
        "rewrite": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    result = heapq.merge(num1, num2, num3)\n    return list(result)"
    },
    {
        "original": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ",
        "rewrite": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count"
    },
    {
        "original": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ",
        "rewrite": "def extract_missing(test_list, strt_val, stop_val):\n    res = []\n    for sub in test_list:\n        if sub[0] > strt_val:\n            res.append((strt_val, sub[0]))\n            strt_val = sub[1]\n        if strt_val < stop_val:\n            res.append((strt_val, stop_val))\n    return res"
    },
    {
        "original": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result",
        "rewrite": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result"
    },
    {
        "original": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ",
        "rewrite": "def perimeter(diameter, height):\n    return 2 * (diameter + height)"
    },
    {
        "original": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False",
        "rewrite": "def check_integer(text):\r\n    text = text.strip()\r\n    if len(text) < 1:\r\n        return None\r\n    else:\r\n        if all(char.isdigit() or char in \"+-\" for char in text):\r\n            return True\r\n        else:\r\n            return False"
    },
    {
        "original": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ",
        "rewrite": "from collections import Counter\ndef assign_freq(test_list):\n    res = [(key, val) for key, val in Counter(test_list).items()]\n    return str(res)"
    },
    {
        "original": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit",
        "rewrite": "def empty_dict(list1):\n    empty_dict = all(not d for d in list1)\n    return empty_dict"
    },
    {
        "original": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result",
        "rewrite": "def tuple_to_int(nums):\n    result = int(''.join(map(str, nums)))\n    return result"
    },
    {
        "original": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ",
        "rewrite": "def list_to_float(test_list):\n    res = []\n    for tup in test_list:\n        temp = []\n        for ele in tup:\n            if isinstance(ele, str):\n                temp.append(ele)\n            else:\n                temp.append(float(ele))\n        res.append((temp[0], temp[1]))\n    return str(res)"
    },
    {
        "original": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst",
        "rewrite": "def string_to_list(string):\n    lst = string.split(\" \")\n    return lst"
    },
    {
        "original": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)",
        "rewrite": "def search(arr, n):\n    XOR = 0\n    for i in range(n):\n        XOR ^= arr[i]\n    return XOR"
    },
    {
        "original": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max",
        "rewrite": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max"
    },
    {
        "original": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)",
        "rewrite": "def check_triplet(A, n, total, count):\n    if count == 3 and total == 0:\n        return True\n    if count == 3 or n == 0 or total < 0:\n        return False\n    return check_triplet(A, n - 1, total - A[n - 1], count + 1) or \\\n           check_triplet(A, n - 1, total, count)"
    },
    {
        "original": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ",
        "rewrite": "MAX = 3000\ndef smartNumber(n):\n    primes = [0] * MAX\n    result = []\n    for i in range(2, MAX):\n        if primes[i] == 0:\n            primes[i] = 1\n            j = i * 2\n            while j < MAX:\n                primes[j] -= 1\n                if (primes[j] + 3) == 0:\n                    result.append(j)\n                j = j + i\n    result.sort()\n    return result[n - 1]"
    },
    {
        "original": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
        "rewrite": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum(fact for fact in range(1, num) if num % fact == 0)\n        sum_fact2 = sum(fact for fact in range(1, sum_fact) if sum_fact % fact == 0)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)"
    },
    {
        "original": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
        "rewrite": "import cmath\ndef angle_complex(a,b):\n    cn = complex(a, b)\n    angle = cmath.phase(cn)\n    return angle"
    },
    {
        "original": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0",
        "rewrite": "def find_length(string, n):\n    current_sum = 0\n    max_sum = 0\n    for i in range(n):\n        current_sum += 1 if string[i] == '0' else -1\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0"
    },
    {
        "original": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum",
        "rewrite": "def sum(a, b): \n    total = 0\n    for i in range(1, min(a, b)): \n        if a % i == 0 and b % i == 0: \n            total += i \n    return total"
    },
    {
        "original": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
        "rewrite": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)"
    },
    {
        "original": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t",
        "rewrite": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len"
    },
    {
        "original": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True",
        "rewrite": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum(lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0, iSize):\n        result1 += my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1, -1, -1):\n        result2 += my_matrix[i][i]\n    sum_list.append(result2)\n    return len(set(sum_list)) <= 1"
    },
    {
        "original": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result",
        "rewrite": "from collections import defaultdict\ndef max_occurrences(nums):\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    result = max(count_dict.items(), key=lambda x: x[1]) \n    return result"
    },
    {
        "original": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string",
        "rewrite": "def reverse_vowels(str1):\n    vowels = \"\"\n    for char in str1:\n        if char.lower() in \"aeiou\":\n            vowels += char\n    \n    result_string = \"\"\n    for char in str1:\n        if char.lower() in \"aeiou\":\n            result_string += vowels[-1]\n            vowels = vowels[:-1]\n        else:\n            result_string += char\n    \n    return result_string"
    },
    {
        "original": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str",
        "rewrite": "def tup_string(tup1):\n    str = ''.join(str(x) for x in tup1)\n    return str"
    },
    {
        "original": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
        "rewrite": "def sum_negativenum(nums):\n    sum_negativenum = list(filter(lambda num: num < 0, nums))\n    return sum(sum_negativenum)"
    },
    {
        "original": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ",
        "rewrite": "def check_last(arr, n, p):\n    _sum = 0\n    for i in range(n):\n        _sum += arr[i]\n    \n    if p == 1:\n        if _sum % 2 == 0:\n            return \"ODD\"\n        else:\n            return \"EVEN\"\n    \n    return \"EVEN\""
    },
    {
        "original": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ",
        "rewrite": "def hexagonal_num(n): \n    return n * (2 * n - 1)"
    },
    {
        "original": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total",
        "rewrite": "def calculate_electric_bill(units):\n    if units < 50:\n        amount = units * 2.60\n        surcharge = 25\n    elif units <= 100:\n        amount = 130 + ((units - 50) * 3.25)\n        surcharge = 35\n    elif units <= 200:\n        amount = 130 + 162.50 + ((units - 100) * 5.26)\n        surcharge = 45\n    else:\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n        surcharge = 75\n    total = amount + surcharge\n    return total"
    },
    {
        "original": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "rewrite": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n    return round(n1/n, 2)"
    },
    {
        "original": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True",
        "rewrite": "def is_sum_of_powers_of_two(n):\n    return n % 2 == 0"
    },
    {
        "original": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter",
        "rewrite": "def circle_circumference(r):\r\n    perimeter = 2 * 3.1415 * r\r\n    return perimeter"
    },
    {
        "original": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ",
        "rewrite": "def extract_singly(test_list):\n    res = []\n    temp = set()\n    for inner in test_list:\n        for ele in inner:\n            if ele not in temp:\n                temp.add(ele)\n                res.append(ele)\n    return res"
    },
    {
        "original": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums",
        "rewrite": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:]\n        nums = nums[arr_len-1::-1] + nums[arr_len:]\n        arr_len -= 1\n    return nums"
    },
    {
        "original": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result",
        "rewrite": "def count_samepair(list1, list2, list3):\n    result = sum(m == n == o for m, n, o in zip(list1, list2, list3))\n    return result"
    },
    {
        "original": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ",
        "rewrite": "def find_lists(Input):\n    if isinstance(Input, list):\n        return 1\n    else:\n        return len(Input)"
    },
    {
        "original": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum",
        "rewrite": "def sum_Pairs(arr, n):\n    sum = 0\n    for i in range(n - 1, -1, -1):\n        sum += i * arr[i] - (n - 1 - i) * arr[i]\n    return sum"
    },
    {
        "original": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ",
        "rewrite": "def max_Abs_Diff(arr, n):\n    minEle = arr[0]\n    maxEle = arr[0]\n    for i in range(1, n):\n        minEle = min(minEle, arr[i])\n        maxEle = max(maxEle, arr[i])\n    return abs(maxEle - minEle)"
    },
    {
        "original": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])",
        "rewrite": "def ascii_value_string(str1):\n  ascii_values = []\n  for i in range(len(str1)):\n    ascii_values.append(ord(str1[i]))\n  return ascii_values"
    },
    {
        "original": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]",
        "rewrite": "def max_path_sum(tri, m, n):\n    for i in range(m-1, -1, -1):\n        for j in range(i+1):\n            if (tri[i+1][j] > tri[i+1][j+1]):\n                tri[i][j] += tri[i+1][j]\n            else:\n                tri[i][j] += tri[i+1][j+1]\n    return tri[0][0]"
    },
    {
        "original": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
        "rewrite": "def sum_digits_single(x): \n    ans = 0\n    while x: \n        ans += x % 10\n        x //= 10  \n    return ans \n\ndef closest(x): \n    ans = 0\n    while (ans * 10 + 9 <= x): \n        ans = ans * 10 + 9  \n    return ans   \n\ndef sum_digits_twoparts(N): \n    A = closest(N)  \n    return sum_digits_single(A) + sum_digits_single(N - A)"
    },
    {
        "original": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result",
        "rewrite": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1 for i in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)):\n                dp[i] = max(dp[i], dp[j]+1)\n    result = 1\n    for i in range(n):\n        if result < dp[i]:\n            result = dp[i]\n    return result"
    },
    {
        "original": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False",
        "rewrite": "def does_contain_b(a, b, c):\r\n    if a == b:\r\n        return True\r\n    if (b - a) * c > 0 and (b - a) % c == 0:\r\n        return True\r\n    return False"
    },
    {
        "original": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1",
        "rewrite": "def gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p\n\ndef is_coprime(x, y):\n    return gcd(x, y) == 1"
    },
    {
        "original": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n",
        "rewrite": "def merge(a, b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a = a[1:]\n        else:\n            c.append(b[0])\n            b = b[1:]\n    c += a\n    c += b\n    return c\n\ndef merge_sort(x):\n    if len(x) <= 1:\n        return x\n    else:\n        middle = len(x) // 2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a, b)"
    },
    {
        "original": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
        "rewrite": "def parabola_vertex(a, b, c): \n    vertex = ((-b / (2 * a)), (((4 * a * c) - (b ** 2)) / (4 * a)))\n    return vertex"
    },
    {
        "original": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result",
        "rewrite": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result"
    },
    {
        "original": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "rewrite": "def even_bit_toggle_number(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 1:\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res"
    },
    {
        "original": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result",
        "rewrite": "def tuple_int_str(tuple_str):\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result"
    },
    {
        "original": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
        "rewrite": "from itertools import groupby\ndef encode_list(list1):\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "original": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ",
        "rewrite": "def min_Ops(arr, n, k):\r\n    max1 = max(arr)\r\n    res = 0\r\n    \r\n    for i in range(0, n):\r\n        if ((max1 - arr[i]) % k != 0):\r\n            return -1\r\n        else:\r\n            res += (max1 - arr[i]) / k\r\n    \r\n    return int(res)"
    },
    {
        "original": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season",
        "rewrite": "def month_season(month, days):\n    if month in ('January', 'February', 'March'):\n        season = 'winter'\n    elif month in ('April', 'May', 'June'):\n        season = 'spring'\n    elif month in ('July', 'August', 'September'):\n        season = 'summer'\n    else:\n        season = 'autumn'\n    \n    if (month == 'March') and (days > 19):\n        season = 'spring'\n    elif (month == 'June') and (days > 20):\n        season = 'summer'\n    elif (month == 'September') and (days > 21):\n        season = 'autumn'\n    elif (month == 'October') and (days > 21):\n        season = 'autumn'\n    elif (month == 'November') and (days > 21):\n        season = 'autumn'\n    elif (month == 'December') and (days > 20):\n        season = 'winter'\n    \n    return season"
    },
    {
        "original": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ",
        "rewrite": "def solution(a, b, n):\n    i = 0\n    while i * a <= n:\n        if (n - (i * a)) % b == 0:\n            return (\"x =\", i, \", y =\", int((n - (i * a)) / b))\n        i = i + 1\n    return \"No solution\""
    },
    {
        "original": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result",
        "rewrite": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result"
    },
    {
        "original": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
        "rewrite": "def sum_series(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series(n - 2)"
    },
    {
        "original": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
        "rewrite": "from math import tan, pi\n\ndef area_polygon(sides, length):\n    area = sides * (length ** 2) / (4 * tan(pi / sides))\n    return area"
    },
    {
        "original": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
        "rewrite": "import math\n\ndef divSum(n):\n    total = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            total += i + math.floor(n / i)\n        i += 1\n    return total\n\ndef areEquivalent(num1, num2):\n    return divSum(num1) == divSum(num2)"
    },
    {
        "original": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ",
        "rewrite": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars"
    },
    {
        "original": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ",
        "rewrite": "def find_even_Pair(A, N):\n    evenPair = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if ((A[i] ^ A[j]) % 2 == 0):\n                evenPair += 1\n    return evenPair"
    },
    {
        "original": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ",
        "rewrite": "def next_power_of_2(n):\n    count = 0\n    if n and not(n & (n - 1)):\n        return n\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count"
    },
    {
        "original": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ",
        "rewrite": "def frequency(a, x):\r\n    count = 0\r\n    for i in a:\r\n        if i == x:\r\n            count += 1\r\n    return count"
    },
    {
        "original": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
        "rewrite": "def get_pell(n):\n    if (n <= 2):\n        return n\n    a = 1\n    b = 2\n    for i in range(3, n+1):\n        c = 2 * b + a\n        a = b\n        b = c\n    return b"
    },
    {
        "original": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
        "rewrite": "def sum_range_list(list1, m, n):\n    sum_range = 0\n    for i in range(m, n+1, 1):\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "original": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter",
        "rewrite": "import math\n\ndef perimeter_pentagon(a):\n    return 5 * a"
    },
    {
        "original": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count",
        "rewrite": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i] == 's' and s[i + 1] == 't' and s[i + 2] == 'd':\n            count += 1\n    return count"
    },
    {
        "original": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))",
        "rewrite": "import re\n\ndef remove_splchar(text): \n    pattern = re.compile('[\\W_]+')\n    return pattern.sub('', text)"
    },
    {
        "original": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result",
        "rewrite": "def group_keyvalue(l):\n    result = {}\n    for k, v in l:\n        result.setdefault(k, []).append(v)\n    return result"
    },
    {
        "original": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0",
        "rewrite": "def is_valid_parentheses(str1):\n    stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    for parenthesis in str1:\n        if parenthesis in pchar:\n            stack.append(parenthesis)\n        elif len(stack) == 0 or pchar[stack.pop()] != parenthesis:\n            return False\n    return len(stack) == 0"
    },
    {
        "original": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter",
        "rewrite": "def perimeter_triangle(a, b, c):\n    return a + b + c"
    },
    {
        "original": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ",
        "rewrite": "def answer(L, R):\n    if 2 * L <= R:\n        return (L, 2 * L)\n    else:\n        return -1"
    },
    {
        "original": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')",
        "rewrite": "import re\ndef string_literals(patterns, text):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'"
    },
    {
        "original": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ",
        "rewrite": "def is_num_keith(x):\n    terms = []\n    temp = x\n    n = 0\n    while (temp > 0):\n        terms.append(temp % 10)\n        temp = int(temp / 10)\n        n += 1\n    terms.reverse()\n    next_term = 0\n    i = n\n    while (next_term < x):\n        next_term = 0\n        for j in range(1, n + 1):\n            next_term += terms[i - j]\n        terms.append(next_term)\n        i += 1\n    return (next_term == x)"
    },
    {
        "original": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
        "rewrite": "from math import radians, sin, cos, acos\n\ndef distance_lat_long(slat, slon, elat, elon):\n    dist = 6371.01 * acos(sin(radians(slat)) * sin(radians(elat)) + cos(radians(slat)) * cos(radians(elat)) * cos(radians(slon) - radians(elon))\n    return dist"
    },
    {
        "original": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ",
        "rewrite": "def common_prefix_util(str1, str2):\n    result = \"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if str1[i] != str2[j]:\n            break\n        result += str1[i]\n        i += 1\n        j += 1\n    return result\n\ndef common_prefix(arr, n):\n    prefix = arr[0]\n    for i in range(1, n):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix"
    },
    {
        "original": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
        "rewrite": "import re\n\ndef find_character(string):\n    uppercase_characters = re.findall(r\"[A-Z]\", string) \n    lowercase_characters = re.findall(r\"[a-z]\", string) \n    numerical_characters = re.findall(r\"[0-9]\", string) \n    special_characters = re.findall(r\"[, .!?]\", string) \n    return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "original": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count",
        "rewrite": "def count_pairs(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count"
    },
    {
        "original": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum",
        "rewrite": "def greater_specificnum(list, num):\n    greater_specificnum = all(x >= num for x in list)\n    return greater_specificnum"
    },
    {
        "original": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus",
        "rewrite": "def parabola_focus(a, b, c): \n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a)))\n  return focus"
    },
    {
        "original": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')",
        "rewrite": "import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'"
    },
    {
        "original": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
        "rewrite": "def longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0 \n    elif X[m-1] == Y[n-1]: \n        return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "original": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;",
        "rewrite": "def prod_Square(n):\n    for i in range(2, int(n**0.5) + 1):\n        if (i*i < (n + 1)):\n            for j in range(2, n + 1):\n                if ((i*i*j*j) == n):\n                    return True\n    return False"
    },
    {
        "original": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
        "rewrite": "def first_missing_positive(arr, n):\n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return 1\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return i + 1\n    return n + 1"
    },
    {
        "original": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",
        "rewrite": "def count_Intgral_Points(x1, y1, x2, y2):\n    return (y2 - y1 - 1) * (x2 - x1 - 1)"
    },
    {
        "original": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False",
        "rewrite": "def check_monthnumber(monthname3):\n    if monthname3 in [\"April\", \"June\", \"September\", \"November\"]:\n        return True\n    else:\n        return False"
    },
    {
        "original": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ",
        "rewrite": "def check_string(input_str): \n    flag_letter = False\n    flag_number = False\n    for char in input_str: \n        if char.isalpha(): \n            flag_letter = True  \n        if char.isdigit(): \n            flag_number = True\n    return flag_letter and flag_number"
    },
    {
        "original": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ",
        "rewrite": "def remove_tuple(test_tup):\n    res = tuple(set(test_tup))\n    return res"
    },
    {
        "original": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
        "rewrite": "def octal_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 8\n    return dec_value"
    },
    {
        "original": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res",
        "rewrite": "def first(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1  \n    while low <= high:\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res"
    },
    {
        "original": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ",
        "rewrite": "def remove_tuples(test_list, K):\r\n    res = [ele for ele in test_list if len(ele) != K]\r\n    return res"
    },
    {
        "original": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
        "rewrite": "def find_exponential(test_tup1, test_tup2):\n    res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res"
    },
    {
        "original": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ",
        "rewrite": "import math\n\ndef largest_triangle(a, b):\n    if (a < 0 or b < 0):\n        return -1\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b)\n    return area"
    },
    {
        "original": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ",
        "rewrite": "def highest_power_of_2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if ((i & (i - 1)) == 0):\n            res = i\n            break\n    return res"
    },
    {
        "original": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result",
        "rewrite": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result"
    },
    {
        "original": "def chkList(lst): \r\n    return len(set(lst)) == 1",
        "rewrite": "def chkList(lst):\n    return len(set(lst)) == 1"
    },
    {
        "original": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "rewrite": "def remove_even(str1):\n    str2 = ''\n    for i in range(1, len(str1) + 1):\n        if i % 2 != 0:\n            str2 += str1[i - 1]\n    return str2"
    },
    {
        "original": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ",
        "rewrite": "def hamming_distance(n1,n2):\n    x = n1 ^ n2\n    set_bits = 0\n    while x > 0:\n        set_bits += x & 1\n        x >>= 1\n    return set_bits"
    },
    {
        "original": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ",
        "rewrite": "def count(s, c):\n    res = 0\n    for char in s:\n        if char == c:\n            res += 1\n    return res"
    },
    {
        "original": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ",
        "rewrite": "def inversion_elements(test_tup):\r\n    res = tuple(map(lambda x: ~x, test_tup))\r\n    return res"
    },
    {
        "original": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "rewrite": "def concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return res"
    },
    {
        "original": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]",
        "rewrite": "def find_longest_repeating_subseq(str): \n    n = len(str) \n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)] \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            if (str[i-1] == str[j-1] and i != j): \n                dp[i][j] = 1 + dp[i-1][j-1] \n            else: \n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]) \n    return dp[n][n]"
    },
    {
        "original": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)",
        "rewrite": "import re\n\ndef is_decimal(num):\n    num_fetch = re.compile(r\"^[0-9]+(\\.[0-9]{1,2})?$\")\n    result = num_fetch.search(num)\n    return bool(result)"
    },
    {
        "original": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap",
        "rewrite": "import heapq as hq\ndef heap_replace(heap, a):\n    hq.heapify(heap)\n    hq.heapreplace(heap, a)\n    return heap"
    },
    {
        "original": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)",
        "rewrite": "import re\n\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    result = get_char.search(string)\n    return not bool(result)"
    },
    {
        "original": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ",
        "rewrite": "def count_Num(n): \n    if (n == 1): \n        return 1\n    count = pow(2, n - 2) \n    return count"
    },
    {
        "original": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum",
        "rewrite": "import math  \ndef fourth_Power_Sum(n): \n    total_sum = 0\n    for i in range(1, n+1): \n        total_sum += math.pow(i, 4) \n    return total_sum"
    },
    {
        "original": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "rewrite": "def concatenate_strings(test_tup1, test_tup2):\n    res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res"
    },
    {
        "original": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
        "rewrite": "import math\n\ndef degree_radian(radian):\n    degree = radian * (180 / math.pi)\n    return degree"
    },
    {
        "original": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]",
        "rewrite": "def decode_list(alist):\n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "original": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ",
        "rewrite": "def check_subset_list(list1, list2):\r\n    exist = all(item in list1 for item in list2)\r\n    return exist"
    },
    {
        "original": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'",
        "rewrite": "def first_repeated_char(string):\n    char_count = {}\n    \n    for char in string:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 0\n    \n    return '\\0'"
    },
    {
        "original": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1",
        "rewrite": "import math\n\ndef min_operations(A, B):\n    if A > B:\n        A, B = B, A\n    B = B // math.gcd(A, B)\n    return B - 1"
    },
    {
        "original": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ",
        "rewrite": "def extract_min_max(test_tup, K):\n    res = []\n    test_tup = list(test_tup)\n    temp = sorted(test_tup)\n    for idx, val in enumerate(temp):\n        if idx < K or idx >= len(temp) - K:\n            res.append(val)\n    res = tuple(res)\n    return res"
    },
    {
        "original": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))",
        "rewrite": "import re\n\ndef replace_max_specialchar(text, n):\n    return re.sub(\"[ ,.]\", \":\", text, n)"
    },
    {
        "original": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even",
        "rewrite": "def first_even(nums):\n    first_even = next((el for el in nums if el % 2 == 0), -1)\n    return first_even"
    },
    {
        "original": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
        "rewrite": "def check_type(test_tuple):\n    return all(isinstance(ele, type(test_tuple[0])) for ele in test_tuple)"
    },
    {
        "original": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
        "rewrite": "def is_majority(arr, n, x):\n    i = binary_search(arr, 0, n-1, x)\n    if i == -1:\n        return False\n    if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n        return True\n    else:\n        return False\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (low + high)//2 \n        if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, (mid + 1), high, x)\n        else:\n            return binary_search(arr, low, (mid -1), x)\n    return -1"
    },
    {
        "original": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ",
        "rewrite": "def count_set_bits(n):\r\n    count = 0\r\n    while n:\r\n        count += n & 1\r\n        n >>= 1\r\n    return count"
    },
    {
        "original": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ",
        "rewrite": "def find_min(arr, low, high):\r\n    while low < high:\r\n        mid = low + (high - low) // 2\r\n        if arr[mid] == arr[high]:\r\n            high -= 1\r\n        elif arr[mid] > arr[high]:\r\n            low = mid + 1\r\n        else:\r\n            high = mid\r\n    return arr[high]"
    },
    {
        "original": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result",
        "rewrite": "def odd_values_string(str):\r\n    result = \"\" \r\n    for i in range(len(str)):\r\n        if i % 2 != 0:\r\n            result += str[i]\r\n    return result"
    },
    {
        "original": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
        "rewrite": "def min_of_three(a, b, c):\n    return min(a, b, c)"
    },
    {
        "original": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False",
        "rewrite": "def all_bits_set_in_the_given_range(n, l, r):\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if new_num == 0:\n        return True\n    return False"
    },
    {
        "original": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr",
        "rewrite": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr"
    },
    {
        "original": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2",
        "rewrite": "def replace_blank(str1, char):\n    str2 = str1.replace(' ', char)\n    return str2"
    },
    {
        "original": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))",
        "rewrite": "def max_sum(tri, n):\n    if n > 1:\n        tri[1][1] = tri[1][1] + tri[0][0]\n        tri[1][0] = tri[1][0] + tri[0][0]\n\n    for i in range(2, n):\n        tri[i][0] = tri[i][0] + tri[i - 1][0]\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1]\n        \n        for j in range(1, i):\n            if tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]:\n                tri[i][j] = tri[i][j] + tri[i - 1][j - 1]\n            else:\n                tri[i][j] = tri[i][j] + tri[i - 1][j]\n\n    return max(tri[n - 1])"
    },
    {
        "original": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest",
        "rewrite": "import heapq\n\ndef large_n_numbers(list1, n):\n    largest = heapq.nlargest(n, list1)\n    return largest"
    },
    {
        "original": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface",
        "rewrite": "def lateral_surface_cylinder(r, h):\r\n    lateral_surface = 2 * 3.1415 * r * h\r\n    return lateral_surface"
    },
    {
        "original": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume",
        "rewrite": "def volume_cube(l):\n    return l**3"
    },
    {
        "original": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ",
        "rewrite": "def even_bit_set_number(n):\n    count = 0\n    res = 0\n    temp = n\n    \n    while temp > 0:\n        if count % 2 == 1:\n            res |= 1 << count\n        count += 1\n        temp >>= 1\n        \n    return n | res"
    },
    {
        "original": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;",
        "rewrite": "def No_of_Triangle(N, K):\n    if N < K:\n        return -1\n    else:\n        Tri_up = ((N - K + 1) * (N - K + 2)) // 2\n        Tri_down = ((N - 2 * K + 1) * (N - 2 * K + 2)) // 2\n        return Tri_up + Tri_down"
    },
    {
        "original": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ",
        "rewrite": "from collections import Counter \r\ndef check_occurrences(test_list):\r\n    res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n    return res"
    },
    {
        "original": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ",
        "rewrite": "def number_of_substrings(str):\n    str_len = len(str)\n    return int(str_len * (str_len + 1) / 2)"
    },
    {
        "original": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]",
        "rewrite": "def get_total_number_of_sequences(m, n):\n    T = [[0 for i in range(n + 1)] for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                T[i][j] = 0\n            elif i < j:\n                T[i][j] = 0\n            elif j == 1:\n                T[i][j] = i\n            else:\n                T[i][j] = T[i - 1][j] + T[i // 2][j - 1]\n    return T[m][n]"
    },
    {
        "original": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n",
        "rewrite": "def replace_list(list1, list2):\n    list1[-len(list2):] = list2\n    return list1"
    },
    {
        "original": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d",
        "rewrite": "def array_3d(m, n, o):\n    array_3d = [[['*' for _ in range(m)] for _ in range(n)] for _ in range(o)]\n    return array_3d"
    },
    {
        "original": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total",
        "rewrite": "def count_charac(str1):\n    total = 0\n    for i in str1:\n        total += 1\n    return total"
    },
    {
        "original": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ",
        "rewrite": "def sort_on_occurence(lst):\r\n    dct = {}\r\n    for i, j in lst:\r\n        dct.setdefault(i, []).append(j)\r\n    return [(i, *dict.fromkeys(j), len(j))\r\n            for i, j in dct.items()]"
    },
    {
        "original": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ",
        "rewrite": "import math\n\ndef next_Perfect_Square(N):\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN"
    },
    {
        "original": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum",
        "rewrite": "def max_sum(arr, n):\n    MSIBS = arr[:] \n    for i in range(n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]:\n                MSIBS[i] = MSIBS[j] + arr[i] \n    \n    MSDBS = arr[:]\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]:\n                MSDBS[-i] = MSDBS[-j] + arr[-i]\n    \n    max_sum_final = float(\"-Inf\")\n    for i, j, k in zip(MSIBS, MSDBS, arr):\n        max_sum_final = max(max_sum_final, i + j - k)\n    \n    return max_sum_final"
    },
    {
        "original": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
        "rewrite": "def babylonian_squareroot(number):\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g"
    },
    {
        "original": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
        "rewrite": "def lps(s):\n    n = len(s)\n    L = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n    return L[0][n-1]"
    },
    {
        "original": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "rewrite": "def harmonic_sum(n):\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)"
    },
    {
        "original": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
        "rewrite": "def intersection_array(array_nums1, array_nums2):\n    result = [x for x in array_nums2 if x in array_nums1]\n    return result"
    },
    {
        "original": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ",
        "rewrite": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if ele == x: \n            count += 1\n    return count"
    },
    {
        "original": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list",
        "rewrite": "def insert_element(my_list, element):\n    my_list = [v for elt in my_list for v in (element, elt)]\n    return my_list"
    },
    {
        "original": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ",
        "rewrite": "import cmath\n\ndef convert(numbers):\n    num = cmath.polar(numbers)\n    return num"
    },
    {
        "original": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr",
        "rewrite": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr += 1\n    return ctr"
    },
    {
        "original": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list",
        "rewrite": "import re\ndef words_ae(text):\n    word_list = re.findall(\"[ae]\\w+\", text)\n    return word_list"
    },
    {
        "original": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r",
        "rewrite": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "original": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr",
        "rewrite": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "original": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)",
        "rewrite": "def swap_numbers(a, b):\n    a, b = b, a\n    return (a, b)"
    },
    {
        "original": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd",
        "rewrite": "def count_odd(array_nums):\n    count_odd = len(list(filter(lambda x: (x % 2 != 0), array_nums)))\n    return count_odd"
    },
    {
        "original": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "rewrite": "def maximize_elements(test_tup1, test_tup2):\n    res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res"
    },
    {
        "original": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "rewrite": "def newman_prime(n):\n    if n == 0 or n == 1:\n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "original": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "rewrite": "def division_elements(test_tup1, test_tup2):\n    res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res"
    },
    {
        "original": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]",
        "rewrite": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "original": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d",
        "rewrite": "def merge_dict(d1, d2):\n    d = d1.copy()\n    d.update(d2)\n    return d"
    },
    {
        "original": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
        "rewrite": "def dog_age(h_age):\r\n\td_age = 0\r\n\tif h_age < 0:\r\n\t\texit()\r\n\telif h_age <= 2:\r\n\t\td_age = h_age * 10.5\r\n\telse:\r\n\t\td_age = 21 + (h_age - 2) * 4\r\n\treturn d_age"
    },
    {
        "original": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]",
        "rewrite": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]"
    },
    {
        "original": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA",
        "rewrite": "def lateralsurface_cube(l):\n    LSA = 4 * (l * l)\n    return LSA"
    },
    {
        "original": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ",
        "rewrite": "def square_sum(n):\n    return int(n * (4 * n * n - 1) / 3)"
    },
    {
        "original": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ",
        "rewrite": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1"
    },
    {
        "original": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)",
        "rewrite": "def ascii_value(k):\n    return ord(k)"
    },
    {
        "original": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum",
        "rewrite": "def sum_even_and_even_index(arr, n):\n    total_sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "original": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ",
        "rewrite": "def even_Power_Sum(n): \n    total_sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        total_sum += j ** 5\n    return total_sum"
    },
    {
        "original": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ",
        "rewrite": "def rear_extract(test_list):\n    return [lis[-1] for lis in test_list]"
    },
    {
        "original": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ",
        "rewrite": "def subtract_elements(test_tup1, test_tup2):\r\n    res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n    return res"
    },
    {
        "original": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ",
        "rewrite": "import math\n\ndef even_binomial_coeff_sum(n):\n    return 1 << (n - 1)"
    },
    {
        "original": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1",
        "rewrite": "import math as mt\r\ndef get_Position(a, n, m):\r\n    for i in range(n):\r\n        a[i] = (a[i] // m + (a[i] % m != 0))\r\n    result, maxx = -1, -1\r\n    for i in range(n - 1, -1, -1):\r\n        if (maxx < a[i]):\r\n            maxx = a[i]\r\n            result = i\r\n    return result + 1"
    },
    {
        "original": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume",
        "rewrite": "def volume_cylinder(r, h):\n    return 3.1415 * r * r * h"
    },
    {
        "original": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result",
        "rewrite": "def dict_filter(my_dict, n):\r\n    result = {key: value for key, value in my_dict.items() if value >= n}\r\n    return result"
    },
    {
        "original": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ",
        "rewrite": "def count_first_elements(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n            break\n    return count"
    },
    {
        "original": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ",
        "rewrite": "def is_num_decagonal(n):\n    return 4 * n * n - 3 * n"
    },
    {
        "original": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
        "rewrite": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return found, pos"
    },
    {
        "original": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True",
        "rewrite": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))"
    },
    {
        "original": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
        "rewrite": "def sub_list(nums1, nums2):\n    result = list(map(lambda x, y: x - y, nums1, nums2))\n    return result"
    },
    {
        "original": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True",
        "rewrite": "def validate(n): \n    for i in range(10): \n        temp = n\n        count = 0\n        while temp: \n            if temp % 10 == i: \n                count += 1\n            if count > i: \n                return False\n            temp //= 10\n    return True"
    },
    {
        "original": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element",
        "rewrite": "def check_element(lst, element):\n    all_equal = all(v == element for v in lst)\n    return all_equal"
    },
    {
        "original": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "rewrite": "import re\n\ndef text_match_two_three(text):\n    patterns = 'ab{2,3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    },
    {
        "original": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
        "rewrite": "def max_sub_array_sum_repeated(a, n, k): \n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(n*k): \n        max_ending_here = max_ending_here + a[i % n] \n        if max_so_far < max_ending_here: \n            max_so_far = max_ending_here \n        if max_ending_here < 0: \n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "original": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)",
        "rewrite": "def square_sum(n):\n    return 2 * n * (n + 1) * (2 * n + 1) // 3"
    },
    {
        "original": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
        "rewrite": "def modular_inverse(arr, N, P):\n    current_element = 0\n    for i in range(0, N):\n        if (arr[i] * arr[i]) % P == 1:\n            current_element += 1\n    return current_element"
    },
    {
        "original": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ",
        "rewrite": "def odd_days(N):\n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap\n    if (hund1):\n        ordd += hund1\n        leap -= hund1\n    if (hund4):\n        ordd -= hund4\n        leap += hund4\n    days = ordd + leap * 2\n    odd = days % 7\n    return odd"
    },
    {
        "original": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
        "rewrite": "def max_length(list1):\n    max_length = max(len(x) for x in list1)  \n    max_list = max(list1, key=len)\n    return max_length, max_list"
    },
    {
        "original": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
        "rewrite": "def count_no_of_ways(n, k):\n    dp = [0] * (n + 1)\n    total = k\n    mod = 1000000007\n    dp[1] = k\n    dp[2] = k * k\n    for i in range(3, n + 1):\n        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod\n    return dp[n]"
    },
    {
        "original": "def find(n,m):  \r\n    q = n//m \r\n    return (q)",
        "rewrite": "def find(n, m): \n    q = n // m \n    return q"
    },
    {
        "original": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s",
        "rewrite": "import math\n\ndef otherside_rightangle(w, h):\n    s = math.sqrt((w ** 2) + (h ** 2))\n    return s"
    },
    {
        "original": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)",
        "rewrite": "def max_val(listval):\n    max_val = max(i for i in listval if isinstance(i, int)) \n    return max_val"
    },
    {
        "original": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
        "rewrite": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "original": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ",
        "rewrite": "def get_Inv_Count(arr, n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1, n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count"
    },
    {
        "original": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ",
        "rewrite": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list"
    },
    {
        "original": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result",
        "rewrite": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result"
    },
    {
        "original": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
        "rewrite": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata.items():\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "original": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ",
        "rewrite": "def count_binary_seq(n): \n    nCr = 1\n    res = 1\n    for r in range(1, n + 1): \n        nCr = (nCr * (n + 1 - r)) / r \n        res += nCr * nCr \n    return res"
    },
    {
        "original": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
        "rewrite": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"
    },
    {
        "original": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
        "rewrite": "def set_bit_number(n):\n    if n == 0:\n        return 0\n    msb = 0\n    n = int(n / 2)\n    while n > 0:\n        n = int(n / 2)\n        msb += 1\n    return (1 << msb)"
    },
    {
        "original": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
        "rewrite": "import sys \ndef solve(a,n):   \n    mx = -sys.maxsize - 1\n    for j in range(1,n):  \n        if mx > a[j]:  \n            return False  \n        mx = max(mx, a[j - 1])    \n    return True"
    },
    {
        "original": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ",
        "rewrite": "def find_element(arr, ranges, rotations, index):\n    for i in range(rotations - 1, -1, -1):\n        left = ranges[i][0]\n        right = ranges[i][1]\n        if left <= index and right >= index:\n            if index == left:\n                index = right\n            else:\n                index = index - 1\n    return arr[index]"
    },
    {
        "original": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()",
        "rewrite": "import re\n\ndef start_withp(words):\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()"
    },
    {
        "original": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
        "rewrite": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [[0 for i in range(n)] for i in range(n)]\n    \n    for i in range(n):\n        if a[i] > a[0]:\n            dp[0][i] = a[i] + a[0]\n        else:\n            dp[0][i] = a[i]\n    \n    for i in range(1, n):\n        for j in range(n):\n            if a[j] > a[i] and j > i:\n                if dp[i - 1][i] + a[j] > dp[i - 1][j]:\n                    dp[i][j] = dp[i - 1][i] + a[j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[index][k]"
    },
    {
        "original": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
        "rewrite": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    tuplex_colon = deepcopy(tuplex)\n    tuplex_colon[m].append(n)\n    return tuplex_colon"
    },
    {
        "original": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result",
        "rewrite": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result"
    },
    {
        "original": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ",
        "rewrite": "def maximum(a, b):\n    return a if a >= b else b"
    },
    {
        "original": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
        "rewrite": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result"
    },
    {
        "original": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ",
        "rewrite": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1 \n        temp >>= 1\n    return (n | (1 << (pos)))"
    },
    {
        "original": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
        "rewrite": "import math\n\ndef volume_cone(r, h):\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "original": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ",
        "rewrite": "def pos_nos(list1): \n    positive_numbers = [num for num in list1 if num >= 0] \n    return positive_numbers"
    },
    {
        "original": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)",
        "rewrite": "def max_sum_rectangular_grid(grid, n):\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = excl_new\n    return max(excl, incl)"
    },
    {
        "original": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ",
        "rewrite": "def find_Max_Len_Even(str): \n    n = len(str)\n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while i < n: \n        if str[i] == ' ': \n            if currlen % 2 == 0: \n                if maxlen < currlen: \n                    maxlen = currlen \n                    st = i - currlen \n            currlen = 0 \n        else:\n            currlen += 1\n        i += 1\n    if currlen % 2 == 0: \n        if maxlen < currlen: \n            maxlen = currlen \n            st = i - currlen \n    if st == -1: \n        return \"-1\" \n    return str[st: st + maxlen]"
    },
    {
        "original": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ",
        "rewrite": "def find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result"
    },
    {
        "original": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
        "rewrite": "from itertools import groupby\n\ndef modified_encode(alist):\n    def ctr_ele(el):\n        if len(el) > 1:\n            return [len(el), el[0]]\n        else:\n            return el[0]\n    \n    return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "original": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
        "rewrite": "def max_volume(s):\n    maxvalue = 0\n    for i in range(1, s):\n        for j in range(1, s):\n            k = s - i - j\n            maxvalue = max(maxvalue, i * j * k)\n    return maxvalue"
    },
    {
        "original": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
        "rewrite": "import re\n\ndef find_long_word(text):\n    return re.findall(r\"\\b\\w{5}\\b\", text)"
    },
    {
        "original": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
        "rewrite": "def sum_difference(n):\n    sumofsquares = sum([num*num for num in range(1, n+1)])\n    squareofsum = sum(range(1, n+1)) ** 2\n    return squareofsum - sumofsquares"
    },
    {
        "original": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t",
        "rewrite": "def find_demlo(s):\n    l = len(s)\n    res = \"\"\n    for i in range(1, l + 1):\n        res += str(i)\n    for i in range(l - 1, 0, -1):\n        res += str(i)\n    return res"
    },
    {
        "original": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result",
        "rewrite": "def position_min(list1):\n    min_val = min(list1)\n    min_result = [index for index, value in enumerate(list1) if value == min_val]\n    return min_result"
    },
    {
        "original": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr",
        "rewrite": "def right_rotate(arr, n, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\ndef re_arrange(arr, n):\n    out_of_place = -1\n    for index in range(n):\n        if out_of_place >= 0:\n            if (arr[index] >= 0 and arr[out_of_place] < 0) or (arr[index] < 0 and arr[out_of_place] >= 0):\n                arr = right_rotate(arr, n, out_of_place, index)\n                if (index - out_of_place > 2):\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        if out_of_place == -1:\n            if (arr[index] >= 0 and index % 2 == 0) or (arr[index] < 0 and index % 2 == 1):\n                out_of_place = index\n    return arr"
    },
    {
        "original": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ",
        "rewrite": "def sum_of_alternates(test_tuple):\n    sum1 = 0\n    sum2 = 0\n    for idx, ele in enumerate(test_tuple):\n        if idx % 2:\n            sum1 += ele\n        else:\n            sum2 += ele\n    return sum1, sum2"
    },
    {
        "original": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;",
        "rewrite": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(1, n+1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + get_Min_Squares(n - temp))\n    return res"
    },
    {
        "original": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ",
        "rewrite": "from collections import defaultdict\n\ndef most_occurrences(test_list):\n    temp = defaultdict(int)\n    for sub in test_list:\n        for wrd in sub.split():\n            temp[wrd] += 1\n    res = max(temp, key=temp.get)\n    return str(res)"
    },
    {
        "original": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False",
        "rewrite": "def check_isosceles(x, y, z):\n    return x == y or y == z or z == x"
    },
    {
        "original": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
        "rewrite": "def rotate_left(list1, m, n):\n    result = list1[m:] + list1[:n]\n    return result"
    },
    {
        "original": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ",
        "rewrite": "def neg_count(list):\n    neg_count = 0\n    for num in list: \n        if num <= 0: \n            neg_count += 1\n    return neg_count"
    },
    {
        "original": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
        "rewrite": "import re\n\ndef find_char(text):\n    return re.findall(r\"\\b\\w{3,5}\\b\", text)"
    },
    {
        "original": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ",
        "rewrite": "def count_unset_bits(n):\r\n    count = 0\r\n    x = 1\r\n    while x < n + 1:\r\n        if (x & n) == 0:\r\n            count += 1\r\n        x = x << 1\r\n    return count"
    },
    {
        "original": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict",
        "rewrite": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        if n in dict:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict"
    },
    {
        "original": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ",
        "rewrite": "def sort_by_second_elem(sub_li): \n    sub_li.sort(key=lambda x: x[1]) \n    return sub_li"
    },
    {
        "original": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ",
        "rewrite": "def check_validity(a, b, c):\n    if (a + b <= c) or (a + c <= b) or (b + c <= a): \n        return False\n    else: \n        return True"
    },
    {
        "original": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
        "rewrite": "def ap_sum(a, n, d):\r\n    total = (n * (2 * a + (n - 1) * d)) / 2\r\n    return total"
    },
    {
        "original": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
        "rewrite": "def check_monthnum(monthname1):\n    return monthname1 == \"February\""
    },
    {
        "original": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "rewrite": "import re\n\ndef text_match_word(text):\n    patterns = r'\\w+\\S*$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    },
    {
        "original": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "rewrite": "def check_equality(s):\n    return ord(s[0]) == ord(s[-1])\n\ndef count_substring_with_equal_ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if check_equality(s[i:i+j]):\n                result += 1\n    return result"
    },
    {
        "original": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
        "rewrite": "def find_divisor(x, y):\n    if x == y:\n        return y\n    return 2"
    },
    {
        "original": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
        "rewrite": "def sum_three_smallest_nums(lst):\n    positive_numbers = [x for x in lst if x > 0]\n    sorted_positive_numbers = sorted(positive_numbers)\n    return sum(sorted_positive_numbers[:3])"
    },
    {
        "original": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)",
        "rewrite": "def set_to_tuple(s):\r\n    return tuple(sorted(s))"
    },
    {
        "original": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])",
        "rewrite": "from heapq import heappop, heappush\r\n\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n        \r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\n\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    \r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n        \r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        \r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n            \r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        \r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "original": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)",
        "rewrite": "def dig_let(s):\n    d = l = 0\n    for c in s:\n        if c.isdigit():\n            d += 1\n        elif c.isalpha():\n            l += 1\n        else:\n            pass\n    return (l, d)"
    },
    {
        "original": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ",
        "rewrite": "def count_Odd_Squares(n, m):\n    return int(m ** 0.5) - int((n - 1) ** 0.5)"
    },
    {
        "original": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
        "rewrite": "def diff_consecutive_nums(nums):\n    result = [b - a for a, b in zip(nums[:-1], nums[1:])]\n    return result"
    },
    {
        "original": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
        "rewrite": "def zigzag(n, k): \n\tif n == 0 and k == 0: \n\t\treturn 1\n\tif k == 0: \n\t\treturn 0\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "original": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6",
        "rewrite": "def count_squares(m, n):\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "original": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ",
        "rewrite": "def bin_coff(n, r):\r\n    val = 1\r\n    if r > (n - r):\r\n        r = n - r\r\n    for i in range(0, r):\r\n        val *= (n - i)\r\n        val //= (i + 1)\r\n    return val\r\n\r\ndef find_ways(M):\r\n    n = M // 2\r\n    a = bin_coff(2 * n, n)\r\n    b = a // (n + 1)\r\n    return b"
    },
    {
        "original": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ",
        "rewrite": "def check(string):\n    p = set(string)\n    s = {'0', '1'}\n    if s == p or p == {'0'} or p == {'1'}:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "original": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ",
        "rewrite": "def minimum_length(s): \n    max_occ = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n): \n        arr[ord(s[i]) - ord('a')] += 1\n    for i in range(26): \n        if arr[i] > max_occ: \n            max_occ = arr[i] \n    return n - max_occ"
    },
    {
        "original": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1",
        "rewrite": "def first_Element(arr, n, k):\n    count_map = {}\n    for i in range(n):\n        if arr[i] in count_map:\n            count_map[arr[i]] += 1\n        else:\n            count_map[arr[i]] = 1\n    for i in range(n):\n        if count_map[arr[i]] == k:\n            return arr[i]\n    return -1"
    },
    {
        "original": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;",
        "rewrite": "def unique_characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1, len(str)):\n            if str[i] == str[j]:\n                return False\n    return True"
    },
    {
        "original": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1",
        "rewrite": "def remove_column(list1, n):\n    for i in list1: \n        del i[n] \n    return list1"
    },
    {
        "original": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn",
        "rewrite": "def tn_ap(a, n, d):\r\n    tn = a + (n - 1) * d\r\n    return tn"
    },
    {
        "original": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ",
        "rewrite": "def count_rectangles(radius):\r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameter_square = diameter ** 2 \r\n    for a in range(1, 2 * radius): \r\n        for b in range(1, 2 * radius): \r\n            diagonal_length_square = a ** 2 + b ** 2  \r\n            if diagonal_length_square <= diameter_square:\r\n                rectangles += 1\r\n    return rectangles"
    },
    {
        "original": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n",
        "rewrite": "def find_angle(a, b):\n    c = 180 - (a + b)\n    return c"
    },
    {
        "original": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ",
        "rewrite": "def find_max(test_list):\n    res = max(int(j) for i in test_list for j in i)\n    return res"
    },
    {
        "original": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)",
        "rewrite": "def moddiv_list(nums1, nums2):\n    result = map(lambda x, y: x % y, nums1, nums2)\n    return list(result)"
    },
    {
        "original": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
        "rewrite": "def Check_Solution(a, b, c):\n    if 2 * b * b == 9 * a * c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "original": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2",
        "rewrite": "def get_carol(n):\n    result = (2 ** n) - 1\n    return result ** 2 - 2"
    },
    {
        "original": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty",
        "rewrite": "def remove_empty(list1):\n    non_empty = [x for x in list1 if x]\n    return non_empty"
    },
    {
        "original": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
        "rewrite": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result"
    },
    {
        "original": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ",
        "rewrite": "def add_K_element(test_list, K):\n    res = [tuple(j + K for j in sub) for sub in test_list]\n    return res"
    },
    {
        "original": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
        "rewrite": "def make_flip(ch):\r\n    return '1' if (ch == '0') else '0'\r\n\r\ndef get_flip_with_starting_character(string, expected):\r\n    flip_count = 0\r\n    for i in range(len(string)):\r\n        if string[i] != expected:\r\n            flip_count += 1\r\n        expected = make_flip(expected)\r\n    return flip_count\r\n\r\ndef min_flip_to_make_string_alternate(string):\r\n    return min(get_flip_with_starting_character(string, '0'), get_flip_with_starting_character(string, '1'))"
    },
    {
        "original": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count",
        "rewrite": "def count_digit(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count"
    },
    {
        "original": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
        "rewrite": "def adjacent_num_product(list_nums):\n    return max(a * b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "original": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
        "rewrite": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef calculate_height(root):\n    if root is None:\n        return 0\n    return max(calculate_height(root.left), calculate_height(root.right)) + 1\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    left_height = calculate_height(root.left)\n    right_height = calculate_height(root.right)\n    if abs(left_height - right_height) <= 1 and is_tree_balanced(root.left) is True and is_tree_balanced(root.right) is True:\n        return True\n    return False"
    },
    {
        "original": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ",
        "rewrite": "def repeat_tuples(test_tup, N):\r\n    res = tuple([test_tup]*N)\r\n    return res"
    },
    {
        "original": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA",
        "rewrite": "def lateralsurface_cuboid(l, w, h):\n    LSA = 2 * h * (l + w)\n    return LSA"
    },
    {
        "original": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort",
        "rewrite": "def float_sort(prices):\n    return sorted(prices, key=lambda x: float(x[1]), reverse=True)"
    },
    {
        "original": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)",
        "rewrite": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "original": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result",
        "rewrite": "import heapq as hq\ndef heap_ascending(nums):\n  hq.heapify(nums)\n  sorted_result = [hq.heappop(nums) for i in range(len(nums))]\n  return sorted_result"
    },
    {
        "original": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume",
        "rewrite": "def volume_cuboid(l, w, h):\n    volume = l * w * h\n    return volume"
    },
    {
        "original": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list",
        "rewrite": "def permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:])\n    next_list = []\n    for i in range(0, len(prev_list)):\n        for j in range(0, len(str)):\n            new_str = prev_list[i][:j] + str[0] + prev_list[i][j:]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list"
    },
    {
        "original": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
        "rewrite": "def round_num(n, m):\n    a = (n // m) * m\n    b = a + m\n    return b if n - a > b - n else a"
    },
    {
        "original": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)",
        "rewrite": "def remove_replica(test_tup):\n    temp = set()\n    res = tuple(ele if ele not in temp and not temp.add(ele) else 'MSP' for ele in test_tup)\n    return res"
    },
    {
        "original": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ",
        "rewrite": "def remove_Char(s, c):\n    counts = s.count(c)\n    s = list(s)\n    while counts:\n        s.remove(c)\n        counts -= 1\n    s = ''.join(s)\n    return s"
    },
    {
        "original": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list",
        "rewrite": "def move_first(test_list):\n    test_list = test_list[-1:] + test_list[:-1]  \n    return test_list"
    },
    {
        "original": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA",
        "rewrite": "def surface_area_cuboid(length, width, height):\n    surface_area = 2 * (length * width + length * height + width * height)\n    return surface_area"
    },
    {
        "original": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n",
        "rewrite": "def multi_list(rownum, colnum):\n    multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n    \n    for row in range(rownum):\n        for col in range(colnum):\n            multi_list[row][col] = row * col\n            \n    return multi_list"
    },
    {
        "original": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
        "rewrite": "from operator import itemgetter\n\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result"
    },
    {
        "original": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1",
        "rewrite": "def find_rotation_count(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1"
    },
    {
        "original": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "rewrite": "def even_bit_toggle_number(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res"
    },
    {
        "original": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "rewrite": "def frequency_of_smallest(n, arr):\n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] < mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq"
    },
    {
        "original": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)",
        "rewrite": "def get_perrin(n):\r\n    if n == 0:\r\n        return 3\r\n    if n == 1:\r\n        return 0\r\n    if n == 2:\r\n        return 2 \r\n    \r\n    return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "original": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap",
        "rewrite": "def swap_count(s):\n    chars = s\n    count_left = 0\n    count_right = 0\n    swap = 0\n    imbalance = 0\n    for i in range(len(chars)):\n        if chars[i] == '[':\n            count_left += 1\n            if imbalance > 0:\n                swap += imbalance\n                imbalance -= 1\n        elif chars[i] == ']':\n            count_right += 1\n            imbalance = (count_right - count_left) \n    return swap"
    },
    {
        "original": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ",
        "rewrite": "def even_or_odd(N):\n    l = len(N)\n    if N[l-1] in ['0', '2', '4', '6', '8', 'A', 'C', 'E']:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "original": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ",
        "rewrite": "def highest_power_of_2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if ((i & (i - 1)) == 0):\n            res = i\n            break\n    return res"
    },
    {
        "original": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "rewrite": "def find_lucas(n):\n\tif n == 0:\n\t\treturn 2\n\tif n == 1:\n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2)"
    },
    {
        "original": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string",
        "rewrite": "def add_string(list, string):\r\n    add_string = [string.format(i) for i in list]\r\n    return add_string"
    },
    {
        "original": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result",
        "rewrite": "def convert_list_dictionary(l1, l2, l3):\n    result = [{x: {y: z}} for x, y, z in zip(l1, l2, l3)]\n    return result"
    },
    {
        "original": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]",
        "rewrite": "def get_max_sum(n):\n    res = [0, 1]\n    i = 2\n    while i < n + 1:\n        res.append(max(i, (res[int(i / 2)] \n                    + res[int(i / 3)] +\n                    res[int(i / 4)]\n                    + res[int(i / 5)])))\n        i += 1\n    return res[n]"
    },
    {
        "original": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
        "rewrite": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list)   \n    max_list = max(input_list, key=lambda i: len(i))    \n    return max_length, max_list"
    },
    {
        "original": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ",
        "rewrite": "def check_distinct(test_tup):\n    res = True\n    temp = set()\n    for ele in test_tup:\n        if ele in temp:\n            res = False\n            break\n        temp.add(ele)\n    return res"
    },
    {
        "original": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None",
        "rewrite": "def first_non_repeating_character(str1):\n    char_order = []\n    ctr = {}\n    for c in str1:\n        if c in ctr:\n            ctr[c] += 1\n        else:\n            ctr[c] = 1 \n            char_order.append(c)\n    for c in char_order:\n        if ctr[c] == 1:\n            return c\n    return None"
    },
    {
        "original": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ",
        "rewrite": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    if(re.search(regex, string)): \n        return \"Valid\" \n    else: \n        return \"Invalid\""
    },
    {
        "original": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
        "rewrite": "def median_numbers(a, b, c):\n    if a > b:\n        if a < c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    else:\n        if a > c:\n            median = a\n        elif b < c:\n            median = b\n        else:\n            median = c\n    return median"
    },
    {
        "original": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "rewrite": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "original": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "rewrite": "def bitwise_xor(test_tup1, test_tup2):\n    res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res"
    },
    {
        "original": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)",
        "rewrite": "def extract_freq(test_list):\n    res = len(set(tuple(sorted(sub)) for sub in test_list))\n    return res"
    },
    {
        "original": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "rewrite": "def add_nested_tuples(test_tup1, test_tup2):\n    res = tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res"
    },
    {
        "original": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ",
        "rewrite": "def ncr_modp(n, r, p):\n    C = [0 for i in range(r+1)]\n    C[0] = 1\n    for i in range(1, n+1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j-1]) % p\n    return C[r]"
    },
    {
        "original": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False",
        "rewrite": "import re\n\ndef is_valid_URL(str):\n    regex = r\"((http|https)://)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)\"\n    p = re.compile(regex)\n    \n    if (str is None):\n        return False\n    if(re.search(p, str)):\n        return True\n    else:\n        return False"
    },
    {
        "original": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ",
        "rewrite": "def minimum(a, b):\n   return a if a <= b else b"
    },
    {
        "original": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False",
        "rewrite": "def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex"
    },
    {
        "original": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ",
        "rewrite": "def find_Parity(x):\n    y = x ^ (x >> 1)\n    y = y ^ (y >> 2)\n    y = y ^ (y >> 4)\n    y = y ^ (y >> 8)\n    y = y ^ (y >> 16)\n    if y & 1:\n        return \"Odd Parity\"\n    return \"Even Parity\""
    },
    {
        "original": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
        "rewrite": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False"
    },
    {
        "original": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
        "rewrite": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = []\n    \n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n    \n    push(0, 0)\n    pairs = []\n    \n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        \n        if j == 0:\n            push(i + 1, 0)\n    \n    return pairs"
    },
    {
        "original": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min",
        "rewrite": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1])\n    return result_min"
    },
    {
        "original": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val",
        "rewrite": "def min_val(listval):\n    min_val = min(i for i in listval if isinstance(i, int))\n    return min_val"
    },
    {
        "original": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "rewrite": "import re\n\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "original": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
        "rewrite": "def remove_odd(l):\n    return [i for i in l if i % 2 == 0]"
    },
    {
        "original": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result",
        "rewrite": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result"
    },
    {
        "original": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0",
        "rewrite": "def overlapping(list1, list2):\n    c = len(list1)\n    d = len(list2)\n    \n    for i in range(c):\n        for j in range(d):\n            if list1[i] == list2[j]:\n                return 1\n    \n    return 0"
    },
    {
        "original": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ",
        "rewrite": "def max_product(arr): \n    arr_len = len(arr) \n    if arr_len < 2: \n        return \"No pairs exist\"           \n    x = arr[0]\n    y = arr[1]      \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            if arr[i] * arr[j] > x * y: \n                x = arr[i]\n                y = arr[j] \n    return x, y"
    },
    {
        "original": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
        "rewrite": "MAX = 1000000\ndef breakSum(n): \n    dp = [0]*(n+1) \n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1): \n        dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i)\n    return dp[n]"
    },
    {
        "original": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ",
        "rewrite": "def group_tuples(Input):\n    out = {}\n    for elem in Input:\n        try:\n            out[elem[0]].extend(elem[1:])\n        except KeyError:\n            out[elem[0]] = list(elem)\n    return [tuple(values) for values in out.values()]"
    },
    {
        "original": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList",
        "rewrite": "def find_max(lst):\n    max_list = max((x) for x in lst)\n    return max_list"
    },
    {
        "original": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
        "rewrite": "def round_and_sum(list1):\n    length = len(list1)\n    rounded_list = list(map(round, list1))\n    rounded_sum = sum(rounded_list) * length\n    return rounded_sum"
    },
    {
        "original": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
        "rewrite": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += (2*i) ** 3\n    return total"
    },
    {
        "original": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ",
        "rewrite": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[:-1]\n    return str(res)"
    },
    {
        "original": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ",
        "rewrite": "def find_average_of_cube(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i**3\n    return round(total / n, 6)"
    },
    {
        "original": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ",
        "rewrite": "def get_maxgold(gold, m, n):\n    goldTable = [[0 for i in range(n)] for j in range(m)]\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = goldTable[row][col+1]\n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = goldTable[row-1][col+1]\n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = goldTable[row+1][col+1]\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)\n    res = goldTable[0][0]\n    for i in range(1, m):\n        res = max(res, goldTable[i][0])\n    return res"
    },
    {
        "original": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ",
        "rewrite": "def extract_rear(test_tuple):\r\n    res = [sub[len(sub) - 1] for sub in test_tuple]\r\n    return res"
    },
    {
        "original": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
        "rewrite": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x == list1[i]: \n            ctr+= 1          \n    return ctr"
    },
    {
        "original": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums",
        "rewrite": "def filter_oddnumbers(nums):\n    odd_nums = list(filter(lambda x: x % 2 != 0, nums))\n    return odd_nums"
    },
    {
        "original": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "rewrite": "import re\n\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "original": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
        "rewrite": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list"
    },
    {
        "original": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "rewrite": "def and_tuples(test_tup1, test_tup2):\n    res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res"
    },
    {
        "original": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
        "rewrite": "def parabola_directrix(a, b, c):\n    directrix = int(c - ((b ** 2) + 1) * 4 * a)\n    return directrix"
    },
    {
        "original": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
        "rewrite": "def common_element(list1, list2):\r\n    for x in list1:\r\n        for y in list2:\r\n            if x == y:\r\n                return True\r\n    return False"
    },
    {
        "original": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median",
        "rewrite": "def median_trapezium(base1, base2, height):\n    median = 0.5 * (base1 + base2)\n    return median"
    },
    {
        "original": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')",
        "rewrite": "def check_greater(arr, number):\n    arr.sort()\n    if number > arr[-1]:\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'"
    },
    {
        "original": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n",
        "rewrite": "import re\n\ndef text_match_one(text):\n    patterns = 'ab+?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    },
    {
        "original": "def last_Digit(n) :\r\n    return (n % 10) ",
        "rewrite": "def last_digit(n):\n    return n % 10"
    },
    {
        "original": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ",
        "rewrite": "def neg_nos(list1):\r\n    return [num for num in list1 if num < 0]"
    },
    {
        "original": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "rewrite": "def remove_odd(str1):\n    str2 = ''\n    for i in range(len(str1)):\n        if (i % 2 != 0):\n            str2 += str1[i]\n    return str2"
    },
    {
        "original": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ",
        "rewrite": "def count_bidirectional(test_list):\n    res = 0\n    for idx in range(len(test_list)):\n        for iidx in range(idx + 1, len(test_list)):\n            if test_list[iidx][0] == test_list[idx][1] and test_list[idx][0] == test_list[iidx][1]:\n                res += 1\n    return str(res)"
    },
    {
        "original": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x",
        "rewrite": "def multiple_to_single(L):\r\n    x = int(\"\".join(map(str, L)))\r\n    return x"
    },
    {
        "original": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))",
        "rewrite": "import re\n\ndef find_adverb_position(text):\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))"
    },
    {
        "original": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea",
        "rewrite": "def surface_area_cube(l):\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "original": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "rewrite": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n    return round(n1/n,2)"
    },
    {
        "original": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
        "rewrite": "def largest_neg(list1):\n    max_neg = float('inf')\n    for x in list1:\n        if x < 0 and x < max_neg:\n            max_neg = x\n    return max_neg"
    },
    {
        "original": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ",
        "rewrite": "def trim_tuple(test_list, K): \n  res = [] \n  for ele in test_list: \n    N = len(ele) \n    res.append(tuple(list(ele)[K: N - K])) \n  return tuple(res)"
    },
    {
        "original": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "rewrite": "def index_multiplication(test_tup1, test_tup2):\r\n    res = tuple(tuple(a * b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\r\n    return res"
    },
    {
        "original": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ",
        "rewrite": "from collections import Counter\ndef count_Occurrence(tup, lst):\n    count = 0\n    for item in tup:\n        if item in lst:\n            count += 1\n    return count"
    },
    {
        "original": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums",
        "rewrite": "def cube_nums(nums):\n    cube_nums = list(map(lambda x: x ** 3, nums))\n    return cube_nums"
    },
    {
        "original": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
        "rewrite": "def cal_sum(n): \n    a = 3\n    b = 0\n    c = 2\n    if (n == 0) or (n == 1): \n        return 3\n    if (n == 2): \n        return 5\n    sum = 5\n    while (n > 2): \n        d = a + b \n        sum = sum + d \n        a = b \n        b = c \n        c = d \n        n = n - 1 \n    return sum"
    },
    {
        "original": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ",
        "rewrite": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    if a == 0:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "original": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result",
        "rewrite": "def extract_string(s, l):\n    result = [e for e in s if len(e) == l]\n    return result"
    },
    {
        "original": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))",
        "rewrite": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "original": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None",
        "rewrite": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        amount = sale_amount - actual_cost\n        return amount\n    else:\n        return None"
    },
    {
        "original": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ",
        "rewrite": "import math\n\ndef sum_of_factors(n):\n    if n % 2 != 0:\n        return 0\n    \n    res = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        \n        while n % i == 0:\n            count += 1\n            n //= i \n            \n            if i == 2 and count == 1:\n                curr_sum = 0\n                \n            curr_term *= i\n            curr_sum += curr_term \n        \n        res *= curr_sum\n    \n    if n >= 2:\n        res *= (1 + n)\n    \n    return res"
    },
    {
        "original": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "rewrite": "import re\n\ndef text_match_wordz(text):\n    patterns = '\\w*z.\\w*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    },
    {
        "original": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False",
        "rewrite": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "original": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result",
        "rewrite": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result"
    },
    {
        "original": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList",
        "rewrite": "def find_min(lst):\n    min_list = min(lst)\n    return min_list"
    },
    {
        "original": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area",
        "rewrite": "def rectangle_area(l, b):\n     return l * b"
    },
    {
        "original": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)",
        "rewrite": "import re\n\ndef remove_uppercase(str1):\n    remove_upper = lambda text: re.sub('[A-Z]', '', text)\n    result = remove_upper(str1)\n    return result"
    },
    {
        "original": "def Extract(lst): \r\n    return [item[0] for item in lst] ",
        "rewrite": "def Extract(lst):\n    return [item[0] for item in lst]"
    },
    {
        "original": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr",
        "rewrite": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            upper_ctr += 1\n    return upper_ctr"
    },
    {
        "original": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
        "rewrite": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el + [list1[0]]]\n    return result"
    },
    {
        "original": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
        "rewrite": "def max_subarray_product(arr):\n    n = len(arr)\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 0\n    flag = 0\n    for i in range(0, n):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n            flag = 1\n        elif arr[i] == 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        else:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if flag == 0 and max_so_far == 0:\n        return 0\n    return max_so_far"
    },
    {
        "original": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result",
        "rewrite": "def check_value(dictionary, n):\n    result = all(value == n for value in dictionary.values()) \n    return result"
    },
    {
        "original": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1",
        "rewrite": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "original": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ",
        "rewrite": "def find_peak_util(arr, low, high, n): \r\n    mid = low + (high - low)//2\r\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n        (mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n        return mid \r\n    elif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n        return find_peak_util(arr, low, mid - 1, n) \r\n    else: \r\n        return find_peak_util(arr, mid + 1, high, n) \r\n\r\ndef find_peak(arr, n): \r\n    return find_peak_util(arr, 0, n - 1, n)"
    },
    {
        "original": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
        "rewrite": "def decimal_to_octal(deciNum):\n    octalNum = 0\n    countval = 1\n    while deciNum != 0:\n        remainder = deciNum % 8\n        octalNum += remainder * countval\n        countval = countval * 10\n        deciNum //= 8\n    return octalNum"
    },
    {
        "original": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
        "rewrite": "def max_product(arr, n): \n    mpis = [0] * n \n    for i in range(n): \n        mpis[i] = arr[i] \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and mpis[i] < (mpis[j] * arr[i]): \n                mpis[i] = mpis[j] * arr[i] \n    return max(mpis)"
    },
    {
        "original": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
        "rewrite": "def max_profit(price, k):\n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n    return final_profit[k][n-1]"
    },
    {
        "original": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "rewrite": "def add_pairwise(test_tup):\r\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n    return res"
    },
    {
        "original": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ",
        "rewrite": "def find_remainder(arr, lens, n):\r\n    mul = 1\r\n    for i in range(lens):\r\n        mul = (mul * (arr[i] % n)) % n\r\n    return mul % n"
    },
    {
        "original": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "rewrite": "def check_consecutive(l):\n    return sorted(l) == list(range(min(l), max(l) + 1))"
    },
    {
        "original": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)",
        "rewrite": "def tuple_intersection(test_list1, test_list2):\n    res = set([tuple(sorted(ele)) for ele in test_list1]).intersection(set([tuple(sorted(ele)) for ele in test_list2]))\n    return res"
    },
    {
        "original": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2",
        "rewrite": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)"
    },
    {
        "original": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
        "rewrite": "from collections import Counter\ndef sort_counter(dict1):\n    x = Counter(dict1)\n    sort_counter = x.most_common()\n    return sort_counter"
    },
    {
        "original": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum",
        "rewrite": "def big_sum(nums):\n    total_sum = max(nums) + min(nums)\n    return total_sum"
    },
    {
        "original": "def is_lower(string):\r\n  return (string.lower())",
        "rewrite": "def is_lower(string):\n    return string.islower()"
    },
    {
        "original": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
        "rewrite": "import re\n\ndef remove_lowercase(str1):\n    remove_lower = lambda text: re.sub('[a-z]', '', text)\n    result = remove_lower(str1)\n    return result"
    },
    {
        "original": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ",
        "rewrite": "def first_digit(n):\n    while n >= 10:\n        n = n // 10\n    return int(n)"
    },
    {
        "original": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
        "rewrite": "def get_max_occuring_char(str1):\n    ASCII_SIZE = 256\n    ctr = [0] * ASCII_SIZE\n    max_count = -1\n    most_occuring_char = ''\n    for i in str1:\n        ctr[ord(i)] += 1\n    for i in str1:\n        if max_count < ctr[ord(i)]:\n            max_count = ctr[ord(i)]\n            most_occuring_char = i\n    return most_occuring_char"
    },
    {
        "original": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
        "rewrite": "def is_subset_sum(set, n, sum):\n\tif sum == 0:\n\t\treturn True\n\tif n == 0:\n\t\treturn False\n\tif set[n - 1] > sum:\n\t\treturn is_subset_sum(set, n - 1, sum)\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "original": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ",
        "rewrite": "import re\n\ndef match(text):\n    pattern = '[A-Z]+[a-z]+$'\n    if re.search(pattern, text):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "original": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ",
        "rewrite": "def first_Factorial_Divisible_Number(x): \n    i = 1\n    fact = 1\n    for i in range(1, x): \n        fact *= i \n        if fact % x == 0: \n            break\n    return i"
    },
    {
        "original": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ",
        "rewrite": "def remove_matching_tuple(test_list1, test_list2):\n    res = [sub for sub in test_list1 if sub not in test_list2]\n    return res"
    },
    {
        "original": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
        "rewrite": "def is_palindrome(n):\n    divisor = 1\n    while n // divisor >= 10:\n        divisor *= 10\n    while n != 0:\n        leading = n // divisor\n        trailing = n % 10\n        if leading != trailing:\n            return False\n        n = (n % divisor) // 10\n        divisor = divisor // 100\n    return True\n\ndef largest_palindrome(A, n):\n    A.sort()\n    for i in range(n - 1, -1, -1):\n        if is_palindrome(A[i]):\n            return A[i]\n    return -1"
    },
    {
        "original": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
        "rewrite": "def nCr(n, r): \n    if (r > n / 2): \n        r = n - r \n    answer = 1 \n    for i in range(1, r + 1): \n        answer *= (n - r + i) \n        answer //= i \n    return answer \n\ndef binomial_probability(n, k, p): \n    return nCr(n, k) * pow(p, k) * pow(1 - p, n - k)"
    },
    {
        "original": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup",
        "rewrite": "def sort_tuple(tup):\n    lst = len(tup)\n    for i in range(0, lst):\n        for j in range(0, lst-i-1):\n            if (tup[j][-1] > tup[j + 1][-1]):\n                temp = tup[j]\n                tup[j] = tup[j + 1]\n                tup[j + 1] = temp\n    return tup"
    },
    {
        "original": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area",
        "rewrite": "import math\n\ndef area_pentagon(a):\n    area = (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * pow(a, 2)) / 4.0\n    return area"
    },
    {
        "original": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "rewrite": "def frequency_Of_Largest(n, arr):\n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] > mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq"
    },
    {
        "original": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ",
        "rewrite": "def extract_symmetric(test_list):\r\n    temp = set(test_list) & {(b, a) for a, b in test_list}\r\n    res = {(a, b) for a, b in temp if a < b}\r\n    return res"
    },
    {
        "original": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total",
        "rewrite": "import math\n\ndef sum_gp(a, n, r):\n    total = (a * (1 - math.pow(r, n))) / (1 - r)\n    return total"
    },
    {
        "original": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
        "rewrite": "def binary_search(item_list, item):\n    first = 0\n    last = len(item_list) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found"
    },
    {
        "original": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons",
        "rewrite": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl\n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [\n                (p1x, p1y),\n                (p2x, p2y),\n                (p3x, p3y),\n                (p4x, p4y),\n                (p5x, p5y),\n                (p6x, p6y),\n                (p1x, p1y)]\n            polygons.append(poly)\n            counter += 1\n            startx += w\n        starty += yoffset\n        row += 1\n    return polygons"
    },
    {
        "original": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ",
        "rewrite": "def binary_to_integer(test_tup):\r\n    res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n    return str(res)"
    },
    {
        "original": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)",
        "rewrite": "import re\n\ndef remove_lowercase(str1):\n    remove_lower = lambda text: re.sub('[a-z]', '', text)\n    result = remove_lower(str1)\n    return result"
    },
    {
        "original": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums",
        "rewrite": "import heapq as hq\ndef heap_queue_smallest(nums, n):\n    smallest_nums = hq.nsmallest(n, nums)\n    return smallest_nums"
    },
    {
        "original": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA",
        "rewrite": "import math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    SA = math.pi * r * (r + l)\n    return SA"
    },
    {
        "original": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd",
        "rewrite": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(min(x, y), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break\n    return gcd"
    },
    {
        "original": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter",
        "rewrite": "def diameter_circle(r):\n    return 2*r"
    },
    {
        "original": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ",
        "rewrite": "def concatenate_elements(list):\n    ans = ''\n    for i in list:\n        ans = ans + ' ' + i\n    return ans"
    }
]