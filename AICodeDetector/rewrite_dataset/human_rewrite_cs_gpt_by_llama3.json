[
    {
        "original": "def get_simple_split(branchfile):\n    \"\"\"Splits the branchfile argument and assuming branch is\n       the first path component in branchfile, will return\n       branch and file else None.\"\"\"\n\n    index = branchfile.find('/')\n    if index == -1:\n        return None, None\n    branch, file = branchfile.split('/', 1)\n    return branch, file",
        "rewrite": "def get_simple_split(branchfile): \"\"\"Splits the branchfile argument and assuming branch is the first path component in branchfile, will return branch and file else None.\"\"\" return branchfile.split('/', 1) if '/' in branchfile else (None, None)"
    },
    {
        "original": "def migrate_non_shared(vm_, target, ssh=False):\n    \"\"\"\n    Attempt to execute non-shared storage \"all\" migration\n\n    :param vm_: domain name\n    :param target: target libvirt host name\n    :param ssh: True to connect over ssh\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' virt.migrate_non_shared <vm name> <target hypervisor>\n\n    A tunnel data migration can be performed by setting this in the\n    configuration:\n\n    .. code-block:: yaml\n\n        virt:\n            tunnel: True\n\n    For more details on tunnelled data migrations, report to\n    https://libvirt.org/migration.html#transporttunnel\n    \"\"\"\n    cmd = _get_migrate_command() + ' --copy-storage-all ' + vm_\\\n        + _get_target(target, ssh)\n\n    stdout = subprocess.Popen(cmd,\n                              shell=True,\n                              stdout=subprocess.PIPE).communicate()[0]\n    return salt.utils.stringutils.to_str(stdout)",
        "rewrite": "def migrate_non_shared(vm_, target, ssh=False): \"\"\" Attempt to execute non-shared storage \"all\" migration :param vm_: domain name :param target: target libvirt host name :param ssh: True to connect over ssh CLI Example: .. code-block:: bash salt '*' virt.migrate_non_shared <vm name> <target hypervisor> A tunnel data migration can be performed by setting this in the configuration: .. code-block:: yaml virt: tunnel: True For more details on tunnelled data migrations, report to https://libvirt.org/migration.html#transporttunnel \"\"\" cmd = f\"{_get_migrate_command()} --copy-storage-all {vm_} {_get_target(target, ssh)}\" process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE) stdout, _ = process.communicate() return salt.utils.stringutils.to_str(stdout)"
    },
    {
        "original": "def auth_user_oid(self, email):\n        \"\"\"\n            OpenID user Authentication\n\n            :param email: user's email to authenticate\n            :type self: User model\n        \"\"\"\n        user = self.find_user(email=email)\n        if user is None or (not user.is_active):\n            log.info(LOGMSG_WAR_SEC_LOGIN_FAILED.format(email))\n            return None\n        else:\n            self.update_user_auth_stat(user)\n            return user",
        "rewrite": "def auth_user_oid(self, email): \"\"\" OpenID user Authentication :param email: user's email to authenticate :type self: User model \"\"\" user = self.find_user(email=email) if user is None or not user.is_active: log.info(LOGMSG_WAR_SEC_LOGIN_FAILED.format(email)) return None self.update_user_auth_stat(user) return user"
    }
]
