[
    {
        "original": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
        "sampled": "'''\n        #"
    },
    {
        "original": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "sampled": "\"\"\"\n        if not numbers:\n            return []\n        heap = []\n        for num in numbers:\n            heapq.heappush(heap, num)\n        largest = heapq.nlargest(k, heap)\n        return largest"
    },
    {
        "original": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] ",
        "sampled": "\"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 8\n        if n == 5:\n            return 16\n        if n == 6:\n            return 32\n        if n == 7:\n            return 64\n        if n == 8:\n            return 128\n        if n == 9:\n            return 256\n        if n == 10:\n            return 512\n        if n == 11"
    },
    {
        "original": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
        "sampled": "'''\n        #"
    },
    {
        "original": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums",
        "sampled": "'''\n        #"
    },
    {
        "original": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest",
        "sampled": "\"\"\"\n        if len(nums) < k:\n            return []\n        else:\n            return nums[:k]\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
        "sampled": "\"\"\"\n        matrix = [[row[i] for row in matrix] for i in range(len(matrix[0]))]\n        return matrix\nif __name__ == '__main__':\n    import os\n    import pytest\n    pytest.main([os.path.join('tests', 'test_097.py')])"
    },
    {
        "original": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
        "sampled": "\"\"\"\n        words = set(words)\n        counts = {}\n        for word in words:\n            counts[word] = words.count(word)\n        return sorted(counts.items(), key=lambda x: x[1], reverse=True)\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
        "original": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
        "sampled": "\"\"\"\n        return [s[i:i+len(s[i])] for i in range(len(s))]\n    def split_upperstring(s):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to split a string at uppercase letters. \n            Your code should pass these tests:\n            assert split_upperstring(\"AbCd\")==['A', 'b', 'C', 'd']\nassert split_upperstring(\"Python\")==['P', 'y', 't', 'h',"
    },
    {
        "original": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
        "sampled": "\"\"\"\n        return 2*(side**2)\n    def square_area(self, side):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the area of a square. \n            Your code should pass these tests:\n            assert square_area(10)==100\nassert square_area(5)==25\nassert square_area(4)==16\n        \"\"\"\n        return side**2\n    def triangle_perimeter(self, side1, side2, side3):\n        \"\"\""
    },
    {
        "original": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
        "sampled": "'''\n        #"
    },
    {
        "original": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
        "sampled": "'''\n        #"
    },
    {
        "original": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
        "sampled": "\"\"\"\n        if not isinstance(lists, list):\n            raise TypeError(\"The input must be a list\")\n        if not all(isinstance(list_, list) for list_ in lists):\n            raise TypeError(\"The input must be a list of lists\")\n        if not all(len(list_) == len(list_[0]) for list_ in lists):\n            raise ValueError(\"All lists must be of the same length\")\n        max_sum = 0\n        for list_ in lists:\n            for i in"
    },
    {
        "original": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
        "sampled": "'''\n        binary = int(binary, 2)\n        return binary\n    def decimal_to_binary(self, decimal):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to convert the given decimal number to its binary equivalent. \n            Your code should pass these tests:\n            assert decimal_to_binary(4) == 100\nassert decimal_to_binary(11) == 1011\nassert decimal_to_binary(109) == 1101101\n        '''\n        decimal = int(dec"
    },
    {
        "original": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
        "sampled": "\"\"\"\n        if len(tuple_list) < k:\n            return False\n        else:\n            return True\n    def check_k_elements(tuple_list, k):\n        \"\"\"\n            Your code should pass these tests:\n            assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n            assert check_k_elements([(7, 7, 7), (7, 7)], 7"
    },
    {
        "original": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
        "sampled": "'''\n        #"
    },
    {
        "original": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
        "sampled": "\"\"\"\n        occurrence = 0\n        for i in range(len(array)):\n            if array[i] % 2!= 0:\n                occurrence += 1\n        return occurrence"
    },
    {
        "original": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "sampled": "'''"
    },
    {
        "original": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
        "sampled": " 12]\n            \"\"\""
    },
    {
        "original": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
        "sampled": "\"\"\"\n        self.assertEqual(decimal_To_Binary(10), 1010)\n        self.assertEqual(decimal_To_Binary(1), 1)\n        self.assertEqual(decimal_To_Binary(20), 10100)\n    def test_decimal_To_Octal(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a python function to convert a decimal number to octal number. \n            Your code should pass these tests:\n            assert decimal_To"
    },
    {
        "original": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_rect_num(n):\r\n  return n*(n + 1) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
        "sampled": "\"\"\"\n        if not isinstance(list_of_mixed_list, list):\n            raise TypeError(\"The list_of_mixed_list must be a list\")\n        if not isinstance(list_of_mixed_list[0], (int, float)):\n            raise TypeError(\"The list_of_mixed_list must contain only numbers\")\n        if not isinstance(list_of_mixed_list[0], str):\n            raise TypeError(\"The list_of_mixed_list must contain only strings\")\n        if not is"
    },
    {
        "original": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
        "sampled": "'''\n        even_odd = []\n        for i in range(len(list_of_numbers)):\n            if i % 2 == 0:\n                even_odd.append(list_of_numbers[i])\n            else:\n                even_odd.append(list_of_numbers[i])\n        return even_odd\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
        "original": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
        "sampled": " 1, 30: 1, 100: 1, 110: 1, 30: 1, 80: 1, 90: 1, 15: 1, 20: 1, 40: 1})"
    },
    {
        "original": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
        "sampled": "'''\n        return list(filter(lambda x: x % 2 == 0, numbers))\nif __name__ == '__main__':\n    import sys\n    import pytest\n    pytest.main(sys.argv)"
    },
    {
        "original": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
        "sampled": "\"\"\"\n        if not arr:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        return arr[0] + find_Sum(arr[1:], arr[0])\nif __name__ == \"__main__\":\n    import os\n    import pytest\n    pytest.main([os.path.join(\"tests\", \"test_find_Sum.py\")])"
    },
    {
        "original": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
        "sampled": "\"\"\"\n        return not all(x!= y for x, y in zip(nums1, nums2))\ndef test_distinct_2():\n    \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a python function to determine whether all the numbers are different from each other are not. \n            Your code should pass these tests:\n            assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct"
    },
    {
        "original": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
        "sampled": "'''\n        #"
    },
    {
        "original": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
        "sampled": "\"\"\"\n        min_length_list = lambda list_: min(len(list_), key=lambda x: len(x))\n        return min_length_list(list_)\nif __name__ == '__main__':\n    import sys\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        list_ = list(map(int, input().split()))\n        result = Solution().min_length_list(list_)\n        print(result)"
    },
    {
        "original": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
        "sampled": "\"\"\"\n        assert triangle_checker(6,8,12) == False\n        assert triangle_checker(6,6,12) == False\n        assert triangle_checker(6,6,6) == True\n    def test_triangle_checker_2(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to print check if the triangle is equilateral or not. \n            Your code should pass these tests:\n            assert check_equilateral(6,8,12)==False "
    },
    {
        "original": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
        "sampled": "'''\n        #"
    },
    {
        "original": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list",
        "sampled": "'''\n        #"
    },
    {
        "original": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
        "sampled": "'''\n        assert tn_gp(1,5,2)==16\n        assert tn_gp(1,5,4)==256\n        assert tn_gp(2,6,3)==486"
    },
    {
        "original": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ",
        "sampled": "\"\"\"\n        self.assertEqual(check(self.number), False)\n    def test_check_reverse(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a python function to check if a given number is one less than twice its reverse. \n            Your code should pass these tests:\n            assert check_reverse(70) == False\nassert check_reverse(23) == False\nassert check_reverse(73) == True\n        \"\"\"\n        self.assertEqual(check_reverse(self.number), False)"
    },
    {
        "original": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ",
        "sampled": "\"\"\"\n        return (a > 0)!= (b > 0)"
    },
    {
        "original": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
        "sampled": "'''\n        assert is_octagonal(n)\n        return (n*(3*n-1))//2"
    },
    {
        "original": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
        "sampled": "\"\"\"\n        if len(arr) == 0:\n            return 0\n        max_len = 0\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                max_len += 1\n        return max_len"
    },
    {
        "original": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def smallest_num(xs):\n  return min(xs)\n",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ",
        "sampled": "'''\n        max_diff = 0\n        for i in range(len(tuple_list)-1):\n            for j in range(i+1, len(tuple_list)):\n                max_diff = max(max_diff, abs(tuple_list[i][0] - tuple_list[j][0]), abs(tuple_list[i][1] - tuple_list[j][1]))\n        return max_diff\n#"
    },
    {
        "original": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
        "sampled": "\"\"\"\n        return sorted(list(set(list(map(lambda x: x[1], sorted(list(map(lambda x: x[0], list(map(lambda x: x[1], list(map(lambda x: x[0], list(map(lambda x: x[1], list(map(lambda x: x[0], list(map(lambda x: x[1], list(map(lambda x: x[0], list(map(lambda x: x[1], list(map(lambda x: x[0], list(map(lambda x"
    },
    {
        "original": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
        "sampled": "'''\n        if not isinstance(list_of_lists, list):\n            return 0\n        if len(list_of_lists) == 0:\n            return 0\n        if len(list_of_lists) == 1:\n            return list_of_lists[0]\n        else:\n            return recursive_list_sum(list_of_lists[1:]) + recursive_list_sum(list_of_lists[0:])"
    },
    {
        "original": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ",
        "sampled": "'''\n        assert bell_number(2) == 2\n        assert bell_number(10) == 115975\n        assert bell_number(56) == 6775685320645824322581483068371419745979053216268760300\n    def test_bell_number_3(self):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the number of ways to partition a set of bell numbers. \n            Your code should pass these tests:\n            assert bell_number(2"
    },
    {
        "original": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")",
        "sampled": "'''\n        #"
    },
    {
        "original": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums",
        "sampled": "\"\"\"\n        if not isinstance(list_of_elements, list):\n            raise TypeError(\"The list_of_elements parameter must be a list.\")\n        if not isinstance(list_of_elements, list):\n            raise TypeError(\"The list_of_elements parameter must be a list.\")\n        if not isinstance(list_of_elements, list):\n            raise TypeError(\"The list_of_elements parameter must be a list.\")\n        if not isinstance(list_of_elements, list):\n            raise TypeError(\""
    },
    {
        "original": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False",
        "sampled": "'''"
    },
    {
        "original": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))",
        "sampled": "'''\n        #"
    },
    {
        "original": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True",
        "sampled": "\"\"\"\n        for i in range(len(patterns)):\n            for j in range(len(patterns[i])):\n                if patterns[i][j]!= patterns[i][j+1]:\n                    return False\n        return True"
    },
    {
        "original": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ",
        "sampled": "'''\n        tuples = list(tuples)\n        for i in range(len(tuples)):\n            for j in range(len(tuples[i])):\n                if tuples[i][j] % k!= 0:\n                    tuples.pop(i)\n                    break\n        return tuples"
    },
    {
        "original": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
        "sampled": "'''\n        #"
    },
    {
        "original": "def is_Diff(n): \r\n    return (n % 11 == 0) ",
        "sampled": "'''"
    },
    {
        "original": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False",
        "sampled": "'''\n        #"
    },
    {
        "original": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6",
        "sampled": "\"\"\"\n        assert tetrahedral_number(n) == sum(\n            [\n                (n - 1) * (n - 2) * (n - 3) * (n - 4),\n                (n - 1) * (n - 2) * (n - 3) * (n - 4) + (n - 1) * (n - 2) * (n - 3) * (n - 4),\n                (n - 1) * (n - 2) * (n - 3) * (n - 4) + (n - 1) * (n - 2"
    },
    {
        "original": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ",
        "sampled": "\"\"\"\n        return zip(self.first, self.second)\ndef zip_tuples(tuples1, tuples2):\n    \"\"\"\n    This function takes two tuples and returns a new tuple with the two tuples\n    in the order they are given.\n    >>> zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6))\n    (7, 1)\n    >>> zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7))\n    (8, 2)"
    },
    {
        "original": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume",
        "sampled": "'''\n        assert volume_sphere(10)==4188.790204786391\n        assert volume_sphere(25)==65449.84694978735\n        assert volume_sphere(20)==33510.32163829113\n    def test_volume_sphere_2(self):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the volume of a sphere. \n            Your code should pass these tests:\n            assert volume_sphere_2(10"
    },
    {
        "original": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)",
        "sampled": "\"\"\"\n        return str(s)[0]"
    },
    {
        "original": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea",
        "sampled": "'''\n        return (4*pi*radius**2)\n    def volume_sphere(radius):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the volume of a sphere. \n            Your code should pass these tests:\n            assert volume_sphere(10)==30.0\nassert volume_sphere(15)==81.0\nassert volume_sphere(20)==243.0\n        '''\n        return (4/3*pi*radius**3)"
    },
    {
        "original": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
        "sampled": "'''\n        n = int(n)\n        if n <= 0:\n            raise ValueError(\"n must be positive\")\n        if n > 100:\n            raise ValueError(\"n must be less than 100\")\n        if n % 2 == 0:\n            raise ValueError(\"n must be odd\")\n        if n % 2 == 1:\n            n -= 1\n        return n * (n + 1) // 2 + n\n    def centered_hexagonal_number(self, n):\n        '''\n            You are an exper Python programmer, and here is your task"
    },
    {
        "original": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict",
        "sampled": " \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"}"
    },
    {
        "original": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def closest_num(N):\r\n  return (N - 1)",
        "sampled": "'''\n        #"
    },
    {
        "original": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True",
        "sampled": "\"\"\"\n        if not isinstance(number, str):\n            return False\n        if len(number)!= 9:\n            return False\n        for i in range(0, len(number)):\n            if number[i]!= number[i].lower():\n                return False\n        return True"
    },
    {
        "original": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
        "sampled": "\"\"\"\n        a = int(input(\"Enter a: \"))\n        b = int(input(\"Enter b: \"))\n        return power(a,b)\ndef power(a,b):\n    return a**b\nif __name__ == '__main__':\n    print(power(3,4))\n    print(power(2,3))\n    print(power(5,5))"
    },
    {
        "original": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ",
        "sampled": "\"\"\"\n        if not isinstance(tuples, list):\n            raise TypeError(\"tuples must be a list\")\n        if len(tuples) == 0:\n            raise ValueError(\"tuples must contain at least one element\")\n        if not isinstance(tuples[0], tuple):\n            raise TypeError(\"tuples must contain tuples\")\n        if not isinstance(tuples[0][0], str):\n            raise TypeError(\"tuples must contain tuples of strings\")\n        if not isinstance(tuples[0][1], int):"
    },
    {
        "original": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ",
        "sampled": "'''\n        if len(sublist) == 0:\n            return 0\n        elif len(sublist) == 1:\n            return 1\n        else:\n            return min(Find_Min_Length(sublist[1:]), Find_Min_Length(sublist[0:len(sublist)-1])) + 1\nif __name__ == '__main__':\n    print('Start')\n    assert Find_Min_Length([[1],[1,2]]) == 1\n    assert Find_Min_Length([[1,2],[1,"
    },
    {
        "original": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
        "sampled": "13: 1,10: 1,20: 1,30: 1,40: 1}\n            \"\"\""
    },
    {
        "original": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ",
        "sampled": "'''\n        #"
    },
    {
        "original": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i",
        "sampled": "\"\"\"\n        if num == 1:\n            return num\n        if num == 2:\n            return 3\n        if num % 2 == 0:\n            return next_smallest_palindrome(num // 2)\n        else:\n            return next_smallest_palindrome(3 * num + 1)\nif __name__ == '__main__':\n    print(next_smallest_palindrome(99))\n    print(next_smallest_palindrome(1221))\n    print(next_smallest_palindrome(120))"
    },
    {
        "original": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "sampled": "\"\"\"\n        return ''.join(word.title() for word in snake_case.split('_'))"
    },
    {
        "original": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r",
        "sampled": "\"\"\"\n        return sorted(list(map(lambda x: sorted(x), list_of_lists)), key=lambda x: x)"
    },
    {
        "original": "def count(lst):   \r\n    return sum(lst) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ",
        "sampled": "'''\n        #"
    },
    {
        "original": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)",
        "sampled": ", 67, 78, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25"
    },
    {
        "original": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ",
        "sampled": "\"\"\"\n        if len(list_of_ranges) == 0:\n            return []\n        if start_range > end_range:\n            return []\n        if start_range < 1:\n            start_range = 1\n        if end_range > len(list_of_ranges):\n            end_range = len(list_of_ranges)\n        missing_ranges = []\n        for i in range(start_range, end_range + 1):\n            if i not in list_of"
    },
    {
        "original": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result",
        "sampled": "'''"
    },
    {
        "original": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False",
        "sampled": "\"\"\"\n        if not isinstance(string, str):\n            return False\n        try:\n            int(string)\n            return True\n        except ValueError:\n            return False\n    def check_float(self, string):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to check if a string represents a float or not. \n            Your code should pass these tests:\n            assert check_float(\"python\")==False\nassert check_float(\"1\")==False\nassert check_float(\"12345\")==True"
    },
    {
        "original": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ",
        "sampled": " (17, 21, 2), (9, 2, 1)]'\nassert assign_freq([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30), (31, 32, 33), (34, 35, 36), (37, 38, 39), (40, 41, 42), (43, 44, 45), ("
    },
    {
        "original": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit",
        "sampled": "'''\n        #"
    },
    {
        "original": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result",
        "sampled": "\"\"\"\n        return sum(int(x) for x in tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to_int(tuple_to"
    },
    {
        "original": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ",
        "sampled": " (1.33, 4.0), (82.0, 13.0)]'\nassert list_to_float( [(\"2\", \"2\"), (\"3\", \"3\"), (\"4\", \"4\"), (\"5\", \"5\")] ) == '[(2.0, 2.0), (3.0, 3.0), (4.0, 4.0), (5.0, 5.0)]'\nassert list_to_float( [(\"1\", \"1\"), (\"2\", \"2\"), (\"3\", \"3\"), (\"4\", \"4\")] )"
    },
    {
        "original": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)",
        "sampled": "\"\"\"\n        if not arr:\n            return -1\n        if arr[0] == target:\n            return 0\n        if arr[-1] == target:\n            return len(arr) - 1\n        if arr[0] < target:\n            return binary_search(arr[1:], target)\n        if arr[-1] > target:\n            return binary_search(arr[:-1], target)\n        return binary_search(arr[1:], target) + binary_search(arr[:-1], target)\nif __name__ =="
    },
    {
        "original": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max",
        "sampled": "'''\n        max_product = 0\n        for i in range(len(pairs)):\n            for j in range(i+1, len(pairs)):\n                max_product = max(max_product, pairs[i][0]*pairs[j][1])\n        return max_product\n#"
    },
    {
        "original": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)",
        "sampled": "\"\"\"\n        if len(arr) < 3:\n            return False\n        for i in range(len(arr) - 2):\n            for j in range(i + 1, len(arr) - 1):\n                for k in range(j + 1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] == sum:\n                        return True\n        return False\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(check_triplet([2, 7, 4, 0, 9"
    },
    {
        "original": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ",
        "sampled": "\"\"\"\n        smartNumber = lambda n: n * (n + 1) // 2 + 1\n        assert smartNumber(1) == 30\n        assert smartNumber(50) == 273\n        assert smartNumber(1000) == 2664"
    },
    {
        "original": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
        "sampled": "\"\"\"\n        amicable_numbers = []\n        for i in range(1, num):\n            if is_amicable(i):\n                amicable_numbers.append(i)\n        return sum(amicable_numbers)\n    def is_amicable(self, num):\n        \"\"\"\n            A function that checks if a number is amicable.\n            You are an exper Python programmer, and here is your task:\n            Write a function to check if a number is amicable. \n            Your code should pass these tests:\n            assert is_"
    },
    {
        "original": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
        "sampled": "'''\n        assert isinstance(a, complex)\n        assert isinstance(b, complex)\n        return math.atan2(b.imag, b.real) - math.atan2(a.imag, a.real)\n    def angle_complex(a, b):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to get the angle of a complex number. \n            Your code should pass these tests:\n            assert angle_complex(0,1j)==1.57079632679489"
    },
    {
        "original": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
        "sampled": "'''\n        self.assertEqual(multiply_int(10,20),200)\n        self.assertEqual(multiply_int(5,10),50)\n        self.assertEqual(multiply_int(4,8),32)\n    def test_multiply_int_with_negative_numbers(self):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to multiply two integers without using the * operator in python. \n            Your code should pass these"
    },
    {
        "original": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t",
        "sampled": "\"\"\"\n        words = list(set(words))\n        words.sort()\n        return words[:n]\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result",
        "sampled": "'''\n        #"
    },
    {
        "original": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
        "sampled": "'''\n        #"
    },
    {
        "original": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ",
        "sampled": "\"\"\"\n        if len(arr) == 0:\n            return \"EMPTY\"\n        if len(arr) == 1:\n            return \"ODD\" if arr[0] % 2 == 0 else \"EVEN\"\n        if arr[-1] % 2 == 0:\n            return \"EVEN\"\n        else:\n            return \"ODD\"\nif __name__ == \"__main__\":\n    arr = [5, 7, 10]\n    print(check_last(arr, 3, 1))"
    },
    {
        "original": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total",
        "sampled": "'''\n        #"
    },
    {
        "original": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True",
        "sampled": "\"\"\"\n        if num == 0:\n            return False\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11"
    },
    {
        "original": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter",
        "sampled": "'''\n        return 2*pi*radius**2\ndef circle_area(radius):\n    '''\n        You are an exper Python programmer, and here is your task:\n            Write a function to find the area of a circle. \n            Your code should pass these tests:\n            assert circle_area(10)==62.830000000000005\nassert circle_area(5)==31.415000000000003\nassert circle_area(4)==25.132\n        '''\n    return pi*radius**2\ndef circle_perimeter(radius):"
    },
    {
        "original": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ",
        "sampled": "\"\"\"\n        return list(set(tuple(t) for t in self.tuple_list))"
    },
    {
        "original": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums",
        "sampled": "'''\n        #"
    },
    {
        "original": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ",
        "sampled": "\"\"\"\n        return len(list(filter(lambda x: x is not None, self.__lists)))\n    def __str__(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to convert tuple to string. \n            Your code should pass these tests:\n            assert str((1, 2, 3, 4)) == '1, 2, 3, 4'\n            assert str((1, 2, 3)) == '1, 2, 3'\n            assert str((1, 2)) == '1, 2'"
    },
    {
        "original": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum",
        "sampled": "'''\n        #"
    },
    {
        "original": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ",
        "sampled": "\"\"\"\n        max_diff = 0\n        for i in range(len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                if abs(arr[i] - arr[j]) > max_diff:\n                    max_diff = abs(arr[i] - arr[j])\n        return max_diff\nif __name__ == '__main__':\n    arr = [2, 1, 5, 3]\n    print(max_Abs_Diff(arr, 4))"
    },
    {
        "original": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])",
        "sampled": "'''"
    },
    {
        "original": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]",
        "sampled": "\"\"\"\n        if not triangle:\n            return 0\n        triangle = triangle[::-1]\n        n = len(triangle)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                dp[i][j] = triangle[i][j] + max(dp[i][j+1], dp[i+1][j+1])\n        return dp[0][0]"
    },
    {
        "original": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
        "sampled": "\"\"\"\n        if num < 10:\n            return num\n        else:\n            return num // 10 + sum_digits_twoparts(num % 10)\ndef sum_digits_twoparts(num):\n    \"\"\"\n    This function takes a number and returns the sum of the digits of the number.\n    \"\"\"\n    if num < 10:\n        return num\n    else:\n        return num // 10 + sum_digits_twoparts(num % 10)\ndef sum_digits_twoparts_recursive(num):"
    },
    {
        "original": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False",
        "sampled": "\"\"\"\n        if num in seq:\n            return True\n        else:\n            return False\n    def does_Contain_C(self, num, seq):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a python function to find whether the given number is present in the infinite sequence or not. \n            Your code should pass these tests:\n            assert does_Contain_C(1,7,3) == True\nassert does_Contain_C(1,-3,5) == False\nassert does_Contain_"
    },
    {
        "original": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1",
        "sampled": "'''\n        #"
    },
    {
        "original": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n",
        "sampled": "\"\"\"\n        if len(arr) <= 1:\n            return arr\n        else:\n            mid = len(arr) // 2\n            left = merge_sort(arr[:mid])\n            right = merge_sort(arr[mid:])\n            return merge(left, right)\nif __name__ == \"__main__\":\n    print(\"Start\")\n    arr = [3, 4, 2, 6, 5, 7, 1, 9]\n    print(merge_sort(arr))\n    print(\"End\")"
    },
    {
        "original": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
        "sampled": "\"\"\"\n        x1, y1, x2, y2 = parabola\n        return (x1 - x2) ** 2 + (y1 - y2) ** 2 == 0\n    def parabola_vertex(self, x1, y1, x2, y2):\n        \"\"\"\n            Find the vertex of a parabola.\n            Your code should pass these tests:\n            assert parabola_vertex(5,3,2)==(-0.3, 1.55)\n            assert parabola_vertex(9,8"
    },
    {
        "original": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result",
        "sampled": "'''\n        #"
    },
    {
        "original": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result",
        "sampled": "\"\"\"\n        tuple_int_str = []\n        for i in range(len(tuple_str)):\n            tuple_int_str.append(tuple(map(int, tuple_str[i])))\n        return tuple_int_str"
    },
    {
        "original": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season",
        "sampled": "\"\"\"\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            if day == 1 or day == 2 or day == 3 or day == 4 or day == 5 or day == 6 or day == 7:\n                return 'winter'\n            elif day == 10 or day == 11 or day == 12:\n                return 'autumn'\n            elif day == 4 or day == 5 or day == 6 or day == 7 or day == 8 or day == 9:\n                return'spring'"
    },
    {
        "original": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ",
        "sampled": "\"\"\"\n        x, y = 0, 0\n        for a in range(1, n + 1):\n            for b in range(1, n + 1):\n                if a + b == n:\n                    x, y = a, b\n        return 'x = ', x, ', y = ', y"
    },
    {
        "original": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result",
        "sampled": "'''\n        if not isinstance(list1, list) or not isinstance(list2, list):\n            raise TypeError(\"List 1 and List 2 must be lists\")\n        if len(list1)!= len(list2):\n            raise ValueError(\"Lists must be of same length\")\n        return [x for x in list1 if x not in list2]\n    def remove_elements_in_list(self, list1, list2):\n        '''\n            You are an exper Python programmer, and here is"
    },
    {
        "original": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
        "sampled": "\"\"\"\n        for i in range(1, n+1):\n            if i <= n:\n                sum += i\n            else:\n                sum += i - n\n        return sum"
    },
    {
        "original": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
        "sampled": "'''\n        #"
    },
    {
        "original": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ",
        "sampled": "\"\"\""
    },
    {
        "original": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ",
        "sampled": "'''\n        def next_Power_Of_2(n):\n            if n == 0:\n                return 1\n            else:\n                return 2**(n-1) + next_Power_Of_2(n-1)\n        return next_Power_Of_2(n)"
    },
    {
        "original": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
        "sampled": "'''"
    },
    {
        "original": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
        "sampled": "'''"
    },
    {
        "original": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter",
        "sampled": "\"\"\"\n        return 2 * (3 * (4 + 1) + 1)\ndef perimeter_pentagon(n):\n    \"\"\"\n    This function returns the perimeter of a pentagon.\n    \"\"\"\n    return n * (2 * (3 * (4 + 1) + 1) + 1)\ndef test_perimeter_pentagon():\n    \"\"\"\n    This function tests the function perimeter_pentagon.\n    \"\"\"\n    assert perimeter_pentagon(5) == 25\n    assert perimeter_pentagon(10) == 50\n    assert perimeter_pentagon("
    },
    {
        "original": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))",
        "sampled": "'''"
    },
    {
        "original": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result",
        "sampled": "'''\n        d = {}\n        for k, v in kv:\n            if k in d:\n                d[k].append(v)\n            else:\n                d[k] = [v]\n        return d\nif __name__ == '__main__':\n    import os\n    import pytest\n    pytest.main([os.path.join('tests', 'test_094.py')])"
    },
    {
        "original": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter",
        "sampled": "\"\"\"\n        assert perimeter_triangle(10,20,30) == 60\n        assert perimeter_triangle(3,4,5) == 12\n        assert perimeter_triangle(25,35,45) == 105\ndef test_perimeter_triangle_2():\n    \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the perimeter of a triangle. \n            Your code should pass these tests:\n            assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,"
    },
    {
        "original": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ",
        "sampled": "\"\"\"\n        assert is_num_keith(14) == True\n        assert is_num_keith(12) == False\n        assert is_num_keith(197) == True\n    def test_is_num_keith_2(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to find if the given number is a keith number or not. \n            Your code should pass these tests:\n            assert is_num_keith_2(14) == True\nassert is_num"
    },
    {
        "original": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
        "sampled": "\"\"\"\n        lat1 = float(lat1)\n        lon1 = float(lon1)\n        lat2 = float(lat2)\n        lon2 = float(lon2)\n        r = 6371\n        dlat = lat2 - lat1\n        dlon = lon2 - lon1\n        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n        c = 2 * math.atan2(math.sqrt("
    },
    {
        "original": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ",
        "sampled": "\"\"\"\n        if len(strings) == 0:\n            return \"\"\n        if len(strings) == 1:\n            return strings[0]\n        if len(strings) == 2:\n            return strings[0]\n        if len(strings) == 3:\n            return strings[0]\n        if len(strings) == 4:\n            return strings[0]\n        if len(strings) == 5:\n            return strings[0]\n        if len(strings) == 6:\n            return strings[0]\n        if len(strings) == 7:"
    },
    {
        "original": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
        "sampled": "'''\n        #"
    },
    {
        "original": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus",
        "sampled": "'''\n        x1, y1, x2, y2 = parabola\n        return (x1 - x2)**2 + (y1 - y2)**2\n    def parabola_focus(x1, y1, x2, y2):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the focus of a parabola. \n            Your code should pass these tests:\n            assert parabola_focus(5,3,2)==(-0.3"
    },
    {
        "original": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')",
        "sampled": "'''\n        #"
    },
    {
        "original": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
        "sampled": "\"\"\"\n        for i in range(len(arr)):\n            if arr[i] < 0:\n                return i+1\n        return len(arr)+1"
    },
    {
        "original": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False",
        "sampled": "\"\"\"\n        if month_name in [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]:\n            return True\n        else:\n            return False\ndef check_monthnumber(month_name):\n    \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to check whether the given month number contains 30 days or not. \n            Your code should pass these tests:\n            assert check_monthnumber(2)==False"
    },
    {
        "original": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ",
        "sampled": "'''"
    },
    {
        "original": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res",
        "sampled": "\"\"\"\n        if not arr:\n            return -1\n        if arr[0] > target:\n            return -1\n        if arr[0] == target:\n            return 0\n        if arr[-1] < target:\n            return -1\n        if arr[-1] == target:\n            return len(arr) - 1\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return mid"
    },
    {
        "original": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ",
        "sampled": "'''\n        tuples = []\n        for t in tuples:\n            if len(t) == k:\n                tuples.remove(t)\n        return tuples\ndef remove_tuples_2(tuples, k):\n    '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to remove all the tuples with length k. \n            Your code should pass these tests:\n            assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), ("
    },
    {
        "original": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
        "sampled": "'''\n        return (a ** b) % MOD\nif __name__ == '__main__':\n    import os\n    import pytest\n    pytest.main([os.path.join('tests', 'test_find_exponentio.py')])"
    },
    {
        "original": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ",
        "sampled": "\"\"\"\n        assert largest_triangle(a,b) == largest_triangle(a,b,c)\n    def test_largest_triangle_2(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the largest triangle that can be inscribed in an ellipse. \n            Your code should pass these tests:\n            assert largest_triangle_2(4,2)==10.392304845413264\nassert largest_triangle_2(5,7)==4.639"
    },
    {
        "original": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result",
        "sampled": "'''\n        max_list = []\n        for i in range(len(list)):\n            if list[i] > max_list[0]:\n                max_list = [list[i]]\n            elif list[i] == max_list[0]:\n                max_list.append(list[i])\n        return max_list\n    def position_max(list):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find all index positions of the maximum values in a given"
    },
    {
        "original": "def chkList(lst): \r\n    return len(set(lst)) == 1",
        "sampled": "\"\"\"\n        if not isinstance(list1, list):\n            return False\n        if len(list1)!= len(list2):\n            return False\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n        return True\n    def chkList(list1):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a python function to check whether the elements in a list are same or not. \n            Your code should pass these tests:"
    },
    {
        "original": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "sampled": "\"\"\""
    },
    {
        "original": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ",
        "sampled": "'''"
    },
    {
        "original": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ",
        "sampled": "\"\"\""
    },
    {
        "original": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ",
        "sampled": "'''\n        inversions = 0\n        for i in range(len(tuple_list) - 1):\n            for j in range(i + 1, len(tuple_list)):\n                if tuple_list[i] > tuple_list[j]:\n                    inversions += 1\n        return inversions\nif __name__ == '__main__':\n    print('Running tests!')\n    test_inversion_elements = TestInversionElements()\n    test_inversion_elements.test_inversion_elements()"
    },
    {
        "original": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "sampled": "\"\"\"\n        return \"\".join(map(str, elements))\ndef test_concatenate_elements():\n    \"\"\"\n    Testing the concatenate_elements function.\n    \"\"\"\n    assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"Q"
    },
    {
        "original": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)",
        "sampled": "'''\n        #"
    },
    {
        "original": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap",
        "sampled": "'''\n        if not heap:\n            return heap\n        if heap[0] > heap[1]:\n            heap[0], heap[1] = heap[1], heap[0]\n        if heap[0] > heap[1]:\n            heap[0], heap[1] = heap[1], heap[0]\n        if heap[1] > heap[2]:\n            heap[1], heap[2] = heap[2], heap[1]\n        if heap[2] > heap[3]:\n            heap[2], heap"
    },
    {
        "original": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)",
        "sampled": "\"\"\"\n        return re.search(r'[a-zA-Z0-9]', string) is not None\n    def is_allowed_specific_char(string):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex. \n            Your code should pass these tests:\n            assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True"
    },
    {
        "original": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ",
        "sampled": "'''\n        #"
    },
    {
        "original": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum",
        "sampled": "'''\n        #"
    },
    {
        "original": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        return \"\".join(sorted(s1 + s2 for s1, s2 in zip(s1s, s2s)))\ndef test_concatenate_strings():\n    \"\"\"\n    Testing the concatenation of two string tuples.\n    \"\"\"\n    assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    assert concatenate_strings"
    },
    {
        "original": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
        "sampled": "\"\"\"\n        assert degree_radian(radian) == degrees"
    },
    {
        "original": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]",
        "sampled": "\"\"\"\n        if not isinstance(list_of_list, list):\n            raise TypeError(\"The list_of_list must be a list\")\n        if not isinstance(list_of_list[0], list):\n            raise TypeError(\"The list_of_list must be a list of lists\")\n        if not isinstance(list_of_list[0][0], int):\n            raise TypeError(\"The list_of_list must be a list of lists of integers\")\n        if not isinstance(list_of_list[0][0], int):"
    },
    {
        "original": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ",
        "sampled": "\"\"\"\n        if not isinstance(list_1, list) or not isinstance(list_2, list):\n            raise TypeError(\"The first argument must be a list.\")\n        if not len(list_1) == len(list_2):\n            return False\n        for i in range(len(list_1)):\n            if not check_subset_list(list_1[i], list_2[i]):\n                return False\n        return True"
    },
    {
        "original": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))",
        "sampled": "'''"
    },
    {
        "original": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
        "sampled": "\"\"\"\n        return all(isinstance(x, type(y)) for x, y in zip(tuple1, tuple2))\n    def check_type(tuple1):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to check if all the elements in tuple have same data type or not. \n            Your code should pass these tests:\n            assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert"
    },
    {
        "original": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
        "sampled": "\"\"\"\n        if len(arr) == 0:\n            return False\n        elif len(arr) == 1:\n            return arr[0] == arr[0]\n        else:\n            return arr[0] == arr[-1] and is_majority(arr[1:-1], arr[0], len(arr) // 2)\nif __name__ == '__main__':\n    import os\n    import pytest\n    pytest.main([os.path.join('tests', 'test_101.py')])"
    },
    {
        "original": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ",
        "sampled": "\"\"\"\n        if len(arr) == 0:\n            return -1\n        if arr[0] > arr[1]:\n            return arr[0]\n        if arr[len(arr)-1] < arr[len(arr)-2]:\n            return arr[len(arr)-1]\n        if arr[0] < arr[1]:\n            return arr[0]\n        if arr[len(arr)-1] > arr[len(arr)-2]:\n            return arr[len(arr)-1]\n        for i in range(len(arr)-1"
    },
    {
        "original": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result",
        "sampled": "\"\"\"\n        odd_values = []\n        for i in range(len(string)):\n            if i % 2!= 0:\n                odd_values.append(string[i])\n        return ''.join(odd_values)\nif __name__ == '__main__':\n    import os\n    import pytest\n    pytest.main([os.path.join('tests', 'test_101.py')])"
    },
    {
        "original": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
        "sampled": "'''\n        return min(a,b,c)\n    def test_min_of_three_2(self):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find minimum of three numbers. \n            Your code should pass these tests:\n            assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30\n        '''\n        return min("
    },
    {
        "original": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))",
        "sampled": "'''\n        #"
    },
    {
        "original": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface",
        "sampled": "\"\"\"\n        assert lateralsuface_cylinder(10,5)==314.15000000000003\n        assert lateralsuface_cylinder(4,5)==125.66000000000001\n        assert lateralsuface_cylinder(4,10)==251.32000000000002"
    },
    {
        "original": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume",
        "sampled": "'''\n        #"
    },
    {
        "original": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ",
        "sampled": "\"\"\"\n        assert even_bit_set_number(number) == number\n        return number\ndef odd_bit_set_number(number):\n    \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a python function to set all odd bits of a given number. \n            Your code should pass these tests:\n            assert odd_bit_set_number(10) == 5\nassert odd_bit_set_number(20) == 15\nassert odd_bit_set_number(30) == 25\n        \"\"\"\n        assert odd_"
    },
    {
        "original": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;",
        "sampled": "'''"
    },
    {
        "original": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ",
        "sampled": "\"\"\"\n        occurences = {}\n        for key, value in tuples:\n            if key in occurences:\n                occurences[key] += 1\n            else:\n                occurences[key] = 1\n        return occurences\n    def check_occurences(self, tuples):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to check the occurrences of records which occur similar times in the given tuples. \n            Your code should pass these tests:\n            assert check_occurences"
    },
    {
        "original": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]",
        "sampled": "\"\"\"\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 6\n        if n == 4:\n            return 24\n        if n == 5:\n            return 120\n        if n == 6:\n            return 720\n        if n == 7:\n            return 5040\n        if n == 8:\n            return 40320\n        if n == 9:\n            return 362880\n        if n == 10:\n            return 3628800"
    },
    {
        "original": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n",
        "sampled": "\"\"\"\n        if not isinstance(list_to_replace, list):\n            raise TypeError(\"list_to_replace must be a list\")\n        if not isinstance(list_to_replace_with, list):\n            raise TypeError(\"list_to_replace_with must be a list\")\n        if not isinstance(list_to_replace_with, list):\n            raise TypeError(\"list_to_replace_with must be a list\")\n        if len(list_to_replace) == 0:\n            return list_to_replace\n        if len"
    },
    {
        "original": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d",
        "sampled": "', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n            assert array_3d(3,3,3)==[[['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']], [['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']], [['*', '*', '*'], ['*', '*',"
    },
    {
        "original": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total",
        "sampled": "'''"
    },
    {
        "original": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ",
        "sampled": "\"\"\"\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        elif num == 2:\n            return 2\n        elif num == 3:\n            return 4\n        elif num == 4:\n            return 9\n        elif num == 5:\n            return 16\n        elif num == 6:\n            return 25\n        elif num == 7:\n            return 36\n        elif num == 8:\n            return 49\n        elif num == 9:\n            return 64\n        elif num == 10:"
    },
    {
        "original": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum",
        "sampled": "\"\"\"\n        if not arr:\n            return 0\n        max_sum = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] + arr[j] > max_sum:\n                    max_sum = arr[i] + arr[j]\n        return max_sum"
    },
    {
        "original": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
        "sampled": "'''\n        #"
    },
    {
        "original": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "sampled": "'''\n        return sum([1/i for i in range(1,n+1)])\ndef harmonic_sum(n):\n    '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to calculate the harmonic sum of n-1. \n            Your code should pass these tests:\n            assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.5477396571436"
    },
    {
        "original": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
        "sampled": "'''\n        #"
    },
    {
        "original": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list",
        "sampled": "\"\"\"\n        if not isinstance(list_, list):\n            raise TypeError(\"The list must be a list\")\n        if not isinstance(element, str):\n            raise TypeError(\"The element must be a string\")\n        if not isinstance(new_element, str):\n            raise TypeError(\"The new element must be a string\")\n        if not isinstance(list_, list):\n            raise TypeError(\"The list must be a list\")\n        if not isinstance(new_element, str):\n            raise TypeError(\"The new element must be a string"
    },
    {
        "original": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list",
        "sampled": "\"\"\"\n        words = []\n        for word in string.split():\n            if word.startswith('a') or word.startswith('e'):\n                words.append(word)\n        return words\ndef words_ae(string):\n    \"\"\"\n    >>> words_ae(\"python programe\")\n    ['ame']\n    >>> words_ae(\"python programe language\")\n    ['ame', 'anguage']\n    >>> words_ae(\"assert statement\")\n    ['assert', 'atement']\n    \"\"\"\n    return [word for word in string."
    },
    {
        "original": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r",
        "sampled": "\"\"\"\n        if len(colors) == 0:\n            return []\n        if len(colors) == 1:\n            return [colors]\n        if len(colors) == 2:\n            return [colors]\n        if len(colors) == 3:\n            return [colors]\n        if len(colors) == 4:\n            return [colors]\n        if len(colors) == 5:\n            return [colors]\n        if len(colors) == 6:\n            return [colors]\n        if len"
    },
    {
        "original": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd",
        "sampled": "\"\"\"\n        return len([x for x in self if x % 2!= 0])\nif __name__ == '__main__':\n    import sys\n    def run():\n        from io import StringIO\n        class MyStream:\n            def __init__(self, input):\n                self.input = input\n            def __iter__(self):\n                return self\n            def __next__(self):\n                return next(self.input)\n        class MyStringIO:\n            def __init__(self, input):\n                self.input = input"
    },
    {
        "original": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        if len(elements) == 0:\n            return elements\n        elif len(elements) == 1:\n            return elements\n        else:\n            return max(elements, key=lambda x: x[0])\nif __name__ == '__main__':\n    print(\"Running tests for function maximize_elements\")\n    test_cases = [\n        (((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))"
    },
    {
        "original": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "sampled": "\"\"\"\n        for i in range(1, n+1):\n            if i == 1:\n                continue\n            for j in range(1, i):\n                if i % j == 0:\n                    break\n            else:\n                return i\n        return False\nif __name__ == '__main__':\n    import os\n    import pytest\n    pytest.main([os.path.join('tests', 'test_newman_prime.py')])"
    },
    {
        "original": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]",
        "sampled": "\"\"\"\n        if len(list_to_split) < 2:\n            return list_to_split, list_to_split\n        else:\n            return list_to_split[:len(list_to_split)//2], list_to_split[len(list_to_split)//2:]\ndef split_two_parts(list_to_split, length):\n    \"\"\"\n    This function takes a list and a length and returns two lists. The first list is the first half of the list and the second list is the second half of the list."
    },
    {
        "original": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d",
        "sampled": "\"\"\"\n        merged_dict = {}\n        for key in dict_1.keys():\n            merged_dict[key] = dict_1[key]\n        for key in dict_2.keys():\n            if key in merged_dict:\n                merged_dict[key] = dict_2[key]\n            else:\n                merged_dict[key] = dict_2[key]\n        return merged_dict\ndef merge_dict(dict_1, dict_2):\n    \"\"\"\n    Merge two dictionaries.\n    Args:"
    },
    {
        "original": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
        "sampled": "\"\"\"\n        assert dog_age(12) == 61\n        assert dog_age(15) == 73\n        assert dog_age(24) == 109\n    def test_dog_age_in_years_with_zero(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to calculate a dog's age in dog's years. \n            Your code should pass these tests:\n            assert dog_age(0)==0\n        \"\"\"\n        assert dog_age(0) == 0\n    def test_dog"
    },
    {
        "original": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]",
        "sampled": "]] "
    },
    {
        "original": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA",
        "sampled": "'''\n        #"
    },
    {
        "original": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ",
        "sampled": "\"\"\"\n        n = int(input())\n        assert find_star_num(n) == n * (n + 1) // 2\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "original": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)",
        "sampled": "'''\n        assert ascii_value(character) == ord(character)\n        return ord(character)\n    def ascii_value(character):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the ascii value of a character. \n            Your code should pass these tests:\n            assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83\n        '''\n        return ord"
    },
    {
        "original": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ",
        "sampled": "'''\n        rear = []\n        for i in range(len(records) - 1, -1, -1):\n            rear.append(records[i][2])\n        return rear"
    },
    {
        "original": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume",
        "sampled": "'''"
    },
    {
        "original": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ",
        "sampled": "\"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 6\n        if n == 5:\n            return 20\n        if n == 6:\n            return 55\n        if n == 7:\n            return 175\n        if n == 8:\n            return 370\n        if n == 9:\n            return 945\n        if n == 10:\n            return 2_000_000"
    },
    {
        "original": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
        "sampled": "'''\n        if not arr:\n            return False\n        elif arr[0] == target:\n            return True\n        else:\n            for i in range(len(arr)):\n                if arr[i] == target:\n                    return True\n                elif arr[i] > target:\n                    return sequential_search(arr[:i], target)\n                elif arr[i] < target:\n                    return sequential_search(arr[i+1:], target)\n            return False\nif __name__ == '__main__':\n    arr"
    },
    {
        "original": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True",
        "sampled": "\"\"\"\n        return len(set(list)) == len(list)"
    },
    {
        "original": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
        "sampled": "\"\"\"\n        return [x-y for x,y in zip(list1,list2)]\n    def sub_list_2(list1,list2):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to substaract two lists using map and lambda function. \n            Your code should pass these tests:\n            assert sub_list_2([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list_2([1,2],[3,4])=="
    },
    {
        "original": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element",
        "sampled": "\"\"\"\n        return all(item == string for item in list_of_items)\n    def check_element(list_of_items, string):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to check whether all items of a list are equal to a given string. \n            Your code should pass these tests:\n            assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_"
    },
    {
        "original": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
        "sampled": "\"\"\"\n        if len(arr) < k:\n            return 0\n        max_sum = 0\n        for i in range(k):\n            max_sum += arr[i]\n        max_sum_repeated = max_sum\n        for i in range(k, len(arr)):\n            max_sum_repeated += arr[i]\n            max_sum = max(max_sum, max_sum_repeated)\n        return max_sum"
    },
    {
        "original": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
        "sampled": "'''\n        #"
    },
    {
        "original": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find(n,m):  \r\n    q = n//m \r\n    return (q)",
        "sampled": "'''\n        #"
    },
    {
        "original": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)",
        "sampled": "\"\"\"\n        max_val = max(list(map(lambda x: int(x), list(map(lambda x: x.replace(' ', ''), input_list)))))\n        return max_val\nif __name__ == '__main__':\n    solution = Solution()\n    assert solution.max_val(['Python', 3, 2, 4, 5,'version']) == 5\n    assert solution.max_val(['Python', 15, 20, 25]) == 25\n    assert solution.max_val(['Python', 30, 20, 40,"
    },
    {
        "original": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
        "sampled": "\"\"\"\n        return sum(divisors(n))\n    def sum_div(n):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to return the sum of all divisors of a number. \n            Your code should pass these tests:\n            assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1\n        \"\"\"\n        return sum(divisors(n))\n    def sum_div(n):\n        \"\"\""
    },
    {
        "original": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ",
        "sampled": "'''\n        def flatten_list(lst):\n            '''\n            Flatten a given nested list structure.\n            '''\n            if not isinstance(lst, list):\n                return lst\n            else:\n                return [item for sublist in lst for item in flatten_list(sublist)]\n        return flatten_list(lst)"
    },
    {
        "original": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
        "sampled": "'''\n        #"
    },
    {
        "original": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
        "sampled": "\"\"\"\n        return len(self.__dict__)\n    def __str__(self):\n        return str(self.__dict__)\n    def __repr__(self):\n        return str(self.__dict__)\ndef dict_depth(d):\n    \"\"\"\n    This function takes a dictionary and returns the depth of the dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0"
    },
    {
        "original": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
        "sampled": "\"\"\"\n        assert set_Bit_Number(6) == 4\n        assert set_Bit_Number(10) == 8\n        assert set_Bit_Number(18) == 16\n    def test_set_Bit_Number_2(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a python function to find the most significant bit number which is also a set bit. \n            Your code should pass these tests:\n            assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8"
    },
    {
        "original": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
        "sampled": "\"\"\"\n        if len(a)!= len(b):\n            return False\n        else:\n            return True\ndef solve(a,b):\n    \"\"\"\n    This function is used to check whether the count of inversion of two types are same or not. \n    \"\"\"\n    return check(a,b) and check(b,a)\ndef check(a,b):\n    \"\"\"\n    This function is used to check whether the count of inversion of two types are same or not. \n    \"\"\"\n    if len(a)!= len(b"
    },
    {
        "original": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ",
        "sampled": "\"\"\"\n        if not arr:\n            return -1\n        if not arr[0]:\n            return -1\n        if not arr[0][0]:\n            return -1\n        if not arr[0][0][0]:\n            return -1\n        if not arr[0][0][0][0]:\n            return -1\n        if not arr[0][0][0][0][0]:\n            return -1\n        if not arr[0][0][0][0][0][0]:\n            return -1\n        if not arr[0]["
    },
    {
        "original": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()",
        "sampled": "\"\"\"\n        words = list(words)\n        if len(words) == 0:\n            return None, None\n        if len(words) == 1:\n            return words[0], words[0]\n        if len(words) == 2:\n            return words[0], words[1]\n        if len(words) == 3:\n            return words[0], words[1]\n        if len(words) == 4:\n            return words[0], words[1]\n        if len(words) == 5:\n            return words[0], words["
    },
    {
        "original": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
        "sampled": "\"\"\"\n        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n        if k > n:\n            return 0\n        if k == 1:\n            return arr[0]\n        if arr[0] > arr[1]:\n            return 0\n        if arr[n - 1] > arr[n - 2]:\n            return arr[n - 1]\n        max_sum = 0\n        for i in range(n - k):\n            max_sum += arr[i]"
    },
    {
        "original": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
        "sampled": "\"\"\"\n        if len(tuplex)!= 3:\n            raise ValueError(\"The tuple must have 3 elements.\")\n        if not isinstance(tuplex[0], str):\n            raise TypeError(\"The first element of the tuple must be a string.\")\n        if not isinstance(tuplex[1], int):\n            raise TypeError(\"The second element of the tuple must be an integer.\")\n        if not isinstance(tuplex[2], bool):\n            raise TypeError(\"The third element of the tuple must be a boolean.\")\n        return tuplex"
    },
    {
        "original": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result",
        "sampled": "'''\n        #"
    },
    {
        "original": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ",
        "sampled": "\"\"\"\n        assert set_left_most_unset_bit(10) == 14\n        assert set_left_most_unset_bit(12) == 14\n        assert set_left_most_unset_bit(15) == 15"
    },
    {
        "original": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
        "sampled": "'''\n        assert volume_cone(5,12)==314.15926535897927\n        assert volume_cone(10,15)==1570.7963267948965\n        assert volume_cone(19,17)==6426.651371693521\ndef test_volume_cone_2():\n    '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the volume of a cone. \n            Your code should pass these tests:\n            assert volume_cone_2(5,12"
    },
    {
        "original": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ",
        "sampled": "'''\n        #"
    },
    {
        "original": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
        "sampled": "'''"
    },
    {
        "original": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
        "sampled": "'''\n        #"
    },
    {
        "original": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
        "sampled": "\"\"\"\n        return sum(n**2 for n in range(1, n+1)) - sum(n for n in range(1, n+1))\nif __name__ == '__main__':\n    import os\n    import pytest\n    pytest.main([os.path.join('tests', 'test_sum_difference.py')])"
    },
    {
        "original": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t",
        "sampled": "\"\"\"\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 1\n        if num == 3:\n            return 2\n        if num == 4:\n            return 4\n        if num == 5:\n            return 8\n        if num == 6:\n            return 13\n        if num == 7:\n            return 21\n        if num == 8:\n            return 34\n        if num == 9:"
    },
    {
        "original": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ",
        "sampled": "'''"
    },
    {
        "original": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
        "sampled": "\"\"\"\n        if not isinstance(list_to_rotate, list):\n            raise TypeError(\"The given list_to_rotate must be a list\")\n        if not isinstance(number_of_items, int):\n            raise TypeError(\"The given number_of_items must be an integer\")\n        if not isinstance(rotate_by, int):\n            raise TypeError(\"The given rotate_by must be an integer\")\n        if rotate_by < 0:\n            raise ValueError(\"The given rotate_by must be a positive integer\")\n        if"
    },
    {
        "original": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
        "sampled": "'''\n        #"
    },
    {
        "original": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ",
        "sampled": "\"\"\"\n        return count_unset_bits(n)\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
        "original": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict",
        "sampled": "'''"
    },
    {
        "original": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ",
        "sampled": "\"\"\"\n        return sorted(self.data, key=lambda x: x[1])"
    },
    {
        "original": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
        "sampled": "\"\"\"\n        assert ap_sum(1,5,2)==25\n        assert ap_sum(2,6,4)==72\n        assert ap_sum(1,4,5)==34\n    def test_ap_sum_2(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the sum of arithmetic progression. \n            Your code should pass these tests:\n            assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4"
    },
    {
        "original": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
        "sampled": "\"\"\"\n        if month in [\"January\", \"February\", \"March\"]:\n            return True\n        else:\n            return False\ndef check_monthname(month):\n    \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to check whether the given month name contains 31 days or not. \n            Your code should pass these tests:\n            assert check_monthname(\"February\")==True\nassert check_monthname(\"January\")==False\nassert check_monthname(\"March\")==False\n        \"\"\"\n    if month in [\"January"
    },
    {
        "original": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "sampled": "\"\"\"\n        if not text:\n            return 'Not matched!'\n        if not word:\n            return 'Not matched!'\n        if word[-1] in punctuation:\n            return 'Not matched!'\n        if word in text:\n            return 'Found a match!'\n        return 'Not matched!'\n#"
    },
    {
        "original": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)",
        "sampled": "\"\"\"\n        return tuple(sorted(set(iterable)))\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)",
        "sampled": "\"\"\"\n        dig_let = lambda s: (len(s), sum(1 for c in s if c.isdigit()))\n        assert dig_let(\"python\") == (6, 0)\n        assert dig_let(\"program\") == (7, 0)\n        assert dig_let(\"python3.0\") == (6, 2)\n    def test_dig_let_2(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to calculate the number of digits and letters in a string. "
    },
    {
        "original": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
        "sampled": "\"\"\"\n        if len(nums) < 2:\n            return []\n        nums.sort()\n        i = 0\n        j = 1\n        while j < len(nums):\n            if nums[i] == nums[j]:\n                j += 1\n            else:\n                i += 1\n                j = i + 1\n        return nums[i:]\n#"
    },
    {
        "original": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
        "sampled": "'''\n        #"
    },
    {
        "original": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6",
        "sampled": "'''"
    },
    {
        "original": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ",
        "sampled": "\"\"\"\n        return self.find_ways(n, 0, [])\n    def find_ways(self, n, curr, ways):\n        if curr == n:\n            ways.append(curr)\n            return\n        for i in range(1, n+1):\n            if i not in self.dp:\n                self.dp[i] = self.dp[i-1] + self.dp[i-2]\n            self.dp[i] += self.dp[i-1]\n        self.find_ways(n,"
    },
    {
        "original": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;",
        "sampled": "'''"
    },
    {
        "original": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1",
        "sampled": "'''\n        #"
    },
    {
        "original": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ",
        "sampled": "'''"
    },
    {
        "original": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ",
        "sampled": "'''\n        max_value = 0\n        for record in records:\n            if record[0] > max_value:\n                max_value = record[0]\n        return max_value\nif __name__ == '__main__':\n    import sys\n    def run():\n        args = sys.argv[1:]\n        if not args:\n            print('Usage: python {} <input_file>'.format(sys.argv[0]))\n            sys.exit(1)\n        with open(args[0], 'r') as f"
    },
    {
        "original": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)",
        "sampled": "\"\"\"\n        return list(map(lambda x, y: x % y, x, y))\ndef moddiv_list(x, y):\n    \"\"\"\n    This function is used to find modulo division of two lists.\n    Args:\n        x (list): list of numbers\n        y (list): list of numbers\n    Returns:\n        list: list of modulo division of two lists\n    \"\"\"\n    return list(map(lambda x, y: x % y, x, y))\nif __name__ == \"__main__\":\n    import sys"
    },
    {
        "original": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
        "sampled": "\"\"\"\n        if a == 0:\n            return \"No\"\n        if b == 0:\n            return \"No\"\n        if c == 0:\n            return \"No\"\n        if a == b == c:\n            return \"Yes\"\n        else:\n            return \"No\"\ndef Check_Solution(a,b,c):\n    \"\"\"\n    This function takes three arguments:\n    a: the first number\n    b: the second number\n    c: the third number\n    This function should return \"Yes\" if the quadratic equation is valid or"
    },
    {
        "original": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2",
        "sampled": "\"\"\"\n        self.assertEqual(get_carol(2), 7)\n        self.assertEqual(get_carol(4), 223)\n        self.assertEqual(get_carol(5), 959)\n    def test_get_carol_with_negative_numbers(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the n\u2019th carol number. \n            Your code should pass these tests:\n            assert get_carol(-2) == -"
    },
    {
        "original": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty",
        "sampled": "'''\n        #"
    },
    {
        "original": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
        "sampled": "'''\n        max_occurrences = 0\n        max_occurrences_index = 0\n        for i in range(len(list)):\n            if list[i] == max_occurrences:\n                max_occurrences_index = i\n            else:\n                max_occurrences = list[i]\n                max_occurrences_index = i\n        return max_occurrences_index\n#"
    },
    {
        "original": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ",
        "sampled": "\"\"\"\n        if len(tuple_list) < k:\n            return tuple_list\n        else:\n            return tuple_list[:k] + add_K_element(tuple_list[k:], k)\n    def add_K_element(tuple_list, k):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to add the k elements to each element in the tuple. \n            Your code should pass these tests:\n            assert add_K_element([(1, 3, 4),"
    },
    {
        "original": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count",
        "sampled": "\"\"\"\n        return len(str(number))\ndef count_Digit(number):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a python function to count the number of digits of a given number. \n            Your code should pass these tests:\n            assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7\n        \"\"\"\n        return len(str(number).split(\"\"))\ndef count_Digit(number"
    },
    {
        "original": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
        "sampled": "'''\n        def is_balanced(root):\n            if root is None:\n                return True\n            if root.left and root.right:\n                if abs(root.left.h - root.right.h) > 1:\n                    return False\n                return is_balanced(root.left) and is_balanced(root.right)\n            return False\n        return is_balanced(root)"
    },
    {
        "original": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ",
        "sampled": "'''\n        return tuple(repeat(tuple_to_repeat, n))\ndef repeat_tuples_with_index(tuple_to_repeat, n):\n    '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to repeat the given tuple n times. \n            Your code should pass these tests:\n            assert repeat_tuples_with_index((1, 3), 4) == ((0, 0), (1, 0), (2, 0), (3, 0), (0, 1), (1,"
    },
    {
        "original": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort",
        "sampled": "'''"
    },
    {
        "original": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result",
        "sampled": "\"\"\"\n        if not arr:\n            return []\n        heap = []\n        for i in arr:\n            heapq.heappush(heap, i)\n        return heap\n    def heap_sort(self, arr):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to sort a given list of elements in ascending order using heap queue algorithm. \n            Your code should pass these tests:\n            assert heap_sort([18, 14, 10, 9, 8, 7, 9, 3, 2, 4"
    },
    {
        "original": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume",
        "sampled": "'''\n        assert volume_cuboid(1,2,3)==6\n        assert volume_cuboid(5,7,9)==315\n        assert volume_cuboid(10,15,21)==3150"
    },
    {
        "original": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list",
        "sampled": "\"\"\"\n        if len(s) == 0:\n            return []\n        if len(s) == 1:\n            return [s]\n        res = []\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                res.append(s[:i] + s[i:j] + s[j:])\n        return res"
    },
    {
        "original": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list",
        "sampled": "'''\n        if not list_:\n            return list_\n        return list_[1:] + list_[:1]"
    },
    {
        "original": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA",
        "sampled": "'''"
    },
    {
        "original": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n",
        "sampled": " 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60,"
    },
    {
        "original": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
        "sampled": " ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],2)==[('Greyson Fulton', 98, 99), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],3)==[('Wyatt Knott', 91, 94), ('"
    },
    {
        "original": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1",
        "sampled": "\"\"\"\n        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if arr[0] > arr[1]:\n            return 0\n        if arr[0] == arr[1]:\n            return 1\n        if arr[0] < arr[1]:\n            return len(arr) - 1\n        if arr[0] == arr[1]:\n            return 2\n        if arr[0] > arr[1]:\n            return len(arr) - 2\n        if arr[0] == arr"
    },
    {
        "original": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)",
        "sampled": "\"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return n * get_perrin(n-1)\nif __name__ == '__main__':\n    import os\n    import pytest\n    pytest.main([os.path.join('tests', 'test_get_perrin.py')])"
    },
    {
        "original": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "sampled": "\"\"\"\n        assert find_lucas(n) == lucas(n)"
    },
    {
        "original": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string",
        "sampled": "\"\"\"\n        return [string.format(i) for i in range(len(list_of_strings))]\n    def add_string(list_of_strings, string):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to insert a given string at the beginning of all items in a list. \n            Your code should pass these tests:\n            assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert"
    },
    {
        "original": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result",
        "sampled": "\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"A9\",\"A10\",\"A11\",\"A12\",\"A13\",\"A14\",\"A15\",\"A16\",\"A17\",\"A18\",\"A19\",\"A20\",\"A21\",\"A22\",\"A23\",\"A24\",\"A25\",\"A26\",\"A27\",\"A28\",\"A29\",\"A30\",\"A31\",\"A32\",\"A33\",\"A34\",\"A35\",\"A36\",\"A37\",\"A38\",\"A39\",\"A40\",\"A41\",\"A42\",\"A43\",\"A"
    },
    {
        "original": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]",
        "sampled": "\"\"\"\n        return max(0, self.n - self.n / 2 + self.n / 3 - self.n / 4 + self.n / 5)\nif __name__ == \"__main__\":\n    import os\n    import pytest\n    pytest.main([os.path.join(\"tests\", \"test_067.py\")])"
    },
    {
        "original": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
        "sampled": "\"\"\"\n        max_length = 0\n        max_length_list = []\n        for i in range(len(list_of_lists)):\n            if len(list_of_lists[i]) > max_length:\n                max_length = len(list_of_lists[i])\n                max_length_list = list_of_lists[i]\n        return max_length_list, max_length"
    },
    {
        "original": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ",
        "sampled": "\"\"\"\n        if len(tuple_list) == 0:\n            return True\n        elif len(tuple_list) == 1:\n            return tuple_list[0]!= tuple_list[0]\n        else:\n            for i in range(len(tuple_list)):\n                if tuple_list[i] == tuple_list[i+1]:\n                    return False\n            return True"
    },
    {
        "original": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
        "sampled": "\"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], min(nums[1], nums[2]))\n        #"
    },
    {
        "original": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "12, 17))\n            \"\"\"\n            #"
    },
    {
        "original": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ",
        "sampled": "'''"
    },
    {
        "original": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False",
        "sampled": "\"\"\"\n        if not isinstance(tuplex, tuple):\n            raise TypeError(\"tuplex must be a tuple\")\n        if not isinstance(element, str):\n            raise TypeError(\"element must be a string\")\n        if not isinstance(tuplex, tuple):\n            raise TypeError(\"tuplex must be a tuple\")\n        if not isinstance(element, str):\n            raise TypeError(\"element must be a string\")\n        if not isinstance(tuplex, tuple):\n            raise TypeError(\"tuplex must be a tuple\")"
    },
    {
        "original": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
        "sampled": "\"\"\"\n        if n == 0:\n            return n\n        elif n % 10 == 0:\n            return rearrange_bigger(n // 10)\n        else:\n            return n + rearrange_bigger(n // 10)\nif __name__ == '__main__':\n    print(rearrange_bigger(12))\n    print(rearrange_bigger(10))\n    print(rearrange_bigger(102))"
    },
    {
        "original": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val",
        "sampled": "\"\"\"\n        if not isinstance(list_of_numbers, list):\n            raise TypeError(\"The list_of_numbers parameter must be a list.\")\n        if not all(isinstance(item, (int, float)) for item in list_of_numbers):\n            raise TypeError(\"The list_of_numbers parameter must be a list of numbers.\")\n        if not all(isinstance(item, (int, float)) for item in list_of_numbers):\n            raise TypeError(\"The list_of_numbers parameter must be a list of"
    },
    {
        "original": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "sampled": "'''\n        #"
    },
    {
        "original": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result",
        "sampled": "\"\"\"\n        if len(list_of_tuples) == 0:\n            return []\n        if len(list_of_tuples) == 1:\n            return list_of_tuples[0]\n        if nth_element == 0:\n            return list_of_tuples[0]\n        if nth_element == len(list_of_tuples) - 1:\n            return list_of_tuples[-1]\n        if nth_element == len(list_of_tuples"
    },
    {
        "original": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0",
        "sampled": "'''\n        #"
    },
    {
        "original": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ",
        "sampled": "'''\n        #"
    },
    {
        "original": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
        "sampled": "\"\"\"\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 6\n        if num == 4:\n            return 10\n        if num == 5:\n            return 15\n        if num == 6:\n            return 21\n        if num == 7:\n            return 28\n        if num == 8:\n            return 36\n        if num == 9:\n            return 45\n        if num == 10:\n            return 55\n        if num == 11"
    },
    {
        "original": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ",
        "sampled": "\"\"\"\n        tuples = []\n        for i in range(len(tuples_list)):\n            tuples.append(tuples_list[i])\n        return tuples\n    def group_tuples(self, tuples_list):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to find common first element in given list of tuple. \n            Your code should pass these tests:\n            assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) =="
    },
    {
        "original": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
        "sampled": "'''"
    },
    {
        "original": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
        "sampled": "\"\"\"\n        n = int(input())\n        if n <= 0:\n            print(\"Please enter a positive integer\")\n        else:\n            print(cube_Sum(n))\nif __name__ == '__main__':\n    main()"
    },
    {
        "original": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ",
        "sampled": "\"\"\"\n        return delimiter.join(map(str, tuple))"
    },
    {
        "original": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ",
        "sampled": "'''"
    },
    {
        "original": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums",
        "sampled": "'''\n        #"
    },
    {
        "original": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "sampled": "\"\"\"\n        return re.sub(r'[^0-9]', '-', str(date_string))\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
        "sampled": "\"\"\"\n        if len(arr) <= 1:\n            return arr\n        gap = len(arr) // 2\n        while gap > 0:\n            for i in range(gap, len(arr)):\n                j = i\n                while j >= gap and arr[j - gap] > arr[j]:\n                    arr[j], arr[j - gap] = arr[j - gap], arr[j]\n                    j -= gap\n            gap //= 2\n        return arr\nif __name__ == \"__main__\":\n    import doctest"
    },
    {
        "original": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        return tuple(a & b for a, b in zip(a1, a2))\n    def or_tuples(a1, a2):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to extract the elementwise or tuples from the given two tuples. \n            Your code should pass these tests:\n            assert or_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (5, 2, 3, 3)\nassert or_tuples((1,"
    },
    {
        "original": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
        "sampled": "\"\"\"\n        return ((a**2)+(b**2))-(4*a*b)\ndef parabola_directrix(a,b,c):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the directrix of a parabola. \n            Your code should pass these tests:\n            assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix("
    },
    {
        "original": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
        "sampled": "'''\n        #"
    },
    {
        "original": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median",
        "sampled": "'''\n        median = (a + b) / 2\n        if a > b:\n            median = a\n        elif b > a:\n            median = b\n        return median\ndef median_trapezium(a, b, c):\n    '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the median of a trapezium. \n            Your code should pass these tests:\n            assert median_trapezium(15,25,35)==20\nassert median_trapezium"
    },
    {
        "original": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')",
        "sampled": "\"\"\"\n        for i in range(len(arr)):\n            if arr[i] > num:\n                return 'No, entered number is less than those in the array'\n        return 'Yes, the entered number is greater than those in the array'"
    },
    {
        "original": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def last_Digit(n) :\r\n    return (n % 10) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x",
        "sampled": "'''\n        #"
    },
    {
        "original": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))",
        "sampled": "\"\"\"\n        adverbs = []\n        for i in range(len(sentence)):\n            if sentence[i] in ADVERBS:\n                adverbs.append(i)\n        return adverbs\n    def find_adverb_position(self, sentence):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to find all adverbs and their positions in a given sentence. \n            Your code should pass these tests:\n            assert find_adverb_position(\"clearly!! we can see the sky\")==(0"
    },
    {
        "original": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea",
        "sampled": "'''\n        assert surfacearea_cube(5)==150\n        assert surfacearea_cube(3)==54\n        assert surfacearea_cube(10)==600\n    def test_surfacearea_cube_2(self):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the surface area of a cylinder. \n            Your code should pass these tests:\n            assert surfacearea_cylinder(5)==315\nassert surfacearea_cylinder(3)==54\nassert surfacearea_cyl"
    },
    {
        "original": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "sampled": "\"\"\"\n        positive_count = 0\n        for i in range(len(arr)):\n            if arr[i] > 0:\n                positive_count += 1\n        return positive_count / len(arr)"
    },
    {
        "original": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ",
        "sampled": ", 12), (4, 7), (3, 9)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 0) == '[(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)]'"
    },
    {
        "original": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ",
        "sampled": "\"\"\"\n        occurence = 0\n        for i in range(len(list)):\n            if tuple(list[i]) in tuple_list:\n                occurence += 1\n        return occurence\n    def count_Occurrence(tuple_list, list):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a python function to count the occurence of all elements of list in a tuple. \n            Your code should pass these tests:\n            assert count_Occurrence(('a', 'a', 'c',"
    },
    {
        "original": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums",
        "sampled": "'''\n        #"
    },
    {
        "original": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
        "sampled": "\"\"\"\n        self.assertEqual(cal_sum(9), 49)\n        self.assertEqual(cal_sum(10), 66)\n        self.assertEqual(cal_sum(11), 88)\n    def test_cal_sum_2(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to calculate the sum of perrin numbers. \n            Your code should pass these tests:\n            assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal"
    },
    {
        "original": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ",
        "sampled": "'''\n        #"
    },
    {
        "original": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result",
        "sampled": "'''\n        #"
    },
    {
        "original": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))",
        "sampled": "'''\n        #"
    },
    {
        "original": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None",
        "sampled": "\"\"\"\n        if amount < 0:\n            return None\n        if amount > max_amount:\n            return None\n        return amount - max_amount\n    def loss_amount(self, amount, max_amount):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function that gives loss amount if the given amount has loss else return none. \n            Your code should pass these tests:\n            assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100"
    },
    {
        "original": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "sampled": "'''"
    },
    {
        "original": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False",
        "sampled": "'''\n        assert check_monthnumb_number(5)==True\n        assert check_monthnumb_number(2)==False\n        assert check_monthnumb_number(6)==False\n    def test_check_monthnumb_number_with_leap_year(self):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to check whether the given month number contains 31 days or not. \n            Your code should pass these tests:\n            assert check_monthnumb_number"
    },
    {
        "original": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result",
        "sampled": "'''"
    },
    {
        "original": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList",
        "sampled": "'''"
    },
    {
        "original": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area",
        "sampled": "'''\n        #"
    },
    {
        "original": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def Extract(lst): \r\n    return [item[0] for item in lst] ",
        "sampled": "\"\"\"\n        return [item for sublist in self for item in sublist]\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr",
        "sampled": "'''\n        #"
    },
    {
        "original": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
        "sampled": "red'], ['white', 'green'], ['white', 'green','red'], ['white', 'blue'], ['white', 'blue','red'], ['white', 'blue', 'green'], ['white', 'blue', 'green','red'], ['white', 'blue', 'green','red', 'orange'], ['white', 'blue', 'green','red', 'orange', 'black'], ['white', 'blue', 'green','red', 'orange', 'black', 'white'], ['white', 'blue', 'green','red"
    },
    {
        "original": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
        "sampled": "\"\"\"\n        max_prod = 0\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                max_prod = max(max_prod, arr[i] * arr[j])\n        return max_prod\nif __name__ == \"__main__\":\n    import os\n    import pytest\n    pytest.main([os.path.join(\"tests\", \"test_max_subarray_product.py\")])"
    },
    {
        "original": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1",
        "sampled": "\"\"\"\n        if not isinstance(d, dict):\n            raise TypeError(\"d must be a dictionary\")\n        return {k: v for k, v in d.items() if v is not None}"
    },
    {
        "original": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
        "sampled": "'''\n        #"
    },
    {
        "original": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
        "sampled": "'''\n        #"
    },
    {
        "original": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
        "sampled": "\"\"\"\n        max_profit = 0\n        for i in range(len(prices) - k + 1):\n            max_profit = max(max_profit, prices[i + k - 1] - prices[i])\n        return max_profit"
    },
    {
        "original": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "sampled": "\"\"\"\n        return tuple(sum(x) for x in zip(*tuples))\n    def test_add_pairwise(self):\n        \"\"\"\n            Test the function add_pairwise.\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the pairwise addition of the elements of the given tuples. \n            Your code should pass these tests:\n            assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8"
    },
    {
        "original": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2",
        "sampled": "\"\"\""
    },
    {
        "original": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
        "sampled": "\"\"\"\n        counter = {}\n        for key, value in sorted(counter.items(), key=lambda x: x[1], reverse=True):\n            counter[key] = value\n        return counter.items()"
    },
    {
        "original": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def is_lower(string):\r\n  return (string.lower())",
        "sampled": "\"\"\"\n        return str.lower(str)\n    def is_upper(self, str):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a python function to convert the given string to upper case. \n            Your code should pass these tests:\n            assert is_upper(\"InValid\") == \"INVALID\"\nassert is_upper(\"TruE\") == \"TRUE\"\nassert is_upper(\"SenTenCE\") == \"SENTENCE\"\n        \"\"\"\n        return str.upper(str)\n    def is"
    },
    {
        "original": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
        "sampled": "\"\"\"\n        max_char = \"\"\n        for char in string:\n            if char in max_char:\n                max_char = max_char + char\n            else:\n                max_char = char\n        return max_char"
    },
    {
        "original": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
        "sampled": "\"\"\"\n        if sum_to_find == 0:\n            return True\n        if sum_to_find < 0:\n            return False\n        if len(set_to_find) > len(set_to_find):\n            return False\n        for i in set_to_find:\n            if sum_to_find - i in set_to_find:\n                return True\n        return False\nif __name__ == '__main__':\n    print('Running main:')\n    print('\\n*** Task 1 ***')\n    print('Expected"
    },
    {
        "original": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
        "sampled": "\"\"\"\n        return binom.pmf(k, n, p)\n    def test_binomial_probability_with_negative_n(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to compute binomial probability for the given number. \n            Your code should pass these tests:\n            assert binomial_probability(10, -5, 1.0/3) == 0.13656454808718185\n            assert binomial_probability(11, -6, 2.0"
    },
    {
        "original": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup",
        "sampled": "\"\"\"\n        return sorted(tuple_list, key=lambda x: x[-1])"
    },
    {
        "original": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area",
        "sampled": "'''\n        return (5*(3*(4*(1+math.sqrt(5)))-5))/2\n    def area_pentagon(self, n):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the area of a pentagon. \n            Your code should pass these tests:\n            assert area_pentagon(5)==43.01193501472417\n            assert area_pentagon(10)==172.0477400588967\n            assert area_"
    },
    {
        "original": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ",
        "sampled": "'''\n        #"
    },
    {
        "original": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total",
        "sampled": "'''\n        #"
    },
    {
        "original": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
        "sampled": "\"\"\"\n        if not arr:\n            return False\n        elif len(arr) == 1:\n            return arr[0] == target\n        else:\n            mid = len(arr) // 2\n            if arr[mid] == target:\n                return True\n            elif arr[mid] > target:\n                return binary_search(arr[:mid], target)\n            else:\n                return binary_search(arr[mid+1:], target)\nif __name__ == '__main__':\n    import os\n    import pytest\n    py"
    },
    {
        "original": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons",
        "sampled": "22706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.92820323027"
    },
    {
        "original": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ",
        "sampled": "\"\"\"\n        binary_tuple = tuple(binary_tuple)\n        binary_tuple = tuple(binary_tuple)\n        binary_tuple = tuple(binary_tuple)\n        binary_tuple = tuple(binary_tuple)\n        binary_tuple = tuple(binary_tuple)\n        binary_tuple = tuple(binary_tuple)\n        binary_tuple = tuple(binary_tuple)\n        binary_tuple = tuple(binary_tuple)\n        binary_tuple = tuple(binary_tuple)"
    },
    {
        "original": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)",
        "sampled": "'''"
    },
    {
        "original": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums",
        "sampled": "\"\"\"\n        #"
    },
    {
        "original": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA",
        "sampled": "\"\"\"\n        assert surfacearea_cone(5,12)==282.7433388230814\n        assert surfacearea_cone(10,15)==880.5179353159282\n        assert surfacearea_cone(19,17)==2655.923961165254\n    def test_surfacearea_cone_2(self):\n        \"\"\"\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the surface area of a cone. \n            Your code should pass these tests:\n            assert surfacearea_"
    },
    {
        "original": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd",
        "sampled": "'''"
    },
    {
        "original": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter",
        "sampled": "'''\n        assert diameter_circle(10) == 20\n        assert diameter_circle(40) == 80\n        assert diameter_circle(15) == 30\n    def test_diameter_circle_2(self):\n        '''\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the diameter of a circle. \n            Your code should pass these tests:\n            assert diameter_circle_2(10)==20\nassert diameter_circle_2(40)==80\nassert diameter_circle_2(15)"
    },
    {
        "original": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ",
        "sampled": "'''\n        #"
    }
]