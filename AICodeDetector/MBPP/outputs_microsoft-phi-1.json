[
    {
        "original": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
        "sampled": "\"\"\"\n        m, n = pos\n        if m == 0:\n            return cost[m][n]\n        if n == 0:\n            return cost[m][n]\n        if m > 0 and n > 0:\n            return min(cost[m-1][n], cost[m][n-1], cost[m-1][n-1]) + cost[m][n]\n        else:\n            return float('inf')\n    m, n = pos\n    return min_cost(cost, m, n)"
    },
    {
        "original": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        return set(li1).intersection(set(li2))\n    if len(li1) == 0 or len(li2) == 0:\n        return 0\n    if len(li1) == 1 and len(li2) == 1:\n        return 1 if li1[0] == li2[0] else 0\n    if len(li1) == 1 or len(li2) == 1:\n        return 0\n    if len(li1) > len(li2):\n        li1, li2 ="
    },
    {
        "original": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
        "sampled": "\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return True\n        return False\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a prime number, False otherwise.\n        Args:\n        n (int): An integer.\n        Returns:\n        bool: True if n is a prime number, False otherwise.\n        Example:\n        >>> is_prime(7)\n        True"
    },
    {
        "original": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "sampled": "\"\"\"\n        heap = []\n        for num in li:\n            heapq.heappush(heap, -num)\n            if len(heap) > n:\n                heapq.heappop(heap)\n        return [-num for num in heap]"
    },
    {
        "original": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] ",
        "sampled": "\"\"\"\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        ways = 0\n        for i in range(1, n+1):\n            ways += count_ways(n-i) * count_ways(i)\n        return ways"
    },
    {
        "original": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)",
        "sampled": "\"\"\"\n        return bin(a ^ b).count('1') == 1\n    count = 0\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if differ_At_One_Bit_Pos(li[i], li[j]):\n                count += 1\n    return count"
    },
    {
        "original": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
        "sampled": "\"\"\"\n        import re\n        words = re.findall(r'\\b\\w{4,}\\b', s)\n        return words\n    longest_words = []\n    for s in li:\n        words = find_char_long(s)\n        if words:\n            longest_word = max(words, key=len)\n            longest_words.append(longest_word)\n    return longest_words"
    },
    {
        "original": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums",
        "sampled": "\"\"\"\n        return list(map(lambda x: x**2, nums))\n    return [test_square_nums(nums) for nums in li]"
    },
    {
        "original": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ",
        "sampled": "\"\"\"\n        n = len(s)\n        for i in range(1, n+1):\n            if s == s[i:] + s[:i]:\n                return i\n        return 0\n    count = 0\n    for s in li:\n        if is_palindrome(s) and find_Rotations(s) > 0:\n            count += 1\n    return count"
    },
    {
        "original": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest",
        "sampled": "\"\"\"\n        if n > len(dataset):\n            raise ValueError(\"n cannot be greater than the length of the dataset\")\n        sorted_dataset = sorted(dataset)\n        return sorted_dataset[:n]\n    smallest_items = small_nnum(dataset, n)\n    return sum(smallest_items) / len(smallest_items)"
    },
    {
        "original": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
        "sampled": "\"\"\"\n        if c in s:\n            return s[:s.index(c)] + s[s.index(c)+1:s.rindex(c)] + s[s.rindex(c)+1:]\n        else:\n            return s\n    return [remove_Occ(s, c) for s in li]"
    },
    {
        "original": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
        "sampled": "\"\"\"\n        return sorted(matrix, key=sum)\n    return sorted_matrix"
    },
    {
        "original": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
        "sampled": "\"\"\"\n        word_count = {}\n        for word in words:\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n        max_count = max(word_count.values())\n        return [(word, count) for word, count in word_count.items() if count == max_count]"
    },
    {
        "original": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
        "sampled": "\"\"\"\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        volume = area * height\n        return volume\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the input integer is a prime number, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0"
    },
    {
        "original": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
        "sampled": "\"\"\"\n        result = []\n        current = \"\"\n        for char in s:\n            if char.islower():\n                current += char\n            elif current:\n                result.append(current)\n                current = \"\"\n        if current:\n            result.append(current)\n        return result\n    return split_lowerstring(s)"
    },
    {
        "original": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "sampled": "\"\"\"\n        for i in range(len(s)-1):\n            if s[i].islower() and s[i+1].isupper():\n                return True\n        return False\n    count = 0\n    for s in li:\n        if text_lowercase_underscore(s):\n            count += 1\n    return count"
    },
    {
        "original": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
        "sampled": "\"\"\"\n        side_length = side_lengths[0]\n        return 4 * side_length\n    return sum(map(square_perimeter, li))"
    },
    {
        "original": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "sampled": "\"\"\"\n        for char in chars:\n            if char in s2:\n                s1 = s1.replace(char, \"\")\n        return s1\n    result = []\n    for s in li:\n        result.append(remove_dirty_chars(s, s2))\n    return result"
    },
    {
        "original": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
        "sampled": "\"\"\"\n        return len(set(arr))!= len(arr)\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the input integer is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n: int) -> bool:\n        \"\"\"\n        Returns True if the input integer is a palindrome"
    },
    {
        "original": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
        "sampled": "\"\"\"\n        if num == 0:\n            return True\n        while num > 0:\n            if num % 10 == 7:\n                return False\n            num //= 10\n        return True\n    return [num for num in li if is_woodall(num)]"
    },
    {
        "original": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
        "sampled": "\"\"\"\n        return [i*n for i in range(1, m+1)]"
    },
    {
        "original": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
        "sampled": "\"\"\"\n        seen = set()\n        for num in arr:\n            if num in seen:\n                return num\n            seen.add(num)\n        return -1"
    },
    {
        "original": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
        "sampled": "\"\"\"\n        max_sum = float('-inf')\n        for i in range(len(li)):\n            for j in range(len(li[0])):\n                for k in range(i, len(li)):\n                    for l in range(j, len(li[0])):\n                        sub_list = [li[m][n] for m in range(i, k+1) for n in range(j, l+1)]\n                        sub_list_sum = sum(sub_list)\n                        if sub_list_sum > max_"
    },
    {
        "original": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
        "sampled": "\"\"\"\n        decimal = 0\n        binary = str(n)\n        for i in range(len(binary)):\n            digit = int(binary[i])\n            decimal += digit * 2**(len(binary)-i-1)\n        return decimal\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if binary_to_decimal(li[i]) + binary_to_decimal(li[j]) == binary_to_decimal(li[i]*li["
    },
    {
        "original": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
        "sampled": "\"\"\"\n        product = 1\n        for num in arr:\n            if arr.count(num) == 1:\n                product *= num\n        return product\n    for i in range(len(arr)-2):\n        if arr[i] == arr[i+1] == arr[i+2]:\n            return True\n    return False"
    },
    {
        "original": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
        "sampled": "\"\"\"\n        return len(tuple_list) == k\n    return [tuple_list for tuple_list in li if check_k_elements(tuple_list, k)]"
    },
    {
        "original": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
        "sampled": "\"\"\"\n        return [''.join(c for c in s if not c.isdigit()) for s in li]"
    },
    {
        "original": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
        "sampled": "\"\"\"\n        if n == 0 or k == 0 or n < k:\n            return 1\n        else:\n            return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n    result = []\n    for i in range(len(li)-1):\n        result.append(binomial_coeff(li[i], li[i+1]))\n    return result"
    },
    {
        "original": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
        "sampled": "\"\"\"\n        for i in range(len(li)):\n            if li.count(li[i]) % 2!= 0:\n                return li[i]\n        return None"
    },
    {
        "original": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                if s[i] == s[j-1]:\n                    count += 1\n        return count"
    },
    {
        "original": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
        "sampled": "\"\"\"\n        pass"
    },
    {
        "original": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
        "sampled": "\"\"\"\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    max_palindrome = 0\n    for num in li:\n        if is_palindrome(num) and is_prime(num):\n            max_palindrome = max(max_palindrome, num)\n    return"
    },
    {
        "original": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
        "sampled": "\"\"\"\n        binary = \"\"\n        while num > 0:\n            binary = str(num % 2) + binary\n            num //= 2\n        return int(binary) if binary else 0\n    def binary_To_Decimal(binary: str) -> int:\n        \"\"\"\n        Converts a binary number to decimal number.\n        Args:\n            binary (str): A string representing a binary number.\n            Your code should pass these tests:\n            assert binary_To_Decimal(\"1010\") == 10\n            assert binary_To_Decimal(\"1101\") =="
    },
    {
        "original": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
        "sampled": "\"\"\"\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == num:\n                left = mid + 1\n            elif nums[mid] < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return nums[left] - 1\n    return sorted(nums, key=lambda x: (abs(x - target), x))"
    },
    {
        "original": "def find_rect_num(n):\r\n  return n*(n + 1) ",
        "sampled": "\"\"\"\n        return (n * (n + 1) * (n + 2)) // 6\n    return sum(find_rect_num(i) for i in range(1, n + 1))"
    },
    {
        "original": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
        "sampled": "\"\"\"\n        num1_str = str(num1)\n        num2_str = str(num2)\n        if n > len(num1_str):\n            return None\n        if n > len(num2_str):\n            n = n % len(num1_str)\n        num1_nth_digit = num1_str[n-1]\n        num2_nth_digit = num2_str[n-1]\n        return int(num1_nth_digit) + int(num2_nth_digit)"
    },
    {
        "original": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
        "sampled": "\"\"\"\n        nums = []\n        strs = []\n        for item in mixed_list:\n            if isinstance(item, int):\n                nums.append(item)\n            elif isinstance(item, str):\n                strs.append(item)\n        nums.sort()\n        strs.sort()\n        return nums + strs"
    },
    {
        "original": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
        "sampled": "\"\"\"\n        even_count = 0\n        odd_count = 0\n        for num in li:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        if even_count == 0 or odd_count == 0:\n            return 0\n        else:\n            return even_count // odd_count\n    return div_even_odd(li1) // div_even_odd(li2)"
    },
    {
        "original": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
        "sampled": "\"\"\"\n        if len(s) <= 1:\n            return s\n        else:\n            result = [s[0]]\n            for i in range(1, len(s)):\n                if s[i]!= result[-1]:\n                    result.append(s[i])\n            return ''.join(result)\n    result = []\n    for s in li:\n        if is_rearrangeable(s):\n            result.append(s)\n        else:\n            result.append(rearrange_string(s))\n    return result"
    },
    {
        "original": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
        "sampled": "\"\"\"\n        import collections\n        freq = collections.Counter()\n        for row in li:\n            freq.update(row)\n        return freq"
    },
    {
        "original": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
        "sampled": "\"\"\"\n        return filter(lambda x: x % 2 == 0, li)\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        Args:\n        - n: An integer.\n        Returns:\n        - True if the given number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return"
    },
    {
        "original": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
        "sampled": "\"\"\"\n        repeated_sum = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    repeated_sum += arr[i]\n        return repeated_sum\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "original": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
        "sampled": "\"\"\"\n        import re\n        pattern = r\"[a-z]+(?=_)\"\n        matches = re.findall(pattern, text)\n        return \"Found a match!\" if matches else \"Not matched!\"\n    return [test_case(case) for case in cases]"
    },
    {
        "original": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "sampled": "\"\"\"\n        if not s.startswith(prefix):\n            return False\n        words = s.split()\n        if len(words) == 1:\n            return False\n        return words[0] == prefix\n    return [s for s in li if text_match_string(s)]"
    },
    {
        "original": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
        "sampled": "\"\"\"\n        a = arr[0]\n        for i in range(1, len(arr)):\n            b = arr[i]\n            while b!= 0:\n                a, b = b, a % b\n        return a\n    def get_lcm(arr):\n        \"\"\"\n        Returns the least common multiple of the given array elements.\n        Args:\n        - arr: A list of integers\n        Returns:\n        - The least common multiple of the given array elements.\n        Example:\n        assert get_lcm([2, 4, 6, 8"
    },
    {
        "original": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
        "sampled": "\"\"\"\n        return len(set(li)) == len(li)\n    return all(test_distinct(sublist) for sublist in li)"
    },
    {
        "original": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
        "sampled": "\"\"\"\n        def factorial(n: int) -> int:\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n        return factorial(a) % 10 == 0 and factorial(b) % 10 == 0"
    },
    {
        "original": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
        "sampled": "\"\"\"\n        # Convert the number to binary and remove the '0b' prefix\n        binary = bin(num)[2:]\n        # Pad the binary string with leading zeros if necessary\n        binary = '0'*(len(binary)%2) + binary\n        # Set all odd bits to 1\n        new_binary = ''.join(['1' if bit == '0' else '0' for bit in binary])\n        # Convert the new binary string back to an integer\n        return int(new_binary, 2)\n    # Iterate over the list of integers"
    },
    {
        "original": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
        "sampled": "\"\"\"\n        return [row[i] for row in li]\n    return specified_element"
    },
    {
        "original": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
        "sampled": "\"\"\"\n        return min(len(sublist) for sublist in li)\n    min_length = min_length_list(li)\n    return [sublist for sublist in li if len(sublist) == min_length]"
    },
    {
        "original": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
        "sampled": "\"\"\"\n        if a == b == c:\n            print(\"Equilateral triangle!\")\n            return True\n        else:\n            return False\n    for triangle in triangles:\n        a, b, c = triangle\n        if check_equilateral(a,b,c) and check_equilateral(b,c,a) and check_equilateral(c,a,b):\n            return True\n    return False"
    },
    {
        "original": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
        "sampled": "\"\"\"\n        return a * b\n    def is_triangle_area(a: int, b: int, c: int) -> bool:\n        \"\"\"\n        Returns True if the given sides of a triangle form a valid triangle, False otherwise.\n        \"\"\"\n        if a + b > c and b + c > a and c + a > b:\n            return True\n        else:\n            return False\n    def is_valid_triangle(a: int, b: int, c: int) -> bool:\n        \"\"\"\n        Returns True if the given sides form a"
    },
    {
        "original": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ",
        "sampled": "\"\"\"\n        if s[0] == s[-1]:\n            return \"Equal\"\n        else:\n            return \"Not Equal\"\n    count = 0\n    for s in li:\n        if check_Equality(s) == \"Equal\":\n            count += 1\n    return count"
    },
    {
        "original": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list",
        "sampled": "\"\"\"\n        max_num = max(arr)\n        count = [0] * (max_num + 1)\n        for num in arr:\n            count[num] += 1\n        sorted_arr = []\n        for i in range(1, max_num + 1):\n            sorted_arr.extend([i] * count[i])\n        return sorted_arr\n    sorted_arr = counting_sort(arr)\n    return sum(sorted_arr)"
    },
    {
        "original": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
        "sampled": "\"\"\"\n        if n == 1:\n            return a\n        else:\n            return a * tn_gp(a, n-1, k)\n    return sum(tn_gp(a, n, k) for n in range(1, k+1))"
    },
    {
        "original": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ",
        "sampled": "\"\"\"\n        return num == int(str(num)[::-1]) - 1\n    return [num for num in li if check(num)]"
    },
    {
        "original": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
        "sampled": "\"\"\"\n        digits.sort(reverse=True)\n        return int(''.join(map(str, digits)))\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n: int) -> bool:\n        \"\"\""
    },
    {
        "original": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ",
        "sampled": "\"\"\"\n        return (a < 0 and b > 0) or (a > 0 and b < 0)\n    n = len(li)\n    if n % 2 == 1:\n        return False\n    for i in range(0, n, 2):\n        if opposite_Signs(li[i], li[i+1]):\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "original": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
        "sampled": "\"\"\"\n        return 2 * n * (2 * n - 1)\n    octagonal_numbers = [n for n in range(1, max_octagonal + 1) if is_octagonal(n)]\n    return sum(octagonal_numbers)"
    },
    {
        "original": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
        "sampled": "\"\"\"\n        n = len(arr)\n        if n < 2:\n            return 0\n        max_len = 1\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if abs(arr[i] - arr[j]) <= diff:\n                    curr_len = 2\n                    k = j+1\n                    while k < n and abs(arr[i] - arr[k]) <= diff:\n                        if abs(arr[i] - arr[k]) == abs(arr[j] - arr["
    },
    {
        "original": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                    count += 1\n        return count"
    },
    {
        "original": "def smallest_num(xs):\n  return min(xs)\n",
        "sampled": "\"\"\"\n        return min(nums)\n    smallest_num = find_smallest_num(nums)\n    smallest_num_index = nums.index(smallest_num)\n    return smallest_num_index"
    },
    {
        "original": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ",
        "sampled": "\"\"\"\n        li.sort()\n        return max(li[i+1]-li[i] for i in range(len(li)-1))"
    },
    {
        "original": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
        "sampled": "\"\"\"\n        return sorted(li, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "original": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
        "sampled": "\"\"\"\n        if not isinstance(item, list):\n            return item\n        return sum(recursive_list_sum(i) for i in item)\n    return sum(recursive_list_sum(li))"
    },
    {
        "original": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ",
        "sampled": "\"\"\"\n        count = 0\n        for num in li:\n            if num > 0:\n                count += 1\n        return count\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if a number is prime, False otherwise.\n        Args:\n        - n: an integer\n        Returns:\n        - True if n is prime, False otherwise\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:"
    },
    {
        "original": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ",
        "sampled": "\"\"\"\n        if n == 0:\n            return 1\n        bell = [1, 1]\n        for i in range(2, n+1):\n            bell.append(0)\n            for j in range(i):\n                bell[i] += bell[j] * bell[i-j-1]\n        return bell[n]\n    count = 0\n    for i in range(len(bell_numbers)):\n        for j in range(i+1, len(bell_numbers)):\n            if bell_numbers[i] +"
    },
    {
        "original": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "sampled": "\"\"\"\n        if len(arr) <= 1:\n            return True\n        increasing = decreasing = True\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                decreasing = False\n            elif arr[i] < arr[i-1]:\n                increasing = False\n            if not increasing and not decreasing:\n                return False\n        return True\n    if is_Monotonic(arr1) and is_Monotonic(arr2):\n        return True\n    else:\n        return False"
    },
    {
        "original": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set",
        "sampled": "\"\"\"\n        if sublist == []:\n            return True\n        if len(sublist) > len(li):\n            return False\n        if li[:len(sublist)] == sublist:\n            return True\n        return is_sublist(li[1:], sublist)\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            sublist = li[i:j]\n            if is_sublist(li, sublist) and len(sublist) > 1:"
    },
    {
        "original": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")",
        "sampled": "\"\"\"\n        return len(set(len(t) for t in tuples)) == 1\n    return [t for t in tuples if get_equal([t])]"
    },
    {
        "original": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums",
        "sampled": "\"\"\"\n        n = len(li)\n        gap = n\n        swapped = True\n        while gap!= 1 or swapped:\n            gap = int(gap / 1.3)\n            swapped = False\n            for i in range(n - gap):\n                if li[i + gap] < li[i]:\n                    li[i], li[i + gap] = li[i + gap], li[i]\n                    swapped = True\n        return li\n    sorted_li = comb_sort(li)\n    for i in range(1, len"
    },
    {
        "original": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False",
        "sampled": "\"\"\"\n        for i in range(1, int(num**0.5)+1):\n            if num - i*i <= 0:\n                return True\n        return False\n    count = 0\n    for num in li:\n        if is_diff_square(num):\n            count += 1\n    return count"
    },
    {
        "original": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))",
        "sampled": "\"\"\"\n        # code to split the string with multiple delimiters\n        pass"
    },
    {
        "original": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True",
        "sampled": "\"\"\"\n        if len(li)!= len(patterns):\n            return False\n        for i in range(len(li)):\n            if li[i]!= patterns[i]:\n                return False\n        return True\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if is_samepatterns(li[i], li[j]):\n                return True\n    return False"
    },
    {
        "original": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ",
        "sampled": "\"\"\"\n        return [tup for tup in tuples if all(elem % k == 0 for elem in tup)]\n    return [find_tuples(tuples, k) for k in range(1, max_k+1)]"
    },
    {
        "original": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
        "sampled": "\"\"\"\n        return (length * length)\n    count = 0\n    for shape in shapes:\n        count += count_squares(shape[0], shape[1])\n    return count"
    },
    {
        "original": "def is_Diff(n): \r\n    return (n % 11 == 0) ",
        "sampled": "\"\"\"\n        even_sum = 0\n        odd_sum = 0\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_sum += int(digit)\n            else:\n                odd_sum += int(digit)\n        return even_sum - odd_sum == num\n    result = []\n    for num in li:\n        if is_Diff(num):\n            result.append(num)\n    return result"
    },
    {
        "original": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(1, n+1):\n            if bin(i).count('1') % 2!= 0:\n                count += 1\n        return count"
    },
    {
        "original": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False",
        "sampled": "\"\"\"\n        return len(word) % 2 == 1\n    return [word for word in words if word_len(word) and is_odd(word)]"
    },
    {
        "original": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6",
        "sampled": "\"\"\"\n        if n == 1:\n            return 1\n        else:\n            return n * tetrahedral_number(n-1)\n    return sum(tetrahedral_number(n) for n in range(1, n+1))"
    },
    {
        "original": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ",
        "sampled": "\"\"\"\n        return list(zip(tuple1, tuple2))"
    },
    {
        "original": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume",
        "sampled": "\"\"\"\n        return (4/3) * 3.141592653589793 * r**3\n    return [volume_sphere(r) for r in radii]"
    },
    {
        "original": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)",
        "sampled": "\"\"\"\n        char_count = {}\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        max_count = max(char_count.values())\n        max_chars = [char for char, count in char_count.items() if count == max_count]\n        return max_chars[0]\n    return [get_Char(s) for s in li]"
    },
    {
        "original": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "sampled": "\"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        else:\n            prev_prev = 1\n            prev = 1\n            for i in range(3, n+1):\n                curr = prev + prev_prev\n                prev_prev = prev\n                prev = curr\n            return curr\n    return sum(sequence(n) for n in li)"
    },
    {
        "original": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea",
        "sampled": "\"\"\"\n        return 4 * math.pi * r ** 2\n    return [surfacearea_sphere(r) for r in radii]"
    },
    {
        "original": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
        "sampled": "\"\"\"\n        if n == 1:\n            return 1\n        else:\n            return 3 * n * (n - 1) + 1\n    hexagonal_numbers = [centered_hexagonal_number(n) for n in range(1, n + 1)]\n    hexagonal_numbers_set = set(hexagonal_numbers)\n    hexagonal_numbers_sum = sum(hexagonal_numbers)\n    hexagonal_numbers_product = 1\n    for n in hexagonal_numbers:\n        hexagonal_numbers_product *="
    },
    {
        "original": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict",
        "sampled": "\"\"\"\n        result = {}\n        for key in d1.keys() | d2.keys() | d3.keys():\n            if key in result:\n                result[key] = merge_dictionaries_three(result[key], d1.get(key, None), d2.get(key, None), d3.get(key, None))\n            else:\n                result[key] = d1.get(key, None) or d2.get(key, None) or d3.get(key, None)\n        return result"
    },
    {
        "original": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count",
        "sampled": "\"\"\"\n        freq_dict = {}\n        for elem in li:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n        return freq_dict\n    freq_count_1 = freq_count(li1)\n    freq_count_2 = freq_count(li2)\n    # Check if the frequency counts are equal\n    return freq_count_1 == freq_count_2"
    },
    {
        "original": "def closest_num(N):\r\n  return (N - 1)",
        "sampled": "\"\"\"\n        if n <= li[0]:\n            return li[0]\n        else:\n            return min([x for x in li if x < n], default=None)"
    },
    {
        "original": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max",
        "sampled": "\"\"\"\n        return max(len(word) for word in words)\n    longest_word_length = len_log(words)\n    return [word for word in words if len(word) == longest_word_length]"
    },
    {
        "original": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False",
        "sampled": "\"\"\"\n        for string in li:\n            if substring in string:\n                return True\n        return False\n    count = 0\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if is_substring(li[i], li[j]):\n                count += 1\n    return count"
    },
    {
        "original": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True",
        "sampled": "\"\"\"\n        if str(num) == str(num)[::-1]:\n            return True\n        else:\n            return False\n    def is_palindromic(num: int) -> bool:\n        \"\"\"\n        Returns True if the given number is palindromic or not.\n        \"\"\"\n        if str(num) == str(num)[::-1]:\n            return True\n        else:\n            return False\n    def is_undulating(num: int) -> bool:\n        \"\"\"\n        Returns True if the given number is undulating or not."
    },
    {
        "original": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
        "sampled": "\"\"\"\n        if b == 0:\n            return 1\n        elif b == 1:\n            return a\n        else:\n            return a * power(a, b-1)\n    result = []\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] == li[j]:\n                continue\n            a = li[i]\n            b = li[j]\n            if a > b:\n                a, b = b, a\n            if b % a =="
    },
    {
        "original": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ",
        "sampled": "\"\"\"\n        return min(records, key=lambda x: x[1])[0]\n    return [index_minimum(records[i:i+n]) for i in range(0, len(records), n)]"
    },
    {
        "original": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ",
        "sampled": "\"\"\"\n        if not li:\n            return 0\n        min_len = float('inf')\n        for i in range(len(li)):\n            for j in range(i+1, len(li)+1):\n                sublist = li[i:j]\n                if len(sublist) < min_len:\n                    min_len = len(sublist)\n        return min_len"
    },
    {
        "original": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                count += 1\n        return count\n    count = 0\n    for num in li:\n        if is_prime(num) or is_divisor(num):\n            count += 1\n    return count"
    },
    {
        "original": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
        "sampled": "\"\"\"\n        freq_dict = {}\n        for lst in li:\n            for num in lst:\n                if num in freq_dict:\n                    freq_dict[num] += 1\n                else:\n                    freq_dict[num] = 1\n        return freq_dict"
    },
    {
        "original": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ",
        "sampled": "\"\"\"\n        product = 1\n        for num in li:\n            product *= num\n        return product / len(li)\n    return sum(multiply_num(sublist) for sublist in li)"
    },
    {
        "original": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ",
        "sampled": "\"\"\"\n        binary = ''\n        while decimal > 0:\n            binary = str(decimal % 2) + binary\n            decimal //= 2\n        return binary if binary else '0'\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "original": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i",
        "sampled": "\"\"\"\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            return num\n        num_len = len(num_str)\n        for i in range(num_len-1, 0, -1):\n            if num_str[i:] == num_str[i:][::-1]:\n                return int(num_str[:i][::-1] + num_str[i:])\n        return int(num_str[:-1][::-1] + num_str[-1"
    },
    {
        "original": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]",
        "sampled": "\"\"\"\n        if k > len(li):\n            return None\n        pivot = li[0]\n        left = [x for x in li[1:] if x < pivot]\n        right = [x for x in li[1:] if x >= pivot]\n        if k <= len(left):\n            return kth_element(left, k, 2*k-1)\n        elif k > len(left) + 1:\n            return kth_element(right, k-len(left)-1, 2*(len(left)+1)-1)"
    },
    {
        "original": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "sampled": "\"\"\"\n        words = s.split('_')\n        return words[0] + ''.join(word.capitalize() for word in words[1:])\n    return sorted(snake_to_camel(s) for s in li)"
    },
    {
        "original": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "sampled": "\"\"\"\n        if n % 2 == 0:\n            return -1\n        else:\n            return (n * (n - 3)) // 2 + m\n    return sum(eulerian_num(n, m) for n, m in li)"
    },
    {
        "original": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r",
        "sampled": "\"\"\"\n        return [sorted(sublist) for sublist in li]"
    },
    {
        "original": "def count(lst):   \r\n    return sum(lst) ",
        "sampled": "\"\"\"\n        return sum(li)"
    },
    {
        "original": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ",
        "sampled": "\"\"\"\n        for tup in tuples:\n            for num in li:\n                tup += (num,)\n        return tuples\n    return add_lists"
    },
    {
        "original": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(start, end+1):\n            if all(c in '0123456789abcdefABCDEF' for c in hex(i)[2:]):\n                count += 1\n        return count"
    },
    {
        "original": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)",
        "sampled": "\"\"\"\n        if len(lists) == 0:\n            return []\n        elif len(lists) == 1:\n            return lists[0]\n        else:\n            merged = []\n            heap = []\n            for i in range(len(lists)):\n                if i == 0:\n                    heap = lists[i]\n                else:\n                    heap = merge_sorted_list(heap, lists[i])\n                merged += heap\n            return merged"
    },
    {
        "original": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                count += 1\n        return count % 2\n    max_rotations = 0\n    for s in li:\n        rotations = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                rotations += 1\n        if rotations % 2 == 1 and odd_Equivalent(s, rotations) > max_rotations:\n            max_rotations = odd_Equivalent("
    },
    {
        "original": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ",
        "sampled": "\"\"\"\n        missing_ranges = []\n        for i in range(start, end+1):\n            if i not in li:\n                missing_ranges.append((i, i))\n        return missing_ranges"
    },
    {
        "original": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result",
        "sampled": "\"\"\"\n        if not li:\n            return []\n        if not isinstance(li[0], list):\n            return [li[0]] if li[0] in common_in_nested_lists.cache else []\n        return list(set(li[0]).intersection(*li[1:]))\n    common_in_nested_lists.cache = {}\n    return common_in_nested_lists"
    },
    {
        "original": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ",
        "sampled": "\"\"\"\n        radius = diameter / 2\n        return 2 * 3.14159 * radius + 2 * 3.14159 * radius ** 2\n    def circumference(diameter: int) -> float:\n        \"\"\"\n        Returns the circumference of a circle given its diameter.\n        Args:\n        diameter (int): The diameter of the circle.\n        Returns:\n        float: The circumference of the circle.\n        Example:\n        >>> circumference(2)\n        12.566370614359172\n        \"\"\"\n        return 2 * 3.14159 * diameter\n    def area"
    },
    {
        "original": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False",
        "sampled": "\"\"\"\n        try:\n            int(s)\n            return True\n        except ValueError:\n            return False\n    count = 0\n    for s in li:\n        if check_integer(s):\n            count += 1\n    return count"
    },
    {
        "original": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ",
        "sampled": "\"\"\"\n        freq_dict = {}\n        for tup in li:\n            if tup in freq_dict:\n                freq_dict[tup] += 1\n            else:\n                freq_dict[tup] = 1\n        max_freq = max(freq_dict.values())\n        return [tup + (freq,) for tup, freq in freq_dict.items() if freq == max_freq]"
    },
    {
        "original": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit",
        "sampled": "\"\"\"\n        for d in ds:\n            if not d:\n                return False\n        return True\n    return [is_empty_dit(ds[i:i+n]) for i in range(0, len(ds), n)]"
    },
    {
        "original": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result",
        "sampled": "\"\"\"\n        return int(''.join(map(str, tup)))\n    return sum(tup_to_int(t) for t in li)"
    },
    {
        "original": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ",
        "sampled": "\"\"\"\n        result = []\n        for tup in li:\n            try:\n                result.append((float(tup[0]), float(tup[1])))\n            except ValueError:\n                pass\n        return result"
    },
    {
        "original": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst",
        "sampled": "\"\"\"\n        words = s.split()\n        return [word.strip('()') for word in words]\n    result = []\n    for s in li:\n        result.append(string_to_list(s))\n    return result"
    },
    {
        "original": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)",
        "sampled": "\"\"\"\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] == nums[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        return nums[left]\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == search(nums[i+1:], nums[i]):\n            count += 1\n    return count"
    },
    {
        "original": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max",
        "sampled": "\"\"\"\n        max_product = float('-inf')\n        for i in range(len(pairs)):\n            for j in range(i+1, len(pairs)):\n                product = pairs[i][0] * pairs[j][0] * pairs[i][1] * pairs[j][1]\n                if product > max_product:\n                    max_product = product\n        return max_product"
    },
    {
        "original": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)",
        "sampled": "\"\"\"\n        n = len(arr)\n        for i in range(n-2):\n            for j in range(i+1, n-1):\n                for k in range(j+1, n):\n                    if arr[i] + arr[j] + arr[k] == target:\n                        return True\n        return False"
    },
    {
        "original": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ",
        "sampled": "\"\"\"\n        if n == 1:\n            return 1\n        else:\n            return smartNumber(n-1) + smartNumber(n-2)\n    return smartNumber(n)"
    },
    {
        "original": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
        "sampled": "\"\"\"\n        def sum_of_divisors(n: int) -> int:\n            \"\"\"\n            Returns the sum of all divisors of a given number.\n            Args:\n            n (int): A positive integer.\n            Returns:\n            int: The sum of all divisors of the given number.\n            Example:\n            >>> sum_of_divisors(220)\n            284\n            \"\"\"\n            divisors = [1]\n            for i in range(2, int(n**0.5)+1):\n                if n % i"
    },
    {
        "original": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
        "sampled": "\"\"\"\n        return atan2(y, x)\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a prime number, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a palindrome, False otherwise."
    },
    {
        "original": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0",
        "sampled": "\"\"\"\n        count = 0\n        max_count = 0\n        for char in binary_string:\n            if char == '0':\n                count += 1\n            else:\n                count -= 1\n            max_count = max(max_count, count)\n        return max_count\n    max_diff = 0\n    for i in range(len(binary_string)):\n        for j in range(i+1, len(binary_string)+1):\n            diff = abs(count_ones(binary_string[i:j]) - count_ones(binary"
    },
    {
        "original": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum",
        "sampled": "\"\"\"\n        divisors_a = set()\n        divisors_b = set()\n        for i in range(1, a+1):\n            if a % i == 0:\n                divisors_a.add(i)\n        for i in range(1, b+1):\n            if b % i == 0:\n                divisors_b.add(i)\n        common_divisors = divisors_a.intersection(divisors_b)\n        return sum(common_divisors)\n    for i in"
    },
    {
        "original": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
        "sampled": "\"\"\"\n        if b == 0:\n            return 0\n        else:\n            return a + multiply_int(a, b-1)\n    return multiply_int(a, b)"
    },
    {
        "original": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t",
        "sampled": "\"\"\"\n        return [word for word in words if len(word) > n]\n    def get_longest_word(words: List[str]) -> str:\n        \"\"\"\n        Returns the longest word from a list of words.\n        Args:\n        - words: A list of strings.\n        Returns:\n        - The longest word from the list of words.\n        Example:\n        >>> get_longest_word(['python', 'programming', 'language'])\n        'programming'\n        \"\"\"\n        return max(words, key=len)"
    },
    {
        "original": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True",
        "sampled": "\"\"\"\n        n = len(square)\n        magic_sum = n * (n**2 + 1) // 2\n        # check rows\n        for row in square:\n            if sum(row)!= magic_sum:\n                return False\n        # check columns\n        for j in range(n):\n            col_sum = sum(square[i][j] for i in range(n))\n            if col_sum!= magic_sum:\n                return False\n        # check diagonals\n        diag_sum1 = sum(square[i][i] for"
    },
    {
        "original": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result",
        "sampled": "\"\"\"\n        if not li:\n            return None\n        if k <= 0:\n            return None\n        if k >= len(li):\n            return max(set(li), key=li.count)\n        freq = {}\n        for num in li:\n            freq[num] = freq.get(num, 0) + 1\n        max_freq = max(freq.values())\n        candidates = [num for num in freq if freq[num] == max_freq]\n        return max(candidates, key=lambda x"
    },
    {
        "original": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string",
        "sampled": "\"\"\"\n        vowels = set(\"aeiouAEIOU\")\n        s = list(s)\n        i, j = 0, len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1"
    },
    {
        "original": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str",
        "sampled": "\"\"\"\n        return ''.join(tup)\n    return [tup_string(tup) for tup in li]"
    },
    {
        "original": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
        "sampled": "\"\"\"\n        neg_sum = sum(filter(lambda x: x < 0, nums))\n        return neg_sum\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n: int) -> bool:\n        \"\"\""
    },
    {
        "original": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ",
        "sampled": "\"\"\"\n        for i in range(p):\n            if arr[-1] % 2 == 0:\n                arr[-1] //= 2\n            else:\n                arr[-1] = arr[-1] * 3 + 1\n        return \"EVEN\" if arr[-1] % 2 == 0 else \"ODD\""
    },
    {
        "original": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ",
        "sampled": "\"\"\"\n        return n * (2 * n - 1)\n    hexagonal_nums = [hexagonal_num(n) for n in range(1, max_num + 1)]\n    hexagonal_squares = [n ** 2 for n in hexagonal_nums]\n    return sum(hexagonal_squares)"
    },
    {
        "original": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total",
        "sampled": "\"\"\"\n        if m == 1:\n            return b\n        elif m == 2:\n            return b/2\n        elif m == 3:\n            return b*3\n        else:\n            return b/m + cal_electbill(m-1)\n    return [cal_electbill(m) for m in range(1, n+1)]"
    },
    {
        "original": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "sampled": "\"\"\"\n        count = 0\n        for num in arr:\n            if num == 0:\n                count += 1\n        return count / len(arr)\n    return [zero_count(arr), len(arr) - zero_count(arr)]"
    },
    {
        "original": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True",
        "sampled": "\"\"\"\n        while n > 0 and n % 2 == 0:\n            n //= 2\n        return n == 1\n    powers_of_two = set()\n    for i in range(1, int(max(li) ** 0.5) + 1):\n        powers_of_two.add(i ** 2)\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] in powers_of_two:\n                return True\n    return False"
    },
    {
        "original": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter",
        "sampled": "\"\"\"\n        return 2*3.141592653589793*r\n    circumference = circle_circumference(radius)\n    area = 3.141592653589793*r**2\n    return (circumference, area)"
    },
    {
        "original": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ",
        "sampled": "\"\"\"\n        return set(li[0]) | set(li[1])\n    result = []\n    for tup in li:\n        result.append(extract_singly(tup))\n    return result"
    },
    {
        "original": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums",
        "sampled": "\"\"\"\n        # Make a copy of the list to avoid modifying the original list\n        sorted_list = li.copy()\n        # Perform pancake sort\n        for i in range(len(sorted_list), 1, -1):\n            max_idx = sorted_list.index(max(sorted_list[:i]))\n            if max_idx!= i - 1:\n                sorted_list[:max_idx+1] = sorted_list[:max_idx+1][::-1]\n                sorted_list["
    },
    {
        "original": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(len(l1)):\n            if l1[i] == l2[i]:\n                count += 1\n        return count"
    },
    {
        "original": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ",
        "sampled": "\"\"\"\n        count = 0\n        for lst in tup:\n            if isinstance(lst, list):\n                count += 1\n        return count\n    count = 0\n    for tup in li:\n        if isinstance(tup, tuple) and find_lists(tup) == len(tup):\n            count += 1\n    return count"
    },
    {
        "original": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum",
        "sampled": "\"\"\"\n        n = len(arr)\n        total_diff = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                total_diff += abs(arr[i] - arr[j])\n        return total_diff"
    },
    {
        "original": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ",
        "sampled": "\"\"\"\n        max_diff = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n        return max_diff\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff >"
    },
    {
        "original": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])",
        "sampled": "\"\"\"\n        return sum(ord(c) for c in s)\n    return sum(ascii_value_string(s) for s in li)"
    },
    {
        "original": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]",
        "sampled": "\"\"\"\n        n = len(triangle)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = triangle[0][0]\n        for i in range(1, n):\n            for j in range(i+1):\n                if j == 0:\n                    dp[i][j] = dp[i-1][j] + triangle[i][j]\n                elif j == i:\n                    dp[i][j] = dp[i-1][j-1] + triangle[i]["
    },
    {
        "original": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
        "sampled": "\"\"\"\n        digits = [int(d) for d in str(n)]\n        max_sum = 0\n        for i in range(1, len(digits)):\n            left_sum = sum(digits[:i])\n            right_sum = sum(digits[i:])\n            if left_sum > right_sum and left_sum > max_sum:\n                max_sum = left_sum\n        return max_sum\n    return sum_digits_twoparts(a) - sum_digits_twoparts(b)"
    },
    {
        "original": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result",
        "sampled": "\"\"\"\n        n = len(arr)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if abs(arr[i] - arr[j]) == diff:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n    longest_subseq = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subseq = arr["
    },
    {
        "original": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False",
        "sampled": "\"\"\"\n        if start <= 0 <= end:\n            if num in range(start, end+1):\n                return True\n        return False\n    def find_next_B(start: int, end: int, num: int) -> int:\n        \"\"\"\n        Given a range of integers, this function finds the next number in the sequence that is a multiple of B. \n        If there is no such number, it returns -1.\n        Args:\n        start (int): The starting integer of the range.\n        end (int): The ending integer of the range."
    },
    {
        "original": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1",
        "sampled": "\"\"\"\n        if b == 0:\n            return False\n        while a!= b:\n            if a > b:\n                a = a - b\n            else:\n                b = b - a\n        return True\n    def is_square(n: int) -> bool:\n        \"\"\"\n        Returns True if the given number is a perfect square, False otherwise.\n        Args:\n        n (int): An integer.\n        Returns:\n        bool: True if the given number is a perfect square, False otherwise.\n        Example:\n        assert is_square(9)"
    },
    {
        "original": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n",
        "sampled": "\"\"\"\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n    def merge(left: List[int], right: List[int]) -> List[int]:\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append("
    },
    {
        "original": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
        "sampled": "\"\"\"\n        a, b, c = coefficients\n        x = -b / (2 * a)\n        y = a * x ** 2 + b * x + c\n        return (x, y)\n    vertex_sum = 0\n    for coefficients in coefficients_list:\n        vertex_sum += parabola_vertex(coefficients[0], coefficients[1], coefficients[2])[1]\n    return vertex_sum"
    },
    {
        "original": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result",
        "sampled": "\"\"\"\n        return [li[i] for i in range(len(li)) if i == specified_index]\n    return [specified_element(li, i) for i in range(len(li[0]))]"
    },
    {
        "original": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "sampled": "\"\"\"\n        return num ^ 0xAAAAAAAA  # toggle all even bits of the number\n    result = []\n    for num in li:\n        result.append(toggle_even_bits(num))\n    return result"
    },
    {
        "original": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result",
        "sampled": "\"\"\"\n        return tuple(map(int, t))\n    return tuple(map(tuple_int_str, li))"
    },
    {
        "original": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
        "sampled": "\"\"\"\n        if not li:\n            return []\n        result = []\n        count = 1\n        for i in range(1, len(li)):\n            if li[i] == li[i-1]:\n                count += 1\n            else:\n                result.append([count, li[i-1]])\n                count = 1\n        result.append([count, li[-1]])\n        return result"
    },
    {
        "original": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ",
        "sampled": "\"\"\"\n        if len(li) < k:\n            return -1\n        li.sort()\n        median = li[k//2]\n        diff = sum(abs(x-median) for x in li)\n        return diff//k"
    },
    {
        "original": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season",
        "sampled": "\"\"\"\n        if month == 'January':\n            if day <= 19:\n                return 'winter'\n            else:\n                return'spring'\n        elif month == 'February':\n            if day <= 18:\n                return 'winter'\n            else:\n                return'summer'\n        elif month == 'March':\n            if day <= 20:\n                return'spring'\n            else:\n                return 'autumn'\n        elif month == 'April':\n            if day <= 19:\n                return'spring'\n            else:\n                return '"
    },
    {
        "original": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ",
        "sampled": "\"\"\"\n        for i in range(n):\n            for j in range(n):\n                if i * a + j * b == n and i!= 0 and j!= 0:\n                    return (i, j)\n        return None\n    return [solution(a, b, n) for a, b, n in [(a1, b1, n1), (a2, b2, n2), (a3, b3, n3)]]"
    },
    {
        "original": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result",
        "sampled": "\"\"\"\n        return [x for x in li if x not in li2]\n    return [remove_elements(li, li2), remove_elements(li2, li)]"
    },
    {
        "original": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
        "sampled": "\"\"\"\n        if n <= 0:\n            return 0\n        else:\n            return n + sum_series(n-2)\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a prime number, False otherwise.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n: int) -> bool:"
    },
    {
        "original": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
        "sampled": "\"\"\"\n        n = len(sides)\n        s = sum(sides) / 2\n        area = (n * s**2) / (4 * (math.tan(math.pi / n)))\n        return area\n    def area_polygon(sides: List[int]) -> float:\n        \"\"\"\n        Calculates the area of a polygon given its sides.\n        Args:\n            sides: A list of integers representing the length of each side of the polygon.\n        Returns:\n            You are an exper Python programmer, and here is your"
    },
    {
        "original": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
        "sampled": "\"\"\"\n        divisors_sum = sum([i for i in range(1, num) if num % i == 0])\n        return divisors_sum == num\n    def areEquivalent(num1: int, num2: int) -> bool:\n        \"\"\"\n        Returns True if num1 and num2 are equivalent, False otherwise.\n        \"\"\"\n        return num1 == num2\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if areEquivalent(li[i], li"
    },
    {
        "original": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(len(s)):\n            if i == 0:\n                if s[i].isupper() and s[i+1:].islower():\n                    count += 1\n            elif i == len(s)-1:\n                if s[i].islower() and s[:i].isupper():\n                    count += 1\n            else:\n                if s[i].isupper() and s[i-1:i+1].islower():\n                    count += 1\n        return count"
    },
    {
        "original": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(len(li)):\n            for j in range(i+1, len(li)):\n                if (li[i] ^ li[j]) % 2 == 0:\n                    count += 1\n        return count"
    },
    {
        "original": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ",
        "sampled": "\"\"\"\n        if n <= 0:\n            return 1\n        else:\n            return 2**(n-1).bit_length()"
    },
    {
        "original": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ",
        "sampled": "\"\"\"\n        count = 0\n        for num in arr:\n            if num == x:\n                count += 1\n        return count\n    max_freq = 0\n    max_num = None\n    for num in arr:\n        freq = frequency(arr, num)\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num"
    },
    {
        "original": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
        "sampled": "\"\"\"\n        if n == 1:\n            return 1\n        else:\n            return n * get_pell(n-1)\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a prime number, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n: int) -> bool:"
    },
    {
        "original": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
        "sampled": "\"\"\"\n        start, end = li[0], li[1]\n        return sum(li[start:end+1])\n    for i in range(len(li)-1):\n        if li[i] > li[i+1]:\n            li[i], li[i+1] = li[i+1], li[i]\n    return sum_range_list(li, li[0], li[-1])"
    },
    {
        "original": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter",
        "sampled": "\"\"\"\n        return 5*s\n    return perimeter_pentagon"
    },
    {
        "original": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count",
        "sampled": "\"\"\"\n        count = 0\n        for char in s:\n            if char =='s':\n                count += 1\n        return count\n    return [count_occurance(s) for s in li]"
    },
    {
        "original": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))",
        "sampled": "\"\"\"\n        return ''.join(c for c in s if c.isalnum())\n    return [remove_splchar(s) for s in li]"
    },
    {
        "original": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result",
        "sampled": "\"\"\"\n        groups = {}\n        for pair in pairs:\n            if pair[0] not in groups:\n                groups[pair[0]] = [pair[1]]\n            else:\n                groups[pair[0]].append(pair[1])\n        return groups"
    },
    {
        "original": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0",
        "sampled": "\"\"\"\n        stack = []\n        for char in s:\n            if char in \"({[\":\n                stack.append(char)\n            elif char in \")}]\":\n                if not stack:\n                    return False\n                if char == \")\" and stack[-1] == \"(\":\n                    stack.pop()\n                elif char == \"}\" and stack[-1] == \"{\":\n                    stack.pop()\n                elif char == \"]\" and stack[-1] == \"[\":\n                    stack.pop()\n                else:\n                    return False"
    },
    {
        "original": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter",
        "sampled": "\"\"\"\n        return a + b + c\n    longest_side = 0\n    for triangle in triangles:\n        perimeter = perimeter_triangle(*triangle)\n        if perimeter > longest_side:\n            longest_side = perimeter\n    return longest_side"
    },
    {
        "original": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ",
        "sampled": "\"\"\"\n        def gcd(a: int, b: int) -> int:\n            \"\"\"\n            Returns the greatest common divisor of two integers using Euclid's algorithm.\n            \"\"\"\n            while b:\n                a, b = b, a % b\n            return a\n        lcm = 1\n        for i in range(1, min(a, b) + 1):\n            lcm = lcm * i // gcd(lcm, i)\n        return lcm, lcm * 2\n    for a in range(1, n + 1):"
    },
    {
        "original": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')",
        "sampled": "\"\"\"\n        for literal in literals:\n            if literal in s:\n                return True\n        return False\n    return [string_literals(li,'python language') for li in li]"
    },
    {
        "original": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ",
        "sampled": "\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    def is_prime(num: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False"
    },
    {
        "original": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
        "sampled": "\"\"\"\n        from math import radians, sin, cos, sqrt, atan2, asin\n        # approximate radius of earth in km\n        R = 6373.0\n        lat1 = radians(lat1)\n        lon1 = radians(lon1)\n        lat2 = radians(lat2)\n        lon2 = radians(lon2)\n        dlon = lon2 - lon1\n        dlat = lat2 - lat1\n        a = sin(dlat / 2)**2 + cos(lat1) * cos"
    },
    {
        "original": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ",
        "sampled": "\"\"\"\n        if not strings:\n            return \"\"\n        prefix = strings[0]\n        for string in strings[1:]:\n            while not string.startswith(prefix):\n                prefix = prefix[:-1]\n                if not prefix:\n                    return \"\"\n        return prefix\n    longest_prefix = common_prefix(words, min_length)\n    if longest_prefix:\n        return longest_prefix\n    else:\n        return \"\""
    },
    {
        "original": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
        "sampled": "\"\"\"\n        upper = []\n        lower = []\n        special = []\n        numeric = []\n        for char in s:\n            if char.isupper():\n                upper.append(char)\n            elif char.islower():\n                lower.append(char)\n            elif not char.isspace():\n                special.append(char)\n            elif char.isnumeric():\n                numeric.append(char)\n        return (upper, lower, special, numeric)\n    count = 0\n    for i in range(len(s)):"
    },
    {
        "original": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if abs(arr[i] - arr[j]) == k:\n                    count += 1\n        return count\n    max_count = 0\n    for i in range(len(arr)):\n        count = count_pairs(arr, k, i)\n        if count > max_count:\n            max_count = count\n    return max_count"
    },
    {
        "original": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum",
        "sampled": "\"\"\"\n        return [num for num in li if num > n]\n    return [greater_specificnum(li, n) for li in li]"
    },
    {
        "original": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus",
        "sampled": "\"\"\"\n        a, b, c = coefficients\n        x = -b / (2 * a)\n        y = a * x ** 2 + b * x + c\n        return (x, y)\n    focus_sum = 0\n    for i in range(len(coefficients)):\n        focus_sum += parabola_focus(coefficients[i][0], coefficients[i][1], coefficients[i][2])[1]\n    return focus_sum"
    },
    {
        "original": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')",
        "sampled": "\"\"\"\n        for literal in literals:\n            if literal in s:\n                return 'Matched!'\n        return 'Not Matched!'\n    return [check_literals(s, literals) for s in li]"
    },
    {
        "original": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
        "sampled": "\"\"\"\n        m, n = len(s1), len(s2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j],"
    },
    {
        "original": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;",
        "sampled": "\"\"\"\n        for i in range(int(n**0.5)+1):\n            if n % (i**2) == 0:\n                return True\n        return False\n    def prod_Square_all_squares(li: List[int]) -> bool:\n        \"\"\"\n        Returns True if the product of all the squares of the numbers in the given list is a perfect square, False otherwise.\n        Args:\n        li: A list of integers.\n        Returns:\n        A boolean value indicating whether the product of all the squares of the numbers in the given list is a"
    },
    {
        "original": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
        "sampled": "\"\"\"\n        n = len(li)\n        for i in range(n):\n            while 0 < li[i] <= n and li[li[i]-1]!= li[i]:\n                li[li[i]-1], li[i] = li[i], li[li[i]-1]\n        for i in range(n):\n            if li[i]!= i+1:\n                return i+1\n        return n+1"
    },
    {
        "original": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(x1, x2+1):\n            for j in range(y1, y2+1):\n                if i == x1 or i == x2 or j == y1 or j == y2:\n                    if (i-x1)*(j-y1) == (i-x2)*(j-y2):\n                        count += 1\n        return count"
    },
    {
        "original": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False",
        "sampled": "\"\"\"\n        days_in_month = {\n            \"January\": 31,\n            \"February\": 28,\n            \"March\": 31,\n            \"April\": 30,\n            \"May\": 31,\n            \"June\": 30,\n            \"July\": 31,\n            \"August\": 31,\n            \"September\": 30,\n            \"October\": 31,\n            \"November\": 30,\n            \"December\": 31\n        }\n        return days_in_month.get(month, 0)!= 0\n    def is_leap_year(year: int) ->"
    },
    {
        "original": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ",
        "sampled": "\"\"\"\n        has_letter = False\n        has_number = False\n        for char in s:\n            if char.isalpha():\n                has_letter = True\n            elif char.isdigit():\n                has_number = True\n        return has_letter and has_number\n    count = 0\n    for s in li:\n        if check_String(s):\n            count += 1\n    return count"
    },
    {
        "original": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ",
        "sampled": "\"\"\"\n        return tuple(set(t))\n    return [remove_tuple(t) for t in li]"
    },
    {
        "original": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
        "sampled": "\"\"\"\n        decimal = 0\n        power = 0\n        while n!= 0:\n            dec = n % 10\n            decimal += dec * pow(8, power)\n            n //= 10\n            power += 1\n        return decimal\n    def octal_To_Decimal(n: int) -> int:\n        \"\"\"\n        Converts octal number to decimal number.\n        Args:\n            n: An integer representing an octal number.\n            Your code should pass these tests:\n            assert octal_To_Decimal(25) == 21\nassert"
    },
    {
        "original": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res",
        "sampled": "\"\"\"\n        left, right = 0, n-1\n        while left <= right:\n            mid = (left + right) // 2\n            if li[mid] == x:\n                while mid > 0 and li[mid-1] == x:\n                    mid -= 1\n                return mid\n            elif li[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n    count = 0\n    for i in range(len(li)):\n        for j in range(i+1, len"
    },
    {
        "original": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ",
        "sampled": "\"\"\"\n        return [tup for tup in li if len(tup)!= k]"
    },
    {
        "original": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
        "sampled": "\"\"\"\n        result = 1\n        for i in range(len(t1)):\n            result *= t1[i] ** t2[i]\n        return (result, )\n    return [exponentio(t1, t2) for t1, t2 in zip(li1, li2)]"
    },
    {
        "original": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ",
        "sampled": "\"\"\"\n        a, b = sides\n        return (a**2 + b**2 - 2*a*b*math.cos(math.pi/3))**0.5\n    max_area = 0\n    max_triangle = None\n    for triangle in triangles:\n        sides = sorted(triangle)\n        if sides[0] + sides[1] > sides[2]:\n            if is_inscribed(sides[0], sides[1], sides[2]):\n                area = 0.5 * sides[0] * sides[1]"
    },
    {
        "original": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ",
        "sampled": "\"\"\"\n        power = 0\n        while num >= 2:\n            num //= 2\n            power += 1\n        return 2 ** (power - 1)\n    def is_palindrome(s: str) -> bool:\n        \"\"\"\n        Returns True if the given string is a palindrome, False otherwise.\n        \"\"\"\n        return s == s[::-1]\n    result = []\n    for s in li:\n        if is_palindrome(s):\n            result.append(s)\n        else:\n            power = highest_Power_of"
    },
    {
        "original": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result",
        "sampled": "\"\"\"\n        max_val = max(li)\n        return [i for i, val in enumerate(li) if val == max_val]"
    },
    {
        "original": "def chkList(lst): \r\n    return len(set(lst)) == 1",
        "sampled": "\"\"\"\n        if len(li) == 0:\n            return True\n        first = li[0]\n        for i in range(1, len(li)):\n            if li[i]!= first:\n                return False\n        return True\n    count = 0\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            sub_li = li[i:j]\n            if chkList(sub_li):\n                count += 1\n    return count"
    },
    {
        "original": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "sampled": "\"\"\"\n        return word[::2]\n    return [remove_even(word) for word in words]"
    },
    {
        "original": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ",
        "sampled": "\"\"\"\n        hamming_distance = 0\n        while xor:\n            hamming_distance += xor & 1\n            xor >>= 1\n        return hamming_distance\n    hamming_distance = hamming_distance(a, b)\n    if hamming_distance == 0:\n        return 0.0\n    return 1.0 / hamming_distance"
    },
    {
        "original": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ",
        "sampled": "\"\"\"\n        count = 0\n        for char in s:\n            if char == c:\n                count += 1\n        return count\n    counts = {}\n    for s in li:\n        for c in s:\n            if c in counts:\n                counts[c] += 1\n            else:\n                counts[c] = 1\n    result = []\n    for s in li:\n        for c in s:\n            if counts[c] == 1:\n                result.append(s)\n                break\n    return result"
    },
    {
        "original": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ",
        "sampled": "\"\"\"\n        def merge(left: List[int], right: List[int]) -> Tuple[List[int], int]:\n            \"\"\"\n            Helper function to merge two sorted lists and count the number of inversions.\n            Args:\n            left (List[int]): A sorted list of integers.\n            right (List[int]): A sorted list of integers.\n            Returns:\n            Tuple[List[int], int]: A tuple containing the merged sorted list and the number of inversions.\n            \"\"\"\n            i, j = 0, 0\n            inversions ="
    },
    {
        "original": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "sampled": "\"\"\"\n        new_tuple = ()\n        for i in range(len(t)):\n            if i == 0:\n                new_tuple += (t[i],)\n            elif t[i-1][-1] == t[i][0]:\n                new_tuple += (t[i][1:] + t[i-1][-1],)\n            else:\n                new_tuple += (t[i],)\n        return new_tuple"
    },
    {
        "original": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]",
        "sampled": "\"\"\"\n        n = len(s)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == s[n - j]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])"
    },
    {
        "original": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)",
        "sampled": "\"\"\"\n        import re\n        pattern = r'^-?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?'\n        match = re.match(pattern, s)\n        if match:\n            return float(s)\n        else:\n            return False\n    result = []\n    for num in li:\n        if is_decimal(num):\n            result.append(num)\n        else:\n            result.append(round(num, 2))\n    return result"
    },
    {
        "original": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap",
        "sampled": "\"\"\"\n        if i == 0:\n            return [heap[i], heap[i+1]]\n        elif i == len(heap)-1:\n            return [heap[i-1], heap[i]]\n        else:\n            if heap[i] < heap[(i-1)//2]:\n                return [heap[i], heap[i+1]]\n            else:\n                return [heap[(i-1)//2], heap[i]]\n    def heap_pop(heap: List[int]) -> int:"
    },
    {
        "original": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)",
        "sampled": "\"\"\"\n        import re\n        pattern = r\"[a-zA-Z0-9]+\"\n        return bool(re.match(pattern, s))\n    def is_allowed_specific_char(s: str) -> bool:\n        \"\"\"\n        This function takes a string as input and returns True if the string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex. \n        Your code should pass these tests:\n        assert is_allowed_specific_char(\"ABCDEFabcdef123450\") =="
    },
    {
        "original": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(1, num+1):\n            if (i >> 1) & 1 == 1 and (i >> 2) & 1 == 1:\n                count += 1\n        return count\n    count = 0\n    for num in li:\n        if is_Num(num):\n            count += 1\n    return count"
    },
    {
        "original": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum",
        "sampled": "\"\"\"\n        return sum([i**4 for i in range(1, n+1)])"
    },
    {
        "original": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        return tuple(s1 + s2 for s1, s2 in zip(t1, t2))\n    def concatenate_strings(t1: tuple, t2: tuple) -> tuple:\n        \"\"\"\n        Concatenates two tuple strings.\n        Args:\n            t1: A tuple of strings.\n            t2: A tuple of strings.\n        Returns:\n            A tuple of strings that is the concatenation of t1 and t2.\n        Example:\n        >>> concatenate_strings((\"Manjeet\", \"N"
    },
    {
        "original": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
        "sampled": "\"\"\"\n        return radians * 180 / math.pi\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a prime number, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a palindrome, False otherwise"
    },
    {
        "original": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]",
        "sampled": "\"\"\"\n        decoded = []\n        i = 0\n        while i < len(li):\n            if isinstance(li[i], int):\n                decoded.append(li[i])\n                i += 1\n            else:\n                count = li[i]\n                char = li[i+1]\n                decoded.extend([char]*count)\n                i += 2\n        return decoded"
    },
    {
        "original": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ",
        "sampled": "\"\"\"\n        for i in range(len(li1)):\n            if isinstance(li1[i], list) and isinstance(li2[i], list):\n                if set(li1[i]).issubset(set(li2[i])) and check_subset_list(li1[i+1:], li2[i+1:]):\n                    return True\n            elif li1[i] == li2[i]:\n                return True\n        return False\n    for i in range(len(li)):\n        for j in"
    },
    {
        "original": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'",
        "sampled": "\"\"\"\n        seen = set()\n        for char in s:\n            if char in seen:\n                return char\n            seen.add(char)\n        return None\n    result = []\n    for s in li:\n        repeated_char = first_Repeated_Char(s)\n        if repeated_char is not None:\n            result.append(s.replace(repeated_char, \"\", 1))\n        else:\n            result.append(s)\n    return result"
    },
    {
        "original": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1",
        "sampled": "\"\"\"\n        return abs(a-b)"
    },
    {
        "original": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ",
        "sampled": "\"\"\"\n        if len(t) < k:\n            raise ValueError(\"Tuple length is less than k\")\n        sorted_t = sorted(t)\n        return tuple(sorted_t[:k] + sorted_t[-k:])\n    return [extract_min_max(t, k) for t in li]"
    },
    {
        "original": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))",
        "sampled": "\"\"\"\n        special_chars = [' ', ',', '.']\n        words = s.split()\n        for i in range(len(words)):\n            if len(words[i]) > n:\n                words[i] = words[i][:n] + ':' + words[i][n+1:]\n        return''.join(words)"
    },
    {
        "original": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even",
        "sampled": "\"\"\"\n        for num in li:\n            if num % 2 == 0:\n                return num\n        return None\n    return [first_even(sublist) for sublist in li]"
    },
    {
        "original": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
        "sampled": "\"\"\"\n        if len(t) == 0:\n            return True\n        first_type = type(t[0])\n        for element in t:\n            if type(element)!= first_type:\n                return False\n        return True\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:"
    },
    {
        "original": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
        "sampled": "\"\"\"\n        if n == 1:\n            return True\n        if li[0] == li[1]:\n            return is_majority(li[1:], n-1, x)\n        else:\n            return is_majority(li[1:], n-1, x) or is_majority(li[1:], n-2, x) if li[0]!= x else False\n    count = 0\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            if is_"
    },
    {
        "original": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ",
        "sampled": "\"\"\"\n        count = 0\n        while num:\n            count += num & 1\n            num >>= 1\n        return count\n    max_bits = 0\n    max_bits_num = None\n    for num in li:\n        bits = count_Set_Bits(num)\n        if bits > max_bits:\n            max_bits = bits\n            max_bits_num = num\n    return max_bits_num"
    },
    {
        "original": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ",
        "sampled": "\"\"\"\n        if left > right:\n            return None\n        mid = (left + right) // 2\n        if nums[mid] > nums[right]:\n            return find_Min(nums, left, mid-1)\n        elif nums[mid] < nums[right]:\n            return find_Min(nums, mid+1, right)\n        else:\n            return nums[mid]\n    n = len(nums)\n    return find_Min(nums, 0, n-1)"
    },
    {
        "original": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result",
        "sampled": "\"\"\"\n        return ''.join([s[i] for i in range(len(s)) if i % 2 == 0 or i == len(s) - 1])\n    return [odd_values_string(s) for s in li]"
    },
    {
        "original": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
        "sampled": "\"\"\"\n        return min(nums)\n    return sum(min_of_three(nums[i], nums[j], nums[k]) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))"
    },
    {
        "original": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False",
        "sampled": "\"\"\"\n        mask = (1 << (end - start + 1)) - 1\n        return all((x & mask) == 0 for x in range(start, end+1))\n    max_len = 0\n    max_start = 0\n    curr_len = 0\n    curr_start = 0\n    for i in range(len(li)):\n        if li[i] == 0:\n            curr_len = 0\n            curr_start = i + 1\n        else:\n            curr_len += 1\n            if curr_len"
    },
    {
        "original": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr",
        "sampled": "\"\"\"\n        neg_nums = []\n        pos_nums = []\n        for num in arr:\n            if num < 0:\n                neg_nums.append(num)\n            else:\n                pos_nums.append(num)\n        return neg_nums + pos_nums"
    },
    {
        "original": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2",
        "sampled": "\"\"\"\n        return s.replace(' ', ch)\n    return [replace_blank(s, ch) for s in li]"
    },
    {
        "original": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))",
        "sampled": "\"\"\"\n        n = len(triangle)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = triangle[0][0]\n        for i in range(1, n):\n            for j in range(i+1):\n                if j == 0:\n                    dp[i][j] = dp[i-1][j] + triangle[i][j]\n                elif j == i:\n                    dp[i][j] = dp[i-1][j-1] + triangle[i]["
    },
    {
        "original": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest",
        "sampled": "\"\"\"\n        if n > len(dataset):\n            raise ValueError(\"n cannot be greater than the length of the dataset\")\n        sorted_dataset = sorted(dataset, reverse=True)\n        return sorted_dataset[:n]\n    mean = sum(dataset) / len(dataset)\n    variance = sum((x - mean) ** 2 for x in dataset) / len(dataset)\n    std_dev = math.sqrt(variance)\n    if std_dev == 0:\n        raise"
    },
    {
        "original": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface",
        "sampled": "\"\"\"\n        return 3.141592653589793 * radius ** 2\n    return sum(lateralsuface_cylinder(radius, height) for radius, height in li)"
    },
    {
        "original": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume",
        "sampled": "\"\"\"\n        return side**3\n    def surface_area_cube(side: int) -> int:\n        \"\"\"\n        Calculates the surface area of a cube.\n        Args:\n            side (int): The length of one side of the cube.\n            Your code should pass these tests:\n            assert surface_area_cube(3)==18\nassert surface_area_cube(2)==12\nassert surface_area_cube(5)==50\n        \"\"\"\n        return 6*side**2\n    def volume_sphere(radius: int) -> int"
    },
    {
        "original": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ",
        "sampled": "\"\"\"\n        return num | 1\n    return [even_bit_set_number(num) for num in li]"
    },
    {
        "original": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;",
        "sampled": "\"\"\"\n        if side <= 0:\n            return -1\n        elif side == 1:\n            return 1\n        else:\n            return side*(side-1)*(side-2)//6\n    max_triangles = 0\n    for i in range(len(triangles)):\n        for j in range(i+1, len(triangles)):\n            if is_equilateral(triangles[i], triangles[j]):\n                max_triangles = max(max_triangles, No_of_Triangle(triangles[i],"
    },
    {
        "original": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ",
        "sampled": "\"\"\"\n        occurrences = {}\n        for record in records:\n            if record[1] in occurrences:\n                occurrences[record[1]] += 1\n            else:\n                occurrences[record[1]] = 1\n        return occurrences"
    },
    {
        "original": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                if s[i:j]!= \"\":\n                    count += 1\n        return count\n    max_count = 0\n    max_substring = \"\"\n    for substring in substrings:\n        count = count_non_empty_substrings(substring)\n        if count > max_count:\n            max_count = count\n            max_substring = substring\n    return max_substring"
    },
    {
        "original": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]",
        "sampled": "\"\"\"\n        if n == 1:\n            return m - 1\n        else:\n            return (m - 1) * get_total_number_of_sequences(n - 1, m) + (2 * m - 1) * get_total_number_of_sequences(n - 2, m)\n    count = 0\n    for i in range(len(li)):\n        for j in range(i + 1, len(li) + 1):\n            if li[i:j] == sorted(li[i:j]) and all(get_"
    },
    {
        "original": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n",
        "sampled": "\"\"\"\n        li[-1] = li2\n        return li"
    },
    {
        "original": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d",
        "sampled": "\"\"\"\n        if dim1*dim2*dim3!= dim**3:\n            return []\n        else:\n            return [[['*' for _ in range(dim3)] for _ in range(dim2)] for _ in range(dim1)]"
    },
    {
        "original": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total",
        "sampled": "\"\"\"\n        return len(s)\n    count = 0\n    for s in li:\n        count += count_charac(s)\n    return count"
    },
    {
        "original": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ",
        "sampled": "\"\"\"\n        sorted_list = sorted(li, key=lambda x: (x[0], x[1]))\n        return sorted_list"
    },
    {
        "original": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ",
        "sampled": "\"\"\"\n        i = 1\n        while True:\n            if i**2 > n:\n                return i**2\n            i += 1"
    },
    {
        "original": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum",
        "sampled": "\"\"\"\n        n = len(arr)\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = arr[i]\n            for j in range(i):\n                if arr[j] < arr[i]:\n                    dp[i] = max(dp[i], dp[j] + arr[i])\n        return max(dp)"
    },
    {
        "original": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
        "sampled": "\"\"\"\n        if n < 2:\n            return n\n        x = n\n        while True:\n            y = (x + n/x) / 2\n            if y == x:\n                return x\n            x = y"
    },
    {
        "original": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
        "sampled": "\"\"\"\n        n = len(s)\n        if n == 0:\n            return 0\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if s[i] == s[j]:\n                    dp[i] = dp[j] + 1\n        return max(dp)\n    longest_palindrome = 0\n    for s in li:\n        length = lps(s)\n        if length > longest_palindrome:\n            longest_palindrome ="
    },
    {
        "original": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "sampled": "\"\"\"\n        if n == 1:\n            return 1\n        else:\n            return 1/n + harmonic_sum(n-1)\n    def harmonic_mean(n: int) -> float:\n        \"\"\"\n        Calculates the harmonic mean of n-1 and n.\n        Your code should pass these tests:\n        assert harmonic_mean(7) == 2.5928571428571425\nassert harmonic_mean(4) == 2.083333333333333\nassert harmonic_mean(19) == 3.547739657143682"
    },
    {
        "original": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
        "sampled": "\"\"\"\n        return list(set(li1) & set(li2))\n    def find_intersection_array(li1: List[int], li2: List[int]) -> List[int]:\n        \"\"\"\n        This function takes in two lists of integers and returns a list of integers that represent the intersection of the two lists.\n        Your code should pass these tests:\n        assert find_intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9"
    },
    {
        "original": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ",
        "sampled": "\"\"\"\n        count = 0\n        for element in tup:\n            if element == element_to_count:\n                count += 1\n        return count\n    counts = []\n    for tup in li:\n        counts.append(count_X(tup, element_to_count))\n    return counts"
    },
    {
        "original": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list",
        "sampled": "\"\"\"\n        return [elem] + li"
    },
    {
        "original": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ",
        "sampled": "\"\"\"\n        r = abs(z)\n        theta = cmath.phase(z)\n        return (r, theta)\n    result = []\n    for z in li:\n        if isinstance(z, complex):\n            r, theta = convert(z)\n            if theta == 0:\n                result.append(r)\n            else:\n                result.append(r * cmath.exp(1j * theta))\n        else:\n            result.append(z)\n    return result"
    },
    {
        "original": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr",
        "sampled": "\"\"\"\n        count = 0\n        for item in li:\n            if isinstance(item, int):\n                count += 1\n        return count\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if a given integer is prime, False otherwise.\n        Args:\n        - n: An integer to check for primality.\n        Returns:\n        - True if n is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1"
    },
    {
        "original": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list",
        "sampled": "\"\"\"\n        words = s.split()\n        return [word for word in words if word[0] in ['a', 'e']]\n    return [words_ae(s) for s in li]"
    },
    {
        "original": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r",
        "sampled": "\"\"\"\n        if n == 1:\n            return [(c,) for c in colours]\n        else:\n            result = []\n            for c in colours:\n                for cc in combinations_colors(colours, n-1):\n                    result.append((c,) + cc)\n            return result"
    },
    {
        "original": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr",
        "sampled": "\"\"\"\n        count = 0\n        for num in range(2, n):\n            if all(num % i!= 0 for i in range(2, int(num ** 0.5) + 1)):\n                count += 1\n        return count\n    count = 0\n    for num in li:\n        if isinstance(num, int):\n            count += count_Primes_nums(num)\n    return count"
    },
    {
        "original": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)",
        "sampled": "\"\"\"\n        a, b = b, a\n    return a, b"
    },
    {
        "original": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd",
        "sampled": "\"\"\"\n        return len(list(filter(lambda x: x%2!=0, li)))"
    },
    {
        "original": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        # implementation goes here\n    def evaluate_function(x: int) -> int:\n        \"\"\"\n        Given an integer x, this function evaluates the function f(x) = x^2 + 3x + 7 and returns the result.\n        Args:\n        x (int): The input value for the function.\n        Returns:\n        int: The result of the function evaluated at x.\n        \"\"\"\n        return x**2 + 3*x + 7\n    def evaluate_function_derivative(x: int) -> int:\n        \"\"\"\n        Given an"
    },
    {
        "original": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "sampled": "\"\"\"\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n        def find_nth_prime(n):\n            count = 0\n            num = 2\n            while count < n:\n                if is_prime(num):\n                    count += 1\n                num += 1\n            return num - 1\n        return find_nth_prime(n)\n    def is"
    },
    {
        "original": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        quotient = 0\n        for i in range(len(t1)):\n            quotient += t1[i] / t2[i]\n        return (quotient,)\n    result = []\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if division_elements(li[i], li[j]) == (li[i][0] / li[j][0], li[i][1] / li[j][1], li[i][2"
    },
    {
        "original": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]",
        "sampled": "\"\"\"\n        mid = len(li) // 2\n        return li[:mid], li[mid:]\n    for i, s in enumerate(li):\n        for j in range(1, len(s)):\n            if s[:j] in li[:i] and s[j:] in li[:i]:\n                return i, j\n    return -1, -1"
    },
    {
        "original": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d",
        "sampled": "\"\"\"\n        result = a.copy()\n        result.update(b)\n        return result\n    def merge_dicts(a: Dict[str, int], b: Dict[str, int]) -> Dict[str, int]:\n        \"\"\"\n        Merges two dictionaries into a new dictionary.\n        Your code should pass these tests:\n        assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'a': 100, 'b': 200, 'x': 300, 'y': 200"
    },
    {
        "original": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
        "sampled": "\"\"\"\n        return age*7\n    def dog_bark_count(age: int) -> int:\n        \"\"\"\n        Returns the number of times the word \"woof\" appears in the string \"woof woof woof\".\n        Parameters:\n        age (int): The age of the dog.\n        Returns:\n        int: The number of times the word \"woof\" appears in the string \"woof woof woof\".\n        Example:\n        >>> dog_bark_count(12)\n        3\n        >>> dog_"
    },
    {
        "original": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]",
        "sampled": "\"\"\"\n        if n <= 0:\n            raise ValueError(\"n must be a positive integer\")\n        if len(li) < n:\n            return []\n        return [li[i:i+n] for i in range(0, len(li), n)]"
    },
    {
        "original": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA",
        "sampled": "\"\"\"\n        return side_length**2"
    },
    {
        "original": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ",
        "sampled": "\"\"\"\n        return sum([i**2 for i in range(1, n*2, 2)])"
    },
    {
        "original": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ",
        "sampled": "\"\"\"\n        return (n * (n + 1)) // 2\n    return sorted(stars, key=lambda x: (get_star_num(x), x))"
    },
    {
        "original": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)",
        "sampled": "\"\"\"\n        return ord(char)\n    def is_palindrome(word: str) -> bool:\n        \"\"\"\n        Returns True if the given word is a palindrome, False otherwise.\n        \"\"\"\n        return word == word[::-1]\n    def is_anagram(word1: str, word2: str) -> bool:\n        \"\"\"\n        Returns True if the two given words are anagrams of each other, False otherwise.\n        \"\"\"\n        return sorted(word1) == sorted(word2)\n    def find_closest_"
    },
    {
        "original": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum",
        "sampled": "\"\"\"\n        if len(li) < i:\n            return 0\n        return sum(li[i::i])\n    return sum(num for num in li if is_even_and_even_index(li, num) == num)"
    },
    {
        "original": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ",
        "sampled": "\"\"\"\n        return sum([i**5 for i in range(2, n*2+1, 2)])"
    },
    {
        "original": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ",
        "sampled": "\"\"\"\n        return [record[2] for record in records]\n    return [test_rear_extraction(records) for records in records]"
    },
    {
        "original": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        return tuple(a[i] - b[i] for i in range(len(a)))\n    return [subtract_elements(tup1, tup2) for tup1 in li1 for tup2 in li2]"
    },
    {
        "original": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ",
        "sampled": "\"\"\"\n        numerator = 1\n        denominator = 1\n        for i in range(k):\n            numerator *= (n - i)\n            denominator *= (i + 1)\n        return numerator // denominator\n    def even_binomial_Coeff_Sum_Formula(n: int) -> int:\n        \"\"\"\n        Returns the sum of even index binomial coefficients of the nth row of Pascal's triangle.\n        Args:\n        n (int): The row number of Pascal's triangle.\n        Returns:"
    },
    {
        "original": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1",
        "sampled": "\"\"\"\n        if start > end:\n            return start\n        mid = (start + end) // 2\n        if li[mid] == target:\n            if mid == start or li[mid-1]!= target:\n                return mid\n            else:\n                return get_Position(li, start, mid-1)\n        elif li[mid] > target:\n            return get_Position(li, start, mid-1)\n        else:\n            return get_Position(li, mid+1, end)"
    },
    {
        "original": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume",
        "sampled": "\"\"\"\n        return 3.141592653589793 * radius ** 2 * height\n    def volume_sphere(radius: float, height: float) -> float:\n        \"\"\"\n        Calculates the volume of a sphere.\n        Args:\n        radius (float): The radius of the sphere.\n        height (float): The height of the sphere.\n        Returns:\n        float: The volume of the sphere.\n        Your code should pass these tests:\n        assert volume_sphere(10,5)==4188.790204786391\nassert volume"
    },
    {
        "original": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result",
        "sampled": "\"\"\"\n        filtered_dict = {}\n        for key, value in d.items():\n            if value == v:\n                filtered_dict[key] = value\n        return filtered_dict\n    filtered_dict = {}\n    for key, value in d.items():\n        if value == v:\n            filtered_dict[key] = value\n        else:\n            filtered_dict[key] = dict_filter(d[key], v)\n    return filtered_dict"
    },
    {
        "original": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ",
        "sampled": "\"\"\"\n        if isinstance(t, tuple):\n            return len(t)\n        else:\n            return 0"
    },
    {
        "original": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ",
        "sampled": "\"\"\"\n        return n * (2 * n - 1)\n    def is_num_triangular(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a triangular number, False otherwise.\n        \"\"\"\n        return ((8 * n + 1) ** 0.5 - 1) / 2 % 1 == 0\n    def is_num_pentagonal(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a pentagonal number, False otherwise.\n        \"\"\"\n        return ((24 * n + 1) ** 0.5 + 1)"
    },
    {
        "original": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
        "sampled": "\"\"\"\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return True, mid\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False, -1\n    for i, num in enumerate(arr):\n        found, index = sequential_search(arr, num)\n        if found:\n            return i\n    return -1"
    },
    {
        "original": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True",
        "sampled": "\"\"\"\n        return len(li) == len(set(li))\n    return all(is_unique(li) for li in li)"
    },
    {
        "original": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
        "sampled": "\"\"\"\n        return list(map(lambda x, y: x - y, li1, li2))"
    },
    {
        "original": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True",
        "sampled": "\"\"\"\n        for digit in str(num):\n            if int(digit) > int(num):\n                return False\n        return True\n    return [num for num in li if is_valid(num)]"
    },
    {
        "original": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element",
        "sampled": "\"\"\"\n        return all(elem == s for elem in li)\n    for i, elem in enumerate(li):\n        if isinstance(elem, list):\n            if not check_element(elem, s):\n                return False\n        elif elem!= s:\n            return False\n    return True"
    },
    {
        "original": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "sampled": "\"\"\"\n        for i in range(len(s)-2):\n            if s[i] == 'a' and s[i+1] == 'b' and s[i+2] == 'b':\n                return True\n        return False\n    count = 0\n    for s in li:\n        if text_match_two_three(s):\n            count += 1\n    return count"
    },
    {
        "original": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
        "sampled": "\"\"\"\n        n = len(arr)\n        if k > n:\n            return 0\n        max_sum = float('-inf')\n        for i in range(n - k + 1):\n            sub_arr = arr[i:i+k]\n            sub_arr_sum = sum(sub_arr)\n            max_sum = max(max_sum, sub_arr_sum)\n        return max_sum"
    },
    {
        "original": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)",
        "sampled": "\"\"\"\n        return sum([i**2 for i in range(2, n*2+1, 2)])"
    },
    {
        "original": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
        "sampled": "\"\"\"\n        for i in range(1, p):\n            if (a * i) % p == 1:\n                return i\n        return -1\n    result = []\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if modular_inverse(li[i], li[j], p)!= -1:\n                result.append(li[i])\n                result.append(li[j])\n    return result"
    },
    {
        "original": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ",
        "sampled": "\"\"\"\n        days = 0\n        for month in range(1, 13):\n            if month == 2:\n                if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                    days += 29\n                else:\n                    days += 28\n            elif month in [4, 6, 9, 11]:\n                days += 30\n            else:\n                days += 31\n        return days\n    for year in range(start_year, end_year+1):\n        for month in range(1, 13):\n            days = odd"
    },
    {
        "original": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
        "sampled": "\"\"\"\n        max_len = 0\n        max_list = []\n        for lst in lists:\n            if len(lst) > max_len:\n                max_len = len(lst)\n                max_list = lst\n        return (max_len, max_list)"
    },
    {
        "original": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
        "sampled": "\"\"\"\n        if n == 1:\n            return k\n        elif n == 2:\n            return k * (k - 1)\n        else:\n            return (k - 1) * (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k))\n    return count_no_of_ways(n, k)"
    },
    {
        "original": "def find(n,m):  \r\n    q = n//m \r\n    return (q)",
        "sampled": "\"\"\"\n        if b == 0:\n            raise ZeroDivisionError(\"division by zero\")\n        return a // b\n    result = nums[0]\n    for i in range(1, len(nums)):\n        result = quotient(result, nums[i])\n    return result"
    },
    {
        "original": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s",
        "sampled": "\"\"\"\n        return (a**2 + b**2)**0.5\n    def otherside_rightangle(a: int, b: int) -> float:\n        \"\"\"\n        Given the lengths of two sides of a right angled triangle, this function returns the length of the third side.\n        Args:\n            a (int): The length of one side of the right angled triangle.\n            b (int): The length of the other side of the right angled triangle.\n        Returns:\n            float: The length of the third side of the right angled triangle.\n        Example"
    },
    {
        "original": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)",
        "sampled": "\"\"\"\n        max_val = lst[0]\n        for val in lst:\n            if val > max_val:\n                max_val = val\n        return max_val\n    return [max_val(lst) for lst in li]"
    },
    {
        "original": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
        "sampled": "\"\"\"\n        divisors = [1]\n        for i in range(2, n//2 + 1):\n            if n % i == 0:\n                divisors.append(i)\n        divisors.append(n)\n        return sum(divisors)\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if sum_div(li[i]) == sum_div(li[j]):\n                return True\n    return False"
    },
    {
        "original": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ",
        "sampled": "\"\"\"\n        inv_count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] > arr[j]:\n                    inv_count += 1\n        return inv_count\n    def get_Inv_Count_Recursive(arr: List[int], index: int) -> int:\n        \"\"\"\n        This function takes in an array and an index and recursively counts the number of inversions in the array. \n        Your code should pass these tests:\n        assert get"
    },
    {
        "original": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ",
        "sampled": "\"\"\"\n        flattened = []\n        for item in li:\n            if isinstance(item, list):\n                flattened.extend(flatten_list(item))\n            else:\n                flattened.append(item)\n        return flattened\n    nested_list = flatten_list(li)\n    sorted_list = sorted(nested_list)\n    return sorted_list"
    },
    {
        "original": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result",
        "sampled": "\"\"\"\n        if not li1 or not li2:\n            return []\n        if li1[0] not in li2:\n            return []\n        return [x for x in li1 if x in li2]"
    },
    {
        "original": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
        "sampled": "\"\"\"\n        max_score = float('-inf')\n        max_name = ''\n        for name, score in scores:\n            if score > max_score:\n                max_score = score\n                max_name = name\n        return (max_name, max_score)"
    },
    {
        "original": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(2**(2*n)):\n            binary = bin(i)[2:].zfill(2*n)\n            if sum(int(binary[j]) for j in range(n)) == sum(int(binary[-j-1]) for j in range(n)):\n                count += 1\n        return float(count)"
    },
    {
        "original": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
        "sampled": "\"\"\"\n        if not isinstance(d, dict):\n            return 0\n        return 1 + max(dict_depth(v) for v in d.values() if isinstance(v, dict))\n    return sum(dict_depth(d) for d in li)"
    },
    {
        "original": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
        "sampled": "\"\"\"\n        return num & -num\n    def count_Set_Bit_Number(num: int) -> int:\n        \"\"\"\n        Returns the count of set bits in the binary representation of the given number.\n        Args:\n        num (int): An integer\n        Returns:\n        int: The count of set bits in the binary representation of the given number.\n        Example:\n        count_Set_Bit_Number(6) -> 1\n        count_Set_Bit_Number(10) -> 2\n        count_Set_Bit_Number(18) -> 2"
    },
    {
        "original": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(len(li)):\n            for j in range(i+1, len(li)):\n                if li[i] > li[j]:\n                    count += 1\n        return count % 2 == 0\n    count = 0\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i]!= li[j]:\n                if count_inversions(li[i], li[j]) == solve_count:\n                    count"
    },
    {
        "original": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ",
        "sampled": "\"\"\"\n        n = len(li)\n        if rotations == 0:\n            return li[index]\n        rotations = rotations % n\n        return li[index] if rotations <= index else li[index-n+rotations]\n    return [find_Element(li, rotations, index) for index in indices]"
    },
    {
        "original": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()",
        "sampled": "\"\"\"\n        for word in words:\n            if word.startswith(letter):\n                return (letter, word)\n        return (None, None)\n    matches = []\n    for word in words:\n        match = start_withp(words)\n        if match[0] is not None:\n            matches.append(match[1])\n    return matches"
    },
    {
        "original": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
        "sampled": "\"\"\"\n        n = len(li)\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if li[i-1] < li[j-1]:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + li[i-1])\n                else:\n                    dp[i][j] = dp[i-"
    },
    {
        "original": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
        "sampled": "\"\"\"\n        return tup"
    },
    {
        "original": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result",
        "sampled": "\"\"\"\n        if len(li1) < num or len(li2) < num:\n            return []\n        li1.sort(reverse=True)\n        li2.sort(reverse=True)\n        return [li1[i]*li2[i] for i in range(num)]"
    },
    {
        "original": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ",
        "sampled": "\"\"\"\n        if a > b:\n            return a\n        else:\n            return b\n    max_num = li[0]\n    for i in range(1, len(li)):\n        if maximum(li[i], max_num)!= maximum(li[i-1], max_num):\n            return False\n    return True"
    },
    {
        "original": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
        "sampled": "\"\"\"\n        return tuple(s)\n    def is_palindrome(s: str) -> bool:\n        \"\"\"\n        Returns True if the input string is a palindrome, False otherwise.\n        \"\"\"\n        return s == s[::-1]\n    def is_palindrome_tuple(t: Tuple[str]) -> bool:\n        \"\"\"\n        Returns True if the input tuple is a palindrome, False otherwise.\n        \"\"\"\n        return t == t[::-1]\n    def is_palindrome_list(li: List"
    },
    {
        "original": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ",
        "sampled": "\"\"\"\n        return x | (1 << (x.bit_length() - 1))\n    return [set_left_most_unset_bit(x) for x in li]"
    },
    {
        "original": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
        "sampled": "\"\"\"\n        pi = 3.141592653589793\n        radius, height = c\n        volume = pi * radius**2 * height / 3\n        return volume\n    # Calculate the sum of the volumes of all cones in the list\n    sum_volumes = sum(volume_cone(c[0], c[1]) for c in cones)\n    return sum_volumes"
    },
    {
        "original": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ",
        "sampled": "\"\"\"\n        pos_nums = [num for num in li if num > 0]\n        if pos_nums:\n            print(f\"Positive numbers in the list: {', '.join(map(str, pos_nums))}\")\n        else:\n            print(\"No positive numbers in the list.\")"
    },
    {
        "original": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)",
        "sampled": "\"\"\"\n        n = len(grid)\n        m = len(grid[0])\n        dp = [0] * m\n        for i in range(n):\n            new_dp = [0] * m\n            for j in range(m):\n                if j == 0:\n                    new_dp[j] = grid[i][j] + dp[j]\n                elif j == m - 1:\n                    new_dp[j] = grid[i][j] + dp[j-1]\n                else:\n                    new_dp["
    },
    {
        "original": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ",
        "sampled": "\"\"\"\n        max_len = 0\n        for word in words:\n            if len(word) % 2 == 0 and len(word) > max_len:\n                max_len = len(word)\n        return max_len\n    max_even_len = 0\n    for i in range(len(words)):\n        for j in range(i+1, len(words)+1):\n            even_len = find_Max_Len_Even(words[i:j])\n            if even_len > max_even_len:\n                max_even"
    },
    {
        "original": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ",
        "sampled": "\"\"\"\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == num:\n                while mid > 0 and nums[mid - 1] == num:\n                    mid -= 1\n                return mid\n            elif nums[mid] < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n    longest_subsequence = []\n    current_subsequence = []\n    for num in"
    },
    {
        "original": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
        "sampled": "\"\"\"\n        if not li:\n            return []\n        result = []\n        count = 1\n        for i in range(1, len(li)):\n            if li[i] == li[i-1]:\n                count += 1\n            else:\n                result.append([li[i-1], count])\n                count = 1\n        result.append([li[-1], count])\n        return result"
    },
    {
        "original": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
        "sampled": "\"\"\"\n        sides = sorted(sides)\n        if sum(sides) <= max_sum:\n            return sum(sides) ** 3\n        else:\n            return 0\n    max_volume = 0\n    for i in range(len(sides)):\n        for j in range(i + 1, len(sides)):\n            for k in range(j + 1, len(sides)):\n                max_volume = max(max_volume, cuboid_volume(sides[i], sides[j], sides[k]))"
    },
    {
        "original": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
        "sampled": "\"\"\"\n        import re\n        pattern = r'\\b\\w{5}\\b'\n        matches = re.findall(pattern, s)\n        return matches"
    },
    {
        "original": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
        "sampled": "\"\"\"\n        return sum(range(1, n+1))**2 - sum(range(1, n+1))**2\n    return sorted(li, key=lambda x: (sum_difference(x), x))"
    },
    {
        "original": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t",
        "sampled": "\"\"\"\n        if number == \"\":\n            return \"\"\n        elif number[0] == \"1\":\n            return number\n        else:\n            return number[0] + find_demlo(number[1:])\n    result = []\n    for number in numbers:\n        result.append(find_demlo(number))\n    return result"
    },
    {
        "original": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result",
        "sampled": "\"\"\"\n        min_val = min(li)\n        return [i for i, val in enumerate(li) if val == min_val]\n    return [position_min(li)]"
    },
    {
        "original": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr",
        "sampled": "\"\"\"\n        if len(arr) == 1:\n            return arr\n        else:\n            return [arr[i//2] if i % 2 == 0 else -arr[-(i//2)-1] for i in range(len(arr))]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sub_arr = arr[i:j]\n            if sum(sub_arr) == 0 and len(sub_arr) > 1:\n                return True\n            elif sum("
    },
    {
        "original": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ",
        "sampled": "\"\"\"\n        return sum(chains[::2]), sum(chains[1::2])\n    chains = [tuple(chain) for chain in chains]\n    return sum(sum_of_alternates(chain) for chain in chains)"
    },
    {
        "original": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;",
        "sampled": "\"\"\"\n        dp = [float('inf')] * (n+1)\n        dp[0] = 0\n        for i in range(1, n+1):\n            j = 1\n            while j*j <= i:\n                dp[i] = min(dp[i], dp[i-j*j]+1)\n                j += 1\n        return dp[n]"
    },
    {
        "original": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ",
        "sampled": "\"\"\"\n        word_count = {}\n        for string in strings:\n            words = string.split()\n            for word in words:\n                if word in word_count:\n                    word_count[word] += 1\n                else:\n                    word_count[word] = 1\n        return max(word_count, key=word_count.get)\n    return [most_occurrences(strings) for strings in li]"
    },
    {
        "original": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False",
        "sampled": "\"\"\"\n        if a == b or b == c or a == c:\n            return True\n        else:\n            return False\n    count = 0\n    for triangle in triangles:\n        a, b, c = triangle\n        if check_isosceles(a, b, c):\n            count += 1\n    return count"
    },
    {
        "original": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
        "sampled": "\"\"\"\n        if len(li) == 0 or num < 0:\n            return li\n        num = num % len(li)\n        return li[num:] + li[:num]\n    def rotate_right(li: List[int], num: int, num2: int) -> List[int]:\n        \"\"\"\n        Rotate a list of integers to the right by specified number of items.\n        Args:\n        li (List[int]): A list of integers to be rotated.\n        num (int): The number of items to rotate the list by."
    },
    {
        "original": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ",
        "sampled": "\"\"\"\n        count = 0\n        for num in li:\n            if num < 0:\n                count += 1\n        return count\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a prime number, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n: int) -> bool:"
    },
    {
        "original": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
        "sampled": "\"\"\"\n        import re\n        words = re.findall(r'\\b\\w{3,}\\b', s)\n        return words\n    def find_char(s: str) -> List[str]:\n        \"\"\"\n        Given a string, this function finds all the characters that are surrounded by the same character. \n        You are an exper Python programmer, and here is your task:\n        Your code should pass these tests:\n        assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', '"
    },
    {
        "original": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ",
        "sampled": "\"\"\"\n        count = 0\n        while num:\n            count += num & 1\n            num >>= 1\n        return count\n    result = []\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if count_unset_bits(li[i]) == count_unset_bits(li[j]):\n                result.append(li[i])\n                result.append(li[j])\n    return result"
    },
    {
        "original": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict",
        "sampled": "\"\"\"\n        char_freq = {}\n        for char in s:\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n        return char_freq\n    def is_palindrome(s: str) -> bool:\n        \"\"\"\n        Returns True if the input string is a palindrome, False otherwise.\n        Your code should pass these tests:\n        assert is_palindrome('racecar')==True\n        assert is_palindrome('hello"
    },
    {
        "original": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ",
        "sampled": "\"\"\"\n        return sorted(sublist, key=lambda x: x[1])\n    return sorted(li, key=lambda x: x[1])"
    },
    {
        "original": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ",
        "sampled": "\"\"\"\n        if a + b > c and b + c > a and c + a > b:\n            return True\n        else:\n            return False\n    count = 0\n    for triangle in triangles:\n        a, b, c = triangle\n        if check_Validity(a, b, c):\n            count += 1\n    return count"
    },
    {
        "original": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
        "sampled": "\"\"\"\n        n = len(li)\n        if n < 3:\n            return 0\n        li.sort()\n        return sum((li[i+1]-li[i]) for i in range(n-1))\n    n = len(li)\n    if n < 3:\n        return 0\n    li.sort()\n    return sum(li[i] for i in range(n-2) if is_ap(li[i:i+3]))"
    },
    {
        "original": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
        "sampled": "\"\"\"\n        days_in_month = {\n            \"January\": 31,\n            \"February\": 28,\n            \"March\": 31,\n            \"April\": 30,\n            \"May\": 31,\n            \"June\": 30,\n            \"July\": 31,\n            \"August\": 31,\n            \"September\": 30,\n            \"October\": 31,\n            \"November\": 30,\n            \"December\": 31\n        }\n        return days_in_month.get(month, 0) == 28\n    def is_prime(n: int) -> bool:"
    },
    {
        "original": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "sampled": "\"\"\"\n        if not s:\n            return False\n        if s[-1] in ('.', '!', '?'):\n            return s[-1] == '.'\n        if s[-1] == ',':\n            return s[-1] == ','\n        if s[-1] == ';':\n            return s[-1] == ';'\n        if s[-1] == ':':\n            return s[-1] == ':'\n        if s[-1] == '-':\n            return s[-"
    },
    {
        "original": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                if s[i] == s[j-1] and s[i:j] == s[i:j][::-1]:\n                    count += 1\n        return count"
    },
    {
        "original": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
        "sampled": "\"\"\"\n        max_divisor = 1\n        for i in range(1, n+1):\n            if n % i == 0:\n                max_divisor = i\n        return max_divisor\n    result = []\n    for i in range(len(li)-1):\n        result.append(find_Divisor(li[i], li[i+1]))\n    return result"
    },
    {
        "original": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
        "sampled": "\"\"\"\n        nums.sort()\n        return sum(nums[:3])\n    return sum_three_smallest_nums"
    },
    {
        "original": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)",
        "sampled": "\"\"\"\n        return tuple(sorted(s))\n    return [set_to_tuple(s) for s in sets]"
    },
    {
        "original": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])",
        "sampled": "\"\"\"\n        arrays.sort()\n        smallest_range = float('inf')\n        for i in range(len(arrays[0])):\n            for j in range(i+1, len(arrays[0])+1):\n                subarray = arrays[0][i:j]\n                if all(subarray in array for array in arrays):\n                    smallest_range = min(smallest_range, max(subarray) - min(subarray))\n        return smallest_range, smallest_range"
    },
    {
        "original": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)",
        "sampled": "\"\"\"\n        digits = 0\n        letters = 0\n        for char in s:\n            if char.isdigit():\n                digits += 1\n            elif char.isalpha():\n                letters += 1\n        return (digits, letters)\n    result = []\n    for s in li:\n        if s.isdigit():\n            result.append(str(sum(map(dig_let, s))))\n        elif s.isalpha():\n            result.append(str(sum(map(let_let, s))))\n        else:"
    },
    {
        "original": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(start, end+1):\n            factors = 0\n            for j in range(1, i+1):\n                if i % j == 0 and j % 2!= 0:\n                    factors += 1\n            if factors % 2!= 0:\n                count += 1\n        return count"
    },
    {
        "original": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
        "sampled": "\"\"\"\n        diffs = []\n        for i in range(len(li)-1):\n            diffs.append(li[i+1]-li[i])\n        return diffs"
    },
    {
        "original": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
        "sampled": "\"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return zigzag(n-1, k) + zigzag(n-2, k)\n    zigzag_sum = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i % 2 == 1:\n                zigzag_sum += zigzag(i, j)\n            else:\n                zigzag_sum -= zigzag(i, j"
    },
    {
        "original": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6",
        "sampled": "\"\"\"\n        if m == 1:\n            return n\n        else:\n            return count_Squares(m-1, n) + count_Squares(m, n-m)\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += count_Squares(i, n//i)\n    return count"
    },
    {
        "original": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ",
        "sampled": "\"\"\"\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        dp = [0] * (n+1)\n        dp[0] = 1\n        for i in range(1, n+1):\n            for j in range(i, 0, -1):\n                if j <= i-values[n-i]:\n                    dp[j] += dp[j-values[n-i]]\n        return dp[n]\n    count = 0\n    for i in range(len(values)):"
    },
    {
        "original": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ",
        "sampled": "\"\"\"\n        for char in s:\n            if char not in [\"0\", \"1\"]:\n                return \"No\"\n        return \"Yes\"\n    return [check(s) for s in li]"
    },
    {
        "original": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ",
        "sampled": "\"\"\"\n        if len(s) == 0:\n            return 0\n        elif len(s) == 1:\n            return 1\n        else:\n            # Initialize the minimum length to be the length of the string\n            min_length = len(s)\n            # Iterate through all possible substrings of the input string\n            for i in range(len(s)):\n                for j in range(i+1, len(s)+1):\n                    # Check if the substring is a palindrome\n                    if s[i:j] == s[i"
    },
    {
        "original": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1",
        "sampled": "\"\"\"\n        for i in range(len(arr)):\n            if arr[i] == num:\n                if arr.count(num) == k:\n                    return num\n        return -1\n    max_freq = 0\n    max_num = -1\n    for i in range(len(arr)):\n        num = arr[i]\n        freq = first_Element(arr, num, k)\n        if freq!= -1 and freq > max_freq:\n            max_freq = freq\n            max_num = num"
    },
    {
        "original": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;",
        "sampled": "\"\"\"\n        return len(set(s)) == len(s)\n    return [is_unique(s) for s in li]"
    },
    {
        "original": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1",
        "sampled": "\"\"\"\n        if col < 0 or col >= len(nested_list[0]):\n            return nested_list\n        return [row[:col] + row[col+1:] for row in nested_list]"
    },
    {
        "original": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn",
        "sampled": "\"\"\"\n        return (n*(n-1))//2\n    for i in range(len(li)-tn):\n        if tn_ap(li[i], li[i+tn], tn) == li[i+tn]:\n            return True\n    return False"
    },
    {
        "original": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ",
        "sampled": "\"\"\"\n        if r <= 0:\n            return 0\n        elif r == 1:\n            return 1\n        else:\n            return (r-1)**2 + count_Rectangles(r-1)\n    count = 0\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] <= 2*r:\n                count += count_Rectangles(li[i] + li[j])\n    return count"
    },
    {
        "original": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n",
        "sampled": "\"\"\"\n        return 180 - angle1 - angle2\n    n = len(angles)\n    if n < 3:\n        return 0\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                angles_sum = sum([angles[i], angles[j], angles[k]])\n                if angles_sum == 180:\n                    count += 1\n    return count"
    },
    {
        "original": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ",
        "sampled": "\"\"\"\n        max_val = float('-inf')\n        for record in records:\n            if record[1] > max_val:\n                max_val = record[1]\n        return max_val\n    return sum(find_max(records) for records in data.values())"
    },
    {
        "original": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)",
        "sampled": "\"\"\"\n        return list(map(lambda x, y: x % y, li1, li2))"
    },
    {
        "original": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
        "sampled": "\"\"\"\n        discriminant = b**2 - 4*a*c\n        if discriminant < 0:\n            return \"No\"\n        elif discriminant == 0:\n            root = -b / (2*a)\n            if root == 2*a:\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            root1 = (-b + discriminant**0.5) / (2*a)\n            root2 = (-b - discriminant**0.5) / (2*a)\n            if root1 =="
    },
    {
        "original": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2",
        "sampled": "\"\"\"\n        carol_numbers = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 861, 901, 945, 1035, 1125, 1225, 1530, 1821, 2145, 2215, 2556, 28"
    },
    {
        "original": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty",
        "sampled": "\"\"\"\n        return [x for x in li if x!= []]"
    },
    {
        "original": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
        "sampled": "\"\"\"\n        if not li:\n            return None\n        max_count = 0\n        max_item = None\n        for item in li:\n            count = li.count(item)\n            if count > max_count:\n                max_count = count\n                max_item = item\n        return max_item"
    },
    {
        "original": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ",
        "sampled": "\"\"\"\n        new_li = []\n        for tup in li:\n            new_tup = tuple(x + k for x in tup)\n            new_li.append(new_tup)\n        return new_li"
    },
    {
        "original": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(1, len(s)):\n            if s[i]!= s[i-1]:\n                count += 1\n        return count"
    },
    {
        "original": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count",
        "sampled": "\"\"\"\n        count = 0\n        for digit in str(num):\n            if digit.isdigit():\n                count += 1\n        return count\n    def is_prime(num: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        Your code should pass these tests:\n        assert is_prime(7) == True\n        assert is_prime(12) == False\n        assert is_prime(1) == False\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2"
    },
    {
        "original": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
        "sampled": "\"\"\"\n        if len(nums) < 2:\n            return 0\n        max_product = float('-inf')\n        for i in range(len(nums)-1):\n            product = nums[i] * nums[i+1]\n            if product > max_product:\n                max_product = product\n        return max_product"
    },
    {
        "original": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
        "sampled": "\"\"\"\n        if not root:\n            return True\n        left_height = get_height(root.left)\n        right_height = get_height(root.right)\n        if abs(left_height - right_height) > 1:\n            return False\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n    def get_height(root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        return 1 + max(get_height(root.left), get"
    },
    {
        "original": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ",
        "sampled": "\"\"\"\n        return tuple(tup * n for tup in li)\n    return repeat_tuples"
    },
    {
        "original": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA",
        "sampled": "\"\"\"\n        return 2*(l+w+h)\n    return sum(lateralsurface_cuboid(a,b,c) for a in li1 for b in li2 for c in li3)"
    },
    {
        "original": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort",
        "sampled": "\"\"\"\n        return sorted(items, key=lambda x: float(x[1]))\n    return sorted(items, key=lambda x: float(x[1]))"
    },
    {
        "original": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)",
        "sampled": "\"\"\"\n        left = 0\n        right = len(li) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if li[mid] == mid:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return li[left] + 1\n    return sorted(li1 + li2)"
    },
    {
        "original": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result",
        "sampled": "\"\"\"\n        heap = []\n        for elem in li:\n            heapq.heappush(heap, elem)\n        sorted_list = []\n        while heap:\n            sorted_list.append(heapq.heappop(heap))\n        return sorted_list"
    },
    {
        "original": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume",
        "sampled": "\"\"\"\n        return a * b * c\n    def volume_sphere(a: int, b: int, c: int) -> int:\n        \"\"\"\n        Calculates the volume of a sphere.\n        Args:\n            a (int): The radius of the sphere.\n            b (int): The radius of the sphere.\n            c (int): The radius of the sphere.\n        Returns:\n            int: The volume of the sphere.\n        Raises:\n            ValueError: If any of the arguments are negative.\n        \"\"\"\n        if a < 0 or"
    },
    {
        "original": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list",
        "sampled": "\"\"\"\n        if len(s) == 0:\n            return []\n        elif len(s) == 1:\n            return [s]\n        else:\n            result = []\n            for i in range(len(s)):\n                if i > 0 and s[i] == s[i-1]:\n                    continue\n                sub_permutations = permute_string(s[:i] + s[i+1:])\n                for sub_permutation in sub_permutations:\n                    result.append(s[i] + sub_permutation)"
    },
    {
        "original": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
        "sampled": "\"\"\"\n        return round(num/n)*n\n    return [round_num(num,n) for num in li]"
    },
    {
        "original": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)",
        "sampled": "\"\"\"\n        new_li = []\n        for elem in li:\n            if li.count(elem) == 1:\n                new_li.append(elem)\n            else:\n                new_li.append('MSP')\n        return tuple(new_li)"
    },
    {
        "original": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ",
        "sampled": "\"\"\"\n        return s.replace(c, '')\n    result = []\n    for s in li:\n        result.append(remove_Char(s, c))\n    return result"
    },
    {
        "original": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list",
        "sampled": "\"\"\"\n        if len(li) == 0:\n            return li\n        else:\n            return [li[-1]] + li[:-1]"
    },
    {
        "original": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA",
        "sampled": "\"\"\"\n        return 2 * (length * width + length * height + width * height)\n    def surfacearea_cuboid_triangle(length: int, width: int, height: int) -> int:\n        \"\"\"\n        Calculates the surface area of a triangular prism.\n        Args:\n            length (int): The length of the base of the triangle.\n            width (int): The width of the base of the triangle.\n            height (int): The height of the prism.\n        Returns:\n            int: The surface area of the triangular prism.\n        Ra"
    },
    {
        "original": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n",
        "sampled": "\"\"\"\n    pass"
    },
    {
        "original": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
        "sampled": "\"\"\"\n        return sorted(li, key=lambda x: x[index])\n    return index_on_inner_list"
    },
    {
        "original": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1",
        "sampled": "\"\"\"\n        n = len(arr)\n        left, right = 0, n-1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] > arr[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "original": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "sampled": "\"\"\"\n    result = 0\n    for i in range(len(n)):\n        if i % 2 == 0:\n            result |= n[i]\n        else:\n            result &= ~n[i]\n    return result"
    },
    {
        "original": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "sampled": "\"\"\"\n        smallest = min(arr)\n        return arr.count(smallest)\n    smallest = min(arr)\n    return smallest, frequency_Of_Smallest(smallest, arr)"
    },
    {
        "original": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)",
        "sampled": "\"\"\"\n        if n == 1:\n            return 1\n        else:\n            return n * get_perrin(n-1)\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the input integer is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    def get_perrin(n: int) -> int:"
    },
    {
        "original": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap",
        "sampled": "\"\"\"\n        stack = []\n        swaps = 0\n        for c in s:\n            if c == '[':\n                stack.append(c)\n            elif c == ']':\n                if stack and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    swaps += 1\n        swaps += len(stack)\n        return swaps\n    return [swap_count(s) for s in li]"
    },
    {
        "original": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ",
        "sampled": "\"\"\"\n        if int(hex_num, 16) % 2 == 0:\n            return \"Even\"\n        else:\n            return \"Odd\"\n    result = []\n    for hex_num in hexes:\n        result.append(is_even_or_odd(hex_num))\n    return result"
    },
    {
        "original": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ",
        "sampled": "\"\"\"\n        power = 0\n        while n >= 2**power:\n            power += 1\n        return 2**(power-1)\n    result = []\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == n:\n                result.append(li[i])\n                result.append(li[j])\n    return result"
    },
    {
        "original": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "sampled": "\"\"\"\n        if n == 0:\n            return 2\n        elif n == 1:\n            return 1\n        else:\n            return find_lucas(n-1) + find_lucas(n-2)\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a prime number, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return"
    },
    {
        "original": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string",
        "sampled": "\"\"\"\n        return [f\"{s}_{item}\" for item in items]\n    return [\n        f\"{s}_{'_'.join(add_string(items, f\"python{i}\"))}\"\n        for i, s in enumerate(strings)\n    ]"
    },
    {
        "original": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result",
        "sampled": "\"\"\"\n        if len(li)!= len(li2):\n            return []\n        result = []\n        for i in range(len(li)):\n            result.append({li[i]: {li2[i]: li3[i]}})\n        return result"
    },
    {
        "original": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]",
        "sampled": "\"\"\"\n        # Generate a list of Fibonacci numbers up to n\n        fib = [0, 1]\n        while fib[-1] < n:\n            fib.append(fib[-1] + fib[-2])\n        # Generate a list of possible sums using the given equation\n        sums = [fib[i] + fib[j] + fib[k] + fib[l] + fib[m] for i in range(len(fib)) for j in range(i+1, len(fib)) for k in"
    },
    {
        "original": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
        "sampled": "\"\"\"\n        return max(len(lst) for lst in li)"
    },
    {
        "original": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ",
        "sampled": "\"\"\"\n        return len(set(t)) == len(t)\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the given integer is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n: int) -> bool:\n        \"\"\"\n        Returns True if the given integer is a palindrome"
    },
    {
        "original": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None",
        "sampled": "\"\"\"\n        for char in s:\n            if s.count(char) == 1:\n                return char\n        return None\n    return [first_non_repeating_character(s) for s in li]"
    },
    {
        "original": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ",
        "sampled": "\"\"\"\n        import re\n        return bool(re.match(r'^[a-zA-Z]*[a-zA-Z]$', s))\n    def is_palindrome(s: str) -> bool:\n        \"\"\"\n        Returns True if the given string is a palindrome or not, False otherwise.\n        Your code should pass these tests:\n        assert is_palindrome(\"racecar\") == True\n        assert is_palindrome(\"hello\") == False\n        assert is_palindrome(\"A man, a plan, a"
    },
    {
        "original": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
        "sampled": "\"\"\"\n        nums = [num1, num2, num3]\n        nums.sort()\n        return nums[1]\n    median1 = median_numbers(a1, b1, c1)\n    median2 = median_numbers(a2, b2, c2)\n    median3 = median_numbers(a3, b3, c3)\n    return (median1 + median2 + median3) / 3"
    },
    {
        "original": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "sampled": "\"\"\"\n        if num < 0:\n            return 0\n        elif num < 10:\n            return num\n        else:\n            return sum(int(digit) for digit in str(num))\n    def is_prime(num: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    def"
    },
    {
        "original": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        result = 0\n        for i in range(len(tups[0])):\n            bit_count = 0\n            for tup in tups:\n                bit_count += bin(tup[i]).count('1')\n            result += 2**(len(tups[0])-1-bit_count) * tups[0][i]\n        return result, tups"
    },
    {
        "original": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)",
        "sampled": "\"\"\"\n        freq_dict = {}\n        for tup in li:\n            if tup in freq_dict:\n                freq_dict[tup] += 1\n            else:\n                freq_dict[tup] = 1\n        return len(freq_dict)"
    },
    {
        "original": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        if not isinstance(t1, tuple) or not isinstance(t2, tuple):\n            raise TypeError(\"Both inputs must be tuples.\")\n        if not all(isinstance(i, int) for i in t1) or not all(isinstance(i, int) for i in t2):\n            raise TypeError(\"Both tuples must contain only integers.\")\n        if len(t1)!= len(t2):\n            raise ValueError(\"Both tuples must be of equal length.\")\n        return tuple(map(sum, zip(t1"
    },
    {
        "original": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ",
        "sampled": "\"\"\"\n        if not 0 <= r <= n:\n            return 0\n        if r == 0:\n            return 1\n        numerator = [1] * (n + 1)\n        denominator = [1] * (n + 1)\n        for i in range(1, r + 1):\n            numerator[i] = numerator[i - 1] * (n - i + 1)\n            denominator[i] = denominator[i - 1] * i\n        return numerator[n] // denominator[n]\n    def"
    },
    {
        "original": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False",
        "sampled": "\"\"\"\n        import re\n        pattern = re.compile(\n            r'^(?:http|ftp)s?://'  # http:// or https:// or ftp:// or ftps://\n            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n            r'localhost"
    },
    {
        "original": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ",
        "sampled": "\"\"\"\n        return min(n1, n2)\n    def maximum(n1: int, n2: int) -> int:\n        \"\"\"\n        Returns the maximum of two numbers.\n        Args:\n            You are an exper Python programmer, and here is your task:\n            Write a python function to find the maximum of two numbers. \n            Your code should pass these tests:\n            assert maximum(1,2) == 2\nassert maximum(-5,-4) == -5\nassert maximum(0,0) == 0\n        \"\"\"\n        return max(n1,"
    },
    {
        "original": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False",
        "sampled": "\"\"\"\n        if tup[0] in tup:\n            return True\n        else:\n            return False\n    for tup in li:\n        if isinstance(tup, tuple) and check_tuplex(tup, target):\n            return True\n    return False"
    },
    {
        "original": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ",
        "sampled": "\"\"\"\n        if n == 0:\n            return \"Zero Parity\"\n        elif n % 2 == 0:\n            return \"Even Parity\"\n        else:\n            return \"Odd Parity\"\n    result = []\n    for num in li:\n        result.append(find_Parity(num))\n    return result"
    },
    {
        "original": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
        "sampled": "\"\"\"\n        digits = list(str(num))\n        i = len(digits) - 2\n        while i >= 0 and digits[i] >= digits[i+1]:\n            i -= 1\n        if i < 0:\n            return False\n        j = len(digits) - 1\n        while digits[j] <= digits[i]:\n            j -= 1\n        digits[i], digits[j] = digits[j], digits[i]\n        digits[i+1:] = reversed(digits[i+1:])\n        return"
    },
    {
        "original": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
        "sampled": "\"\"\"\n        pairs = []\n        for i in range(len(a)):\n            for j in range(len(b)):\n                pairs.append([a[i], b[j]])\n        pairs.sort()\n        return pairs[:k]"
    },
    {
        "original": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min",
        "sampled": "\"\"\"\n        pairs = []\n        for i in range(len(li)):\n            for j in range(i+1, len(li)):\n                if li[i][0]*li[j][1] == li[i][1]*li[j][0]:\n                    pairs.append((li[i], li[j]))\n        if not pairs:\n            return 0\n        min_product = float('inf')\n        for pair in pairs:\n            product = pair[0][0]*pair[0][1] + pair["
    },
    {
        "original": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val",
        "sampled": "\"\"\"\n        if len(li) == 0:\n            raise ValueError(\"List cannot be empty\")\n        min_val = li[0]\n        for val in li:\n            if val < min_val:\n                min_val = val\n        return min_val\n    if len(li) == 0:\n        raise ValueError(\"List cannot be empty\")\n    min_val = min_val(li)\n    if min_val == li[0]:\n        return li[0]\n    else:\n        return min_val"
    },
    {
        "original": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "sampled": "\"\"\"\n        import re\n        return re.sub(r'(?<!^)(?=[A-Z])', '_', s).lower()\n    def is_palindrome(s: str) -> bool:\n        \"\"\"\n        Returns True if the given string is a palindrome, False otherwise.\n        Args:\n        s (str): The string to check for palindrome.\n        Returns:\n        bool: True if the given string is a palindrome, False otherwise.\n        Example:\n        assert is_palindrome('racecar') =="
    },
    {
        "original": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
        "sampled": "\"\"\"\n        return [num for num in li if num % 2 == 0]"
    },
    {
        "original": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result",
        "sampled": "\"\"\"\n        return [t[n] for t in li]"
    },
    {
        "original": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0",
        "sampled": "\"\"\"\n        for i in range(len(seq1)-len(seq2)+1):\n            if seq1[i:i+len(seq2)] == seq2:\n                return True\n        return False\n    for i in range(len(li)-1):\n        if overlapping(li[i], li[i+1]):\n            return True\n    return False"
    },
    {
        "original": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ",
        "sampled": "\"\"\"\n        max_product = float('-inf')\n        max_pair = None\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                product = nums[i] * nums[j]\n                if product > max_product:\n                    max_product = product\n                    max_pair = (nums[i], nums[j])\n        return max_pair"
    },
    {
        "original": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
        "sampled": "\"\"\"\n        if number == 0:\n            return 0\n        elif number < 0:\n            return -1\n        else:\n            max_sum = -1\n            for i in range(1, number+1):\n                left_sum = breakSum(number-i)\n                right_sum = breakSum(i)\n                if left_sum == -1 and right_sum == -1:\n                    continue\n                elif left_sum == -1:\n                    max_sum = max(max_sum, right_sum)\n                elif right_sum"
    },
    {
        "original": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ",
        "sampled": "\"\"\"\n        return tuple(set(li[0] for li in li_tuples))\n    groups = {}\n    for tup in li_tuples:\n        groups.setdefault(find_common_tuple(tup), []).append(tup)\n    return [tuple(group) for group in groups.values()]"
    },
    {
        "original": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList",
        "sampled": "\"\"\"\n        max_len = 0\n        max_sublist = []\n        for sublist in li:\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n                max_sublist = sublist\n        return max_sublist"
    },
    {
        "original": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
        "sampled": "\"\"\"\n        rounded_nums = [round(num) for num in nums]\n        total_sum = sum(rounded_nums)\n        length = len(nums)\n        return total_sum * length"
    },
    {
        "original": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
        "sampled": "\"\"\"\n        cube_sum = 0\n        for i in range(1, n+1):\n            cube_sum += i**3\n        return cube_sum\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n:"
    },
    {
        "original": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ",
        "sampled": "\"\"\"\n        return delimiter.join(t)\n    return concatenate_tuple"
    },
    {
        "original": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ",
        "sampled": "\"\"\"\n        if n <= 0:\n            return 0\n        else:\n            return sum([i**3 for i in range(1, n+1)])/n"
    },
    {
        "original": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ",
        "sampled": "\"\"\"\n        n = len(triangle)\n        dp = [[0]*n for _ in range(n)]\n        dp[0][0] = triangle[0][0]\n        for i in range(1, n):\n            for j in range(i+1):\n                if j == 0:\n                    dp[i][j] = dp[i-1][j] + triangle[i][j]\n                elif j == i:\n                    dp[i][j] = dp[i-1][j-1] + triangle[i]["
    },
    {
        "original": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ",
        "sampled": "\"\"\"\n        return tuple(s[-1] for s in t)\n    return [extract_rear(t) for t in li]"
    },
    {
        "original": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
        "sampled": "\"\"\"\n        count = 0\n        for sublist in li:\n            if element in sublist:\n                count += 1\n        return count"
    },
    {
        "original": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums",
        "sampled": "\"\"\"\n        return filter(lambda x: x % 2!= 0, li)\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n: int) -> bool:\n        \"\"\"\n        Returns True if the given number is a"
    },
    {
        "original": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "sampled": "\"\"\"\n        import re\n        date_regex = r\"\\d{4}-\\d{2}-\\d{2}\"\n        return re.sub(date_regex, r\"\\g<0>-\\g<1>-\\g<2>\", date)\n    def get_most_common_letter(words: List[str]) -> str:\n        \"\"\"\n        Returns the most common letter among all the words in the list.\n        If there are multiple letters with the same frequency, it returns the one that comes first alphabetically.\n        \"\"\""
    },
    {
        "original": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
        "sampled": "\"\"\"\n        n = len(arr)\n        gap = n // 2\n        while gap > 0:\n            for i in range(gap, n):\n                temp = arr[i]\n                j = i\n                while j >= gap and arr[j - gap] > temp:\n                    arr[j] = arr[j - gap]\n                    j -= gap\n                arr[j] = temp\n            gap //= 2\n        return arr\n    sorted_arr = shell_sort(arr)\n    for i in range(len(sorted_arr) - 1"
    },
    {
        "original": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        if len(t1)!= len(t2):\n            return (0, 0)\n        result = []\n        for i in range(len(t1)):\n            if isinstance(t1[i], int) and isinstance(t2[i], int):\n                result.append(t1[i] & t2[i])\n            elif isinstance(t1[i], tuple) and isinstance(t2[i], tuple):\n                result.append(tuple(t1[i][j] & t2[i"
    },
    {
        "original": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
        "sampled": "\"\"\"\n        discriminant = b**2 - 4*a*c\n        if discriminant < 0:\n            return None\n        elif discriminant == 0:\n            root = -b / (2*a)\n            return root\n        else:\n            root1 = (-b + discriminant**0.5) / (2*a)\n            root2 = (-b - discriminant**0.5) / (2*a)\n            return max(root1, root2)\n    result = []\n    for parabola in parabolas:"
    },
    {
        "original": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
        "sampled": "\"\"\"\n        for element in li1:\n            if element in li2:\n                return True\n        return False\n    for i in range(len(li1)):\n        for j in range(i+1, len(li1)+1):\n            sublist1 = li1[i:j]\n            if all(common_element(sublist1, li2) for li2 in li2):\n                return True\n    return False"
    },
    {
        "original": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median",
        "sampled": "\"\"\"\n        if a == b:\n            return a\n        else:\n            return ((a+b)/2)\n    medians = []\n    for trapezium in trapeziums:\n        medians.append(median_trapezium(trapezium[0], trapezium[1], trapezium[2]))\n    return medians"
    },
    {
        "original": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')",
        "sampled": "\"\"\"\n        if num > max(arr):\n            return 'No, entered number is less than those in the array'\n        else:\n            return 'Yes, the entered number is greater than those in the array'"
    },
    {
        "original": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n",
        "sampled": "\"\"\"\n        for i in range(len(s)-1):\n            if s[i] == 'a' and s[i+1] == 'b':\n                return True\n        return False\n    count = 0\n    for s in li:\n        if text_match_one(s):\n            count += 1\n    return count"
    },
    {
        "original": "def last_Digit(n) :\r\n    return (n % 10) ",
        "sampled": "\"\"\"\n        return num % 10\n    return sorted(nums, key=last_Digit)"
    },
    {
        "original": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ",
        "sampled": "\"\"\"\n        neg_nums = [num for num in li if num < 0]\n        if neg_nums:\n            print(*neg_nums)\n        else:\n            print(\"No negative numbers found.\")"
    },
    {
        "original": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "sampled": "\"\"\"\n        return ''.join([char for char in word if len(char) % 2 == 0])\n    return [remove_odd(word) for word in words]"
    },
    {
        "original": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ",
        "sampled": "\"\"\"\n        count = 0\n        for i in range(len(li)):\n            for j in range(i+1, len(li)):\n                if li[i][0] == li[j][1] and li[i][1] == li[j][0]:\n                    count += 1\n        return str(count)"
    },
    {
        "original": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x",
        "sampled": "\"\"\"\n        result = 0\n        for digit in str(li):\n            result = result * 10 + int(digit)\n        return result\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if n is a prime number, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    def is_palindrome(n: int) -> bool:"
    },
    {
        "original": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))",
        "sampled": "\"\"\"\n        words = sentence.split()\n        for i, word in enumerate(words):\n            if word.endswith(\"ly\"):\n                adverb = word[:-2] + \"y\"\n                if adverb in sentence:\n                    return (sentence.index(adverb), sentence.index(adverb)+len(adverb), adverb)\n        return (-1, -1, \"\")\n    sentences = [\n        \"I am an exper Python programmer\",\n        \"Here is your task: write a function to find all adjectives and their positions"
    },
    {
        "original": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea",
        "sampled": "\"\"\"\n        return 6*side**2\n    def surfacearea_sphere(radius: float) -> float:\n        \"\"\"\n        Calculates the surface area of a sphere.\n        Args:\n            radius (float): The radius of the sphere.\n        Returns:\n            float: The surface area of the sphere.\n        Raises:\n            ValueError: If the input radius is negative.\n        Example:\n            You are a exper Python programmer, and here is your task:\n            Write a function to find the surface area of a sphere. \n            Your code"
    },
    {
        "original": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "sampled": "\"\"\"\n        count = 0\n        for num in arr:\n            if num > 0:\n                count += 1\n        return count / len(arr)\n    def negative_count(arr: List[int]) -> float:\n        \"\"\"\n        Returns the negative count of the input list of integers.\n        Your code should pass these tests:\n        assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==-0.54\n        assert negative_count([2, 1,"
    },
    {
        "original": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
        "sampled": "\"\"\"\n        negatives = [num for num in li if num < 0]\n        if negatives:\n            return max(negatives)\n        else:\n            return None"
    },
    {
        "original": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ",
        "sampled": "\"\"\"\n        return [tuple(x[max(0, i-k):i+k+1]) for i, x in enumerate(li)]"
    },
    {
        "original": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\n        result = []\n        for i in range(len(t1)):\n            result.append(tuple(t1[i][j] * t2[i][j] for j in range(len(t1[i]))))\n        return tuple(result)\n    return sum(1 for tup in li1 + li2 if index_multiplication(tup, li2) == index_multiplication(tup, li1))"
    },
    {
        "original": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ",
        "sampled": "\"\"\"\n        count = 0\n        for element in tup:\n            if element in li:\n                count += 1\n        return count\n    max_count = 0\n    max_tup = ()\n    for tup in li:\n        count = count_Occurrence(tup, li)\n        if count > max_count:\n            max_count = count\n            max_tup = tup\n    return max_tup"
    },
    {
        "original": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums",
        "sampled": "\"\"\"\n        cube_list = list(map(lambda x: x**3, nums))\n        return cube_list\n    def sum_cubes(nums: List[int]) -> int:\n        \"\"\"\n        Returns the sum of cubes of individual elements in a list using lambda function.\n        Args:\n        nums (List[int]): A list of integers.\n        Returns:\n        int: The sum of cubes of individual elements in the list.\n        Example:\n        >>> sum_cubes([1, 2, 3, 4, 5, 6, 7"
    },
    {
        "original": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
        "sampled": "\"\"\"\n        digits = [int(d) for d in str(n)]\n        return sum(digits)\n    return sum(n for n in li if cal_sum(n) % 2 == 0)"
    },
    {
        "original": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ",
        "sampled": "\"\"\"\n        x1, y1, x2, y2, x3, y3 = triangle\n        if (x1 == x2 and x2 == x3) or (y1 == y2 and y2 == y3):\n            return 'Yes'\n        elif (x1 == x2 == x3) or (y1 == y2 == y3):\n            return 'Yes'\n        elif (x1 == x2 and x2!= x3) or (y1 == y2 and y2!= y3):\n            return 'Yes'"
    },
    {
        "original": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result",
        "sampled": "\"\"\"\n        return li[start:end]\n    return extract_string"
    },
    {
        "original": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))",
        "sampled": "\"\"\"\n        import re\n        return re.sub(r'\\s+', '', s)\n    def is_palindrome(s: str) -> bool:\n        \"\"\"\n        Returns True if the given string is a palindrome, False otherwise.\n        \"\"\"\n        return s == s[::-1]\n    def is_anagram(s1: str, s2: str) -> bool:\n        \"\"\"\n        Returns True if the given strings are anagrams of each other, False otherwise.\n        \"\"\"\n        return sorted(s1) == sorted"
    },
    {
        "original": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None",
        "sampled": "\"\"\"\n        if amount < 0:\n            return None\n        elif amount <= 1000:\n            return amount * 0.1\n        elif amount <= 5000:\n            return amount * 0.2\n        else:\n            return amount * 0.3\n    return [loss_amount(amount, price) for amount, price in li]"
    },
    {
        "original": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ",
        "sampled": "\"\"\"\n        factors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                factors.append(i)\n        return sum(factors)\n    for num in li:\n        if is_prime(num):\n            continue\n        if is_exper(num):\n            continue\n        if is_sum_of_factors(num):\n            continue\n        return False\n    return True"
    },
    {
        "original": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "sampled": "\"\"\"\n        if 'z' in word:\n            return (True, word)\n        else:\n            return (False, word)\n    return [text_match_wordz(word)[1] for word in words]"
    },
    {
        "original": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False",
        "sampled": "\"\"\"\n        if month == 2:\n            return True\n        elif month in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    def is_leap_year(year: int) -> bool:\n        \"\"\"\n        Returns True if the given year is a leap year, False otherwise.\n        \"\"\"\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else"
    },
    {
        "original": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result",
        "sampled": "\"\"\"\n        return [s[::-1] for s in li]"
    },
    {
        "original": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList",
        "sampled": "\"\"\"\n        if not li:\n            return []\n        min_len = float('inf')\n        min_sublist = []\n        for i in range(len(li)):\n            for j in range(i+1, len(li)+1):\n                sublist = li[i:j]\n                if len(sublist) < min_len:\n                    min_len = len(sublist)\n                    min_sublist = sublist\n        return min_sublist"
    },
    {
        "original": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area",
        "sampled": "\"\"\"\n        return length * width\n    def triangle_area(length: int, width: int) -> int:\n        \"\"\"\n        Calculates the area of a triangle given its length and width.\n        Args:\n        length (int): The length of the triangle.\n        width (int): The width of the triangle.\n        Returns:\n        int: The area of the triangle.\n        Your code should pass these tests:\n        assert triangle_area(10,20)==200\n        assert triangle_area(10,5)==25\n        assert triangle_area("
    },
    {
        "original": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)",
        "sampled": "\"\"\"\n        import re\n        return re.sub(r'[A-Z]', '', s)\n    return [remove_uppercase(s) for s in li]"
    },
    {
        "original": "def Extract(lst): \r\n    return [item[0] for item in lst] ",
        "sampled": "\"\"\"\n        return [sublist[0] for sublist in li]"
    },
    {
        "original": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr",
        "sampled": "\"\"\"\n        count = 0\n        for char in s:\n            if char.isupper():\n                count += 1\n        return count\n    result = []\n    for s in li:\n        if len(s) < 3:\n            result.append(s)\n        else:\n            if upper_ctr(s) >= len(s) / 2:\n                result.append(s)\n            else:\n                result.append(s[::-1])\n    return result"
    },
    {
        "original": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
        "sampled": "\"\"\"\n        if len(li) == 0:\n            return [[]]\n        elif len(li) == 1:\n            return [li]\n        else:\n            result = []\n            for i in range(len(li)):\n                rest = li[:i] + li[i+1:]\n                for x in combinations_list(rest):\n                    result.append([li[i]] + x)\n            return result"
    },
    {
        "original": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
        "sampled": "\"\"\"\n        if not nums:\n            return 0\n        max_product = nums[0]\n        min_product = nums[0]\n        result = nums[0]\n        for i in range(1, len(nums)):\n            num = nums[i]\n            temp_max = max(num, max_product*num, min_product*num)\n            min_product = min(num, max_product*num, min_product*num)\n            max_product = temp_max\n            result ="
    },
    {
        "original": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result",
        "sampled": "\"\"\"\n        values = list(d.values())\n        return all(value == values[0] for value in values)\n    def is_palindrome(s: str) -> bool:\n        \"\"\"\n        Returns True if the input string is a palindrome, False otherwise.\n        Your code should pass these tests:\n        assert is_palindrome('racecar')==True\n        assert is_palindrome('hello')==False\n        assert is_palindrome('A man a plan a canal Panama')==True\n        \"\"\"\n        s = s.lower"
    },
    {
        "original": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1",
        "sampled": "\"\"\"\n        return {k: v for k, v in d.items() if v is not None}"
    },
    {
        "original": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ",
        "sampled": "\"\"\"\n        left, right = 0, n-1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[mid+1]:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n    peak_index = find_peak(arr, len(arr))\n    return arr[peak_index]"
    },
    {
        "original": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
        "sampled": "\"\"\"\n        octal = 0\n        i = 1\n        while n!= 0:\n            octal += (n % 8) * i\n            n //= 8\n            i *= 10\n        return octal\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False"
    },
    {
        "original": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
        "sampled": "\"\"\"\n        n = len(li)\n        dp = [0] * n\n        dp[0] = li[0]\n        for i in range(1, n):\n            dp[i] = li[i]\n            for j in range(i):\n                if li[j] < li[i]:\n                    dp[i] = max(dp[i], dp[j] * li[i])\n        return max(dp)"
    },
    {
        "original": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
        "sampled": "\"\"\"\n        if len(prices) < 2:\n            return 0\n        if k > len(prices) // 2:\n            k = len(prices) // 2\n        max_profit = 0\n        for i in range(len(prices) - k):\n            profit = prices[i] + max(prices[i+1:i+k+1]) - prices[i+k]\n            max_profit = max(max_profit, profit)\n        return max_profit"
    },
    {
        "original": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "sampled": "\"\"\"\n        return tuple(a + b for a, b in zip(t1, t2))\n    def subtract_pairwise(t1: Tuple[int, int], t2: Tuple[int, int]) -> Tuple[int, int]:\n        \"\"\"\n        Given two tuples of integers, this function returns a new tuple where each element is the difference between the \n        corresponding elements of the input tuples. \n        Your code should pass these tests:\n        assert subtract_pairwise((1, 5, 7, 8, 10)) == (-4"
    },
    {
        "original": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ",
        "sampled": "\"\"\"\n        if n == 0:\n            return 0\n        if len(li) == 0:\n            return -1\n        if len(li) == 1:\n            return li[0] % n\n        total = 1\n        for num in li:\n            total *= num\n        return total % n"
    },
    {
        "original": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "sampled": "\"\"\"\n        if len(li) < 2:\n            return False\n        for i in range(len(li)-1):\n            if li[i+1]!= li[i]+1:\n                return False\n        return True\n    if is_Consecutive(li1) and is_Consecutive(li2):\n        return True\n    else:\n        return False"
    },
    {
        "original": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)",
        "sampled": "\"\"\"\n        intersection = set(tup_li[0])\n        for tup in tup_li[1:]:\n            intersection.intersection_update(tup)\n        return intersection"
    },
    {
        "original": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2",
        "sampled": "\"\"\"\n        new_str = \"\"\n        for char in s:\n            if char == c1:\n                new_str += c2\n            elif char == c2:\n                new_str += c1\n            else:\n                new_str += char\n        return new_str\n    result = []\n    for s in li:\n        new_s = replace_char(s, c1, c2)\n        result.append(new_s)\n    return result"
    },
    {
        "original": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
        "sampled": "\"\"\"\n        return sorted(counter.items(), key=lambda x: x[1])"
    },
    {
        "original": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum",
        "sampled": "\"\"\"\n        return max(arr) + min(arr)\n    return sum(filter(lambda x: x % 2 == 0, arr))"
    },
    {
        "original": "def is_lower(string):\r\n  return (string.lower())",
        "sampled": "\"\"\"\n        return s.lower()\n    return [is_lower(s) for s in li]"
    },
    {
        "original": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
        "sampled": "\"\"\"\n        new_string = \"\"\n        i = 0\n        while i < len(string):\n            if not string[i].isupper():\n                new_string += string[i]\n                i += 1\n            else:\n                i += 1\n        return new_string\n    new_string = remove_lowercase(string)\n    new_string = new_string.replace(\" \", \"\")\n    return new_string"
    },
    {
        "original": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ",
        "sampled": "\"\"\"\n        return int(str(num)[0])\n    def is_prime(num: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        Your code should pass these tests:\n        assert is_prime(2) == True\n        assert is_prime(3) == True\n        assert is_prime(4) == False\n        assert is_prime(5) == True\n        assert is_prime(6) == False\n        assert is_prime(7) == True\n        assert is_prime(8) =="
    },
    {
        "original": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
        "sampled": "\"\"\"\n        char_count = {}\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        max_count = max(char_count.values())\n        max_chars = [char for char, count in char_count.items() if count == max_count]\n        return max_chars[0]\n    result = []\n    for s in li:\n        if isinstance(s, str):\n            result.append(get"
    },
    {
        "original": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
        "sampled": "\"\"\"\n        if set_sum == 0:\n            return True\n        if n == 0 and set_sum!= 0:\n            return False\n        if set_sum < 0:\n            return False\n        return is_subset_sum(n-1, set_sum-nums[n-1], set_sum) or is_subset_sum(n-1, set_sum, set_sum-nums[n-1])\n    n = len(nums)\n    return is_subset_sum(n-1, sum(nums),"
    },
    {
        "original": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ",
        "sampled": "\"\"\"\n        import re\n        pattern = r\"[A-Z][a-z]+\"\n        matches = re.findall(pattern, s)\n        return 'Yes' if matches else 'No'\n    return [test(s) for s in li]"
    },
    {
        "original": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ",
        "sampled": "\"\"\"\n        i = 1\n        while True:\n            if math.factorial(i) % x == 0:\n                return i\n            i += 1"
    },
    {
        "original": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ",
        "sampled": "\"\"\"\n        return [t for t in li1 if t not in li2]"
    },
    {
        "original": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
        "sampled": "\"\"\"\n        if len(arr) < 2:\n            return -1\n        max_palindrome = -1\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if str(arr[i]) == str(arr[i])[::-1] and str(arr[j]) == str(arr[j])[::-1]:\n                    if arr[i]*arr[j] > max_palindrome:\n                        max_palindrome = arr[i]*"
    },
    {
        "original": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
        "sampled": "\"\"\"\n        numerator = 1\n        denominator = 1\n        for i in range(k):\n            numerator *= n - i\n            denominator *= i + 1\n        return numerator / denominator\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns True if the given number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:"
    },
    {
        "original": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup",
        "sampled": "\"\"\"\n        return sorted(tuples, key=lambda x: x[-1])"
    },
    {
        "original": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area",
        "sampled": "\"\"\"\n        import math\n        return (5 * num) / 2 * num\n    def is_prime(num: int) -> bool:\n        \"\"\"\n        Returns True if the input number is prime, False otherwise.\n        Args:\n        num (int): An integer to check for primality.\n        Returns:\n        bool: True if the input number is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0"
    },
    {
        "original": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "sampled": "\"\"\"\n        if not arr:\n            return 0\n        max_val = max(arr)\n        return arr.count(max_val)\n    return sum(frequency_Of_Largest(i, arr) for i in range(1, n+1))"
    },
    {
        "original": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ",
        "sampled": "\"\"\"\n        return set()"
    },
    {
        "original": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total",
        "sampled": "\"\"\"\n        n = len(li)\n        return (li[0]*(1-r**n))/(1-r)\n    if len(li) < 3:\n        return li\n    for i in range(len(li)-2):\n        li[i+2] = sum_gp(li[i], li[i+1], li[i+2])\n    return li"
    },
    {
        "original": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
        "sampled": "\"\"\"\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return True\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n    def binary_search_tree(arr: List[int]) -> bool:\n        \"\"\"\n        Given a sorted array of integers, this function checks if the array represents a binary search tree. \n        If the array"
    },
    {
        "original": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons",
        "sampled": " (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264), (1.0, 9.660254037844387)], [(-5.0, 16.588457268119896), (-5.0, 19.30127018922193), (-2.0, 18.123105625617614"
    },
    {
        "original": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ",
        "sampled": "\"\"\"\n        decimal = 0\n        for i, bit in enumerate(binary):\n            decimal += bit * 2**(len(binary)-1-i)\n        return str(decimal)\n    def integer_to_binary(n: int) -> str:\n        \"\"\"\n        Converts an integer to binary tuple.\n        Args:\n            n: An integer to be converted to binary tuple.\n            Your code should pass these tests:\n            assert integer_to_binary(105) == '110101'\n        assert integer_to_binary(101)"
    },
    {
        "original": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)",
        "sampled": "\"\"\"\n        import re\n        return re.sub(r'[a-z]', '', s)\n    return [remove_lowercase(s) for s in li]"
    },
    {
        "original": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums",
        "sampled": "\"\"\"\n        import heapq\n        heap = []\n        for num in li:\n            if len(heap) < k:\n                heapq.heappush(heap, num)\n            else:\n                if num < heap[0]:\n                    heapq.heappushpop(heap, num)\n        return heap"
    },
    {
        "original": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA",
        "sampled": "\"\"\"\n        pi = 3.141592653589793\n        r = radius\n        l = slant_height\n        return pi*r*l\n    def surfacearea_sphere(radius: float) -> float:\n        \"\"\"\n        Calculates the surface area of a sphere.\n        Args:\n        radius (float): The radius of the sphere.\n        Returns:\n        float: The surface area of the sphere.\n        Your code should pass these tests:\n        assert surfacearea_sphere(5)==78.53981633974483\nassert"
    },
    {
        "original": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd",
        "sampled": "\"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    def lcm(a: int, b: int) -> int:\n        \"\"\"\n        Returns the least common multiple of two positive integers.\n        Args:\n        a (int): A positive integer.\n        b (int): A positive integer.\n        Returns:\n        int: The least common multiple of a and b.\n        Raises:\n        ValueError: If either a or b is not a positive integer.\n        \"\"\"\n        if"
    },
    {
        "original": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter",
        "sampled": "\"\"\"\n        diameter = 2 * radius\n        return diameter\n    return sum(diameter_circle(radius) for radius in radii)"
    },
    {
        "original": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ",
        "sampled": "\"\"\"\n        return''.join(li)\n    longest_concatenated = ''\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            concatenated = concatenate_elements(li[i:j])\n            if len(concatenated) > len(longest_concatenated):\n                longest_concatenated = concatenated\n    return longest_concatenated"
    }
]