[
    {
        "original": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
        "sampled": "            Problem Description:\n            Given a cost matrix cost[][] where cost[i][j] represents the cost of the cheapest path from (i, 0) to (j, n). Find the minimum cost path for (m, n) from (0, 0) to (m, n).\n            Input:\n            The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\n            The first line of each test case contains two space-separated integers m and n.\n            The next line contains m*n space"
    },
    {
        "original": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
        "sampled": "            Problem Description:\n            You are given two tuple lists. Each tuple list contains a list of integers.\n            You need to find the similar elements from the two tuple lists.\n            The similar elements are the elements that appear in both tuple lists.\n            The similar elements are not necessarily in the same order.\n            The similar elements should be returned as a list of integers.\n            The similar elements should be unique.\n            The similar elements should be in the same order as they appear in the first tuple list.\n            The similar elements should be in the same order as they appear in the second tuple list"
    },
    {
        "original": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
        "sampled": "            Problem Description:\n            A number is called a prime number if it is only divisible by 1 and itself.\n            For example, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, "
    }
]