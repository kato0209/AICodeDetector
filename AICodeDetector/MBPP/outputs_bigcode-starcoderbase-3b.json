[
    {
        "original": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
        "sampled": "'''\ndef min_cost(cost, m, n):\n    if m == 0 and n == 0:\n        return 0\n    elif m == 0:\n        return cost[0][n] + min_cost(cost, 0, n - 1)\n    elif n == 0:\n        return cost[m][0] + min_cost(cost, m - 1, 0)\n    else:\n        return min(cost[m][n], cost[m - 1][n] + cost[m][n - 1]) + min_cost"
    },
    {
        "original": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
        "sampled": "def similar_elements(a, b):\n    \"\"\"\n    >>> similar_elements((3, 4, 5, 6),(5, 7, 4, 10))\n    (4, 5)\n    >>> similar_elements((1, 2, 3, 4),(5, 4, 3, 7))\n    (3, 4)\n    >>> similar_elements((11, 12, 14, 13),(17, 15, 14, 13))\n    (13, 14"
    },
    {
        "original": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
        "sampled": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\nassert is_prime(10) == True\nassert is_prime(35) == True\nassert is_prime(2) == False\nassert is"
    },
    {
        "original": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "sampled": "'''\ndef heap_queue_largest(nums,k):\n    heapq.heapify(nums)\n    for i in range(k):\n        heapq.heappop(nums)\n    return nums\nprint(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3))\nprint(heap_queue_largest([25, 35, 22, 85, 14, 65, 75"
    },
    {
        "original": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] ",
        "sampled": "\"\"\"\ndef count_ways(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return count_ways(n-1) + count_ways(n-2)\nassert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131"
    },
    {
        "original": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)",
        "sampled": "\"\"\"\ndef differ_At_One_Bit_Pos(x,y):\n    if x & y == 0:\n        return True\n    else:\n        return False\nprint(differ_At_One_Bit_Pos(13,9))\nprint(differ_At_One_Bit_Pos(15,8))\nprint(differ_At_One_Bit_Pos(2,4))"
    },
    {
        "original": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
        "sampled": "def find_char_long(text):\n    # your code here\n    return re.findall(r'\\w{4,}', text)\nassert find_char_long('Please move back to stream') == ['Please','move', 'back','stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']\n# +\n# 1.2.3"
    },
    {
        "original": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums",
        "sampled": "\"\"\"\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,"
    },
    {
        "original": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ",
        "sampled": "def find_Rotations(s):\n    # your code here\n    # return the minimum number of rotations required to get the same string\n    # if the string is the same, return 0\n    # if the string is not the same, return the minimum number of rotations required to get the same string\n    # if the string is empty, return -1\n    # if the string is None, return -1\n    # if the string is not a string, return -1\n    # if the string is not a string, return -1\n    # if the string is not a string, return -1\n    #"
    },
    {
        "original": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest",
        "sampled": "\"\"\"\ndef small_nnum(arr,n):\n    return sorted(arr)[:n]\nprint(small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))\nprint(small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 1"
    },
    {
        "original": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
        "sampled": "'''\ndef remove_Occ(str,char):\n    if char in str:\n        return str.replace(char,'')\n    else:\n        return str\nprint(remove_Occ(\"hello\",\"l\"))\nprint(remove_Occ(\"abcda\",\"a\"))\nprint(remove_Occ(\"PHP\",\"P\"))"
    },
    {
        "original": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
        "sampled": "'''\ndef sort_matrix(matrix):\n    # Write your code here\n    matrix.sort(key=lambda x: sum(x))\n    return matrix\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\nprint(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))\nprint(sort_matrix([[5,8,9],[6,4,3],[2,1,4]]))"
    },
    {
        "original": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
        "sampled": "\"\"\"\ndef count_common(words):\n    \"\"\"\n    >>> count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])\n    [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    >>> count_common(['one', 'two', 'three', 'four', 'five', 'one', '"
    },
    {
        "original": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
        "sampled": "\"\"\"\ndef find_Volume(a,b,c):\n    return (a+b+c)/2*min(a,b,c)\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\""
    },
    {
        "original": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
        "sampled": "def split_lowerstring(s):\n    \"\"\"\n    >>> split_lowerstring(\"AbCd\")\n    ['bC', 'd']\n    >>> split_lowerstring(\"Python\")\n    ['y', 't', 'h', 'o', 'n']\n    >>> split_lowerstring(\"Programming\")\n    ['r', 'o', 'g', 'r', 'a','m','m', 'i', 'n', 'g']\n    \"\"\"\n    return [s[i:i+2] for i in range(len(s)) if s[i].islower()]\ndef"
    },
    {
        "original": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "sampled": "def text_lowercase_underscore(text):\n    \"\"\"\n    >>> text_lowercase_underscore(\"aab_cbbbc\")\n    'Found a match!'\n    >>> text_lowercase_underscore(\"aab_Abbbc\")\n    'Not matched!'\n    >>> text_lowercase_underscore(\"Aaab_abbbc\")\n    'Not matched!'\n    \"\"\"\n    if text.lower().count('_') == 0:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\ndef text_lowercase_underscore(text):\n    \"\"\"\n    >>> text_lowercase_underscore(\"aab_cbbbc\")\n    '"
    },
    {
        "original": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
        "sampled": "def square_area(side):\n    return side**2\nassert square_area(10)==100\nassert square_area(5)==25\nassert square_area(4)==16\ndef square_perimeter(side):\n    return side*4\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16\ndef square_perimeter(side):\n    return side*4\nassert square_perimeter(10)==40\nassert square"
    },
    {
        "original": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "sampled": "def remove_dirty_chars(s1, s2):\n    \"\"\"\n    >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n    'bacuve'\n    >>> remove_dirty_chars(\"digitalindia\", \"talent\")\n    'digiidi'\n    >>> remove_dirty_chars(\"exoticmiles\", \"toxic\")\n    'emles'\n    \"\"\"\n    return s1.replace(s2, '')\ndef remove_dirty_chars(s1, s2):\n    \"\"\"\n    >>> remove_dirty_chars(\"probasscurve\", \"pros\")"
    },
    {
        "original": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
        "sampled": "def test_duplicate_set(test_duplicate):\n    assert test_duplicate_set(([1,2,3,4,5]))==False\nassert test_duplicate_set(([1,2,3,4, 4]))==True\nassert test_duplicate_set([1,1,2,2,3,3,4,4,5])==True\ndef test_duplicate_list(test_duplicate):\n    assert test_duplicate_list(([1,2,3,4,5]))==False\nassert test_duplicate_list(([1,2,"
    },
    {
        "original": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
        "sampled": "def is_woodall(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\ndef is_woodall(n):\n    return n % 2 == 0\ndef is_woodall(n):\n    return n % 2 == 0\ndef is_woodall(n):\n    return n % 2 == 0\ndef is_woodall(n):\n    return n % 2 == 0\ndef is_woodall(n):\n    return n % 2 == 0\ndef is"
    },
    {
        "original": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
        "sampled": "\"\"\"\ndef multiples_of_num(n,m):\n    return [n*i for i in range(1,m+1)]\nprint(multiples_of_num(4,3))\nprint(multiples_of_num(2,5))\nprint(multiples_of_num(9,2))"
    },
    {
        "original": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
        "sampled": "\"\"\"\ndef find_first_duplicate(arr):\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return -1\nprint(find_first_duplicate([1, 2, 3, 4, 4, 5]))\nprint(find_first_duplicate([1, 2, 3, 4]))\nprint(find_first_duplicate([1, 1, 2, 3, 3, 2, 2"
    },
    {
        "original": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
        "sampled": "\"\"\"\ndef maximum_Sum(matrix):\n    max_sum = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if i == 0 and j == 0:\n                max_sum = matrix[i][j]\n            elif i == 0:\n                max_sum = max(max_sum, matrix[i][j] + matrix[i][j-1])\n            elif j == 0:\n                max_sum = max(max_sum, matrix[i][j] + matrix[i-1"
    },
    {
        "original": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
        "sampled": "def decimal_to_binary(n):\n    \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(100)\n    '101010'\n    >>> decimal_to_binary(1000)\n    '10101010'\n    >>> decimal_to_binary(10000)\n    '1010101010'\n    >>> decimal_to_binary(100000)\n    '10101010"
    },
    {
        "original": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
        "sampled": "\"\"\"\ndef find_Product(arr, n):\n    # Write your code here\n    arr = list(set(arr))\n    arr.sort()\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    return prod\nprint(find_Product([1,1,2,3],4))\nprint(find_Product([1,2,3,1,1],5))\nprint(find_Product([1,1,4,5,6],5))"
    },
    {
        "original": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
        "sampled": "\"\"\"\ndef check_k_elements(tuple_list, k):\n    if len(tuple_list) == 0:\n        return False\n    if len(tuple_list) == 1:\n        return True\n    if len(tuple_list) == 2:\n        return tuple_list[0][0] == tuple_list[1][0]\n    if len(tuple_list) == 3:\n        return tuple_list[0][0] == tuple_list[1][0] and tuple_list[0][1] == tuple_list[2][0]"
    },
    {
        "original": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
        "sampled": "'''\ndef remove(words):\n    return [word for word in words if not word.isdigit()]\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    },
    {
        "original": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
        "sampled": "def binomial_Coeff(n,k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\ndef binomial_Coeff(n,k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n"
    },
    {
        "original": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
        "sampled": "\"\"\"\ndef get_Odd_Occurrence(arr,n):\n    arr = sorted(arr)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == n:\n            count += 1\n    return count\nprint(get_Odd_Occurrence([1,2,3,1,2,3,1],7))\nprint(get_Odd_Occurrence([1,2,3,2,3,1,3],7))\nprint(get_Odd_Occurrence([2,3,5,4,5,2,4"
    },
    {
        "original": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "sampled": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[len(s)-1-i]:\n            count += 1\n    return count\nprint(count_Substring_With_Equal_Ends(\"abc\"))\nprint(count_Substring_With_Equal_Ends(\"abcda\"))\nprint(count_Substring_With_Equal_Ends(\"ab\"))<jupyter_output>3\n6\n2<jupyter_text>**Q2. Write a python function to count the number of vow"
    },
    {
        "original": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
        "sampled": ", 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],2)==[2, 5]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],4"
    },
    {
        "original": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
        "sampled": "def max_Prime_Factors(n):\n    # Your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, n+1, 2):\n            if n % i == 0:\n                return i\n        return n\nassert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2"
    },
    {
        "original": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
        "sampled": "def decimal_To_Binary(n):\n    return bin(n)[2:]\ndef decimal_To_Binary(n):\n    return bin(n)[2:]\ndef decimal_To_Binary(n):\n    return bin(n)[2:]\ndef decimal_To_Binary(n):\n    return bin(n)[2:]\ndef decimal_To_Binary(n):\n    return bin(n)[2:]\ndef decimal_To_Binary(n):\n    return bin(n)[2:]\ndef decimal_To_Binary(n):\n    return bin"
    },
    {
        "original": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
        "sampled": "def find_missing(arr,n):\n    for i in range(n):\n        if arr[i]!= i+1:\n            return i+1\n    return n+1\nprint(find_missing([1,2,3,5],4))\nprint(find_missing([1,3,4,5],4))\nprint(find_missing([1,2,3,5,6,7],5))<jupyter_output>2\n4\n4<jupyter_text>**Q2. Write a python function to find the missing number in a sorted array. Your code should pass these tests:**"
    },
    {
        "original": "def find_rect_num(n):\r\n  return n*(n + 1) ",
        "sampled": "def find_rect_num(n):\n    \"\"\"\n    >>> find_rect_num(4)\n    20\n    >>> find_rect_num(5)\n    30\n    >>> find_rect_num(6)\n    42\n    \"\"\"\n    return n * (n + 1) // 2\ndef find_rect_num(n):\n    \"\"\"\n    >>> find_rect_num(4)\n    20\n    >>> find_rect_num(5)\n    30\n    >>> find_rect_num(6)\n    42\n    \"\"\"\n    return n * (n +"
    },
    {
        "original": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
        "sampled": "\"\"\"\ndef find_Nth_Digit(n, d1, d2):\n    \"\"\"\n    :type n: int\n    :type d1: int\n    :type d2: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return d1\n    elif n == 2:\n        return d2\n    else:\n        return find_Nth_Digit(n-1, d2, d1+d2)\nprint(find_Nth_Digit(1, 2, 1))\nprint(find_Nth_Digit(3,"
    },
    {
        "original": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
        "sampled": "\"\"\"\ndef sort_mixed_list(l):\n    l.sort()\n    return l\ndef sort_mixed_list(l):\n    l.sort(key=lambda x: x if isinstance(x, int) else x.lower())\n    return l\ndef sort_mixed_list(l):\n    l.sort(key=lambda x: x if isinstance(x, int) else x.lower())\n    return l\ndef sort_mixed_list(l):\n    l.sort(key=lambda x: x if isinstance(x, int) else x."
    },
    {
        "original": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
        "sampled": "\"\"\"\ndef div_even_odd(l):\n    even = 0\n    odd = 0\n    for i in l:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even + odd\nprint(div_even_odd([1,3,5,7,4,1,6,8]))\nprint(div_even_odd([1,2,3,4,5,6,7,8,9,10]))\nprint(div_even_odd([1,5,7"
    },
    {
        "original": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
        "sampled": "def rearange_string(s):\n    if len(s) < 2:\n        return s\n    if s[0] == s[1]:\n        return rearange_string(s[1:])\n    if s[1] == s[2]:\n        return rearange_string(s[0] + s[2] + s[1])\n    if s[0] == s[2]:\n        return rearange_string(s[1] + s[2] + s[0])\n    return rearange_string(s[0] + s[1] + s["
    },
    {
        "original": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
        "sampled": "0,40,50,60,70,80,90,100]])==({100: 1, 90: 1, 80: 1, 70: 1, 60: 1, 50: 1, 40: 1, 30: 1, 20: 1, 15: 1})\nassert freq_element([[1,2,3,4,5,6,7,8,9,10]])==({1: "
    },
    {
        "original": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
        "sampled": "\"\"\"\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x%2==0, numbers))\nprint(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(filter_evennumbers([10,20,45,67,84,93]))\nprint(filter_evennumbers([5,7,9,8,6,4,3]))"
    },
    {
        "original": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
        "sampled": "def find_Sum(arr,n):\n    arr.sort()\n    sum = 0\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            sum += arr[i]\n    return sum\nprint(find_Sum([1,2,3,1,1,4,5,6],8))\nprint(find_Sum([1,2,3,1,1],5))\nprint(find_Sum([1,1,2],3))\n# +\n# 1. Write a function"
    },
    {
        "original": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
        "sampled": "def text_match(text):\n    # Your code here\n    return 'Found a match!' if re.search(r'([a-z])_([a-z])', text) else 'Not matched!'\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'\ndef text_match(text):\n    # Your code here\n    return 'Found a match!' if re.search(r'([a-"
    },
    {
        "original": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "sampled": "def text_match_string(text):\n    if text.startswith('python'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\ndef text_match_string(text):\n    if text.startswith('python'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\ndef text_match_string(text):\n    if text.startswith('python'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\ndef text_match_string(text):\n    if text.startswith('python'):\n        return 'Found"
    },
    {
        "original": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
        "sampled": "def get_gcd(arr):\n    # your code here\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return get_gcd(arr[1:])\nassert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2\ndef get_gcd(arr):\n    # your code here\n    if len(arr) == 1"
    },
    {
        "original": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
        "sampled": "def test_distinct(nums):\n    for i in range(len(nums)):\n        if nums.count(nums[i]) > 1:\n            return False\n    return True\ndef test_distinct(nums):\n    return len(set(nums)) == len(nums)\ndef test_distinct(nums):\n    return len(set(nums)) == len(nums)\ndef test_distinct(nums):\n    return len(set(nums)) == len(nums)\ndef test_distinct(nums):\n    return len(set(nums)) == len(nums)"
    },
    {
        "original": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
        "sampled": "\"\"\"\ndef compute_Last_Digit(a,b):\n    return a%b\nassert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2"
    },
    {
        "original": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
        "sampled": "def odd_bit_clear_number(n):\n    \"\"\"\n    >>> odd_bit_clear_number(10)\n    15\n    >>> odd_bit_clear_number(20)\n    21\n    >>> odd_bit_clear_number(30)\n    31\n    \"\"\"\n    return n & 0x5555555555555555\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
        "sampled": "\"\"\"\ndef specified_element(matrix, element):\n    if element == 0:\n        return [row[0] for row in matrix]\n    elif element == 1:\n        return [row[1] for row in matrix]\n    elif element == 2:\n        return [row[2] for row in matrix]\n    else:\n        return []\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0))\nprint(specified_element"
    },
    {
        "original": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
        "sampled": " */\n        def min_length_list(list_of_lists):\n            return min(map(lambda x: len(x), list_of_lists))\n        assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (1, [0])\n        assert min_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1,"
    },
    {
        "original": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
        "sampled": "def check_scalene(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\nassert check_scalene(6,8,12)==False\nassert check_scalene(6,6,12)==False\nassert check_scalene(6,6,6)==True\ndef check_isoceles(a,b,c):\n    if a+b>c and a+c==b or a+b==c and b+c==a"
    },
    {
        "original": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
        "sampled": "\"\"\"\ndef parallelogram_area(base,height):\n    return base*height\nassert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\""
    },
    {
        "original": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ",
        "sampled": "'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''"
    },
    {
        "original": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list",
        "sampled": "'''\ndef counting_sort(array):\n    # Write your code here\n    count = [0] * (max(array) + 1)\n    for i in array:\n        count[i] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    res = []\n    for i in array:\n        res.append(array[count[i] - 1])\n        count[i] -= 1\n    return res\nprint(counting_sort([1,23,4,5,6"
    },
    {
        "original": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
        "sampled": "def tn_gp(n,k,t):\n    \"\"\"\n    >>> tn_gp(1,5,2)\n    16\n    >>> tn_gp(1,5,4)\n    256\n    >>> tn_gp(2,6,3)\n    486\n    \"\"\"\n    return n*t**k\ndef tn_gp_rec(n,k,t):\n    \"\"\"\n    >>> tn_gp_rec(1,5,2)\n    16\n    >>> tn_gp_rec(1,5,4)\n    256\n    >>> tn_gp"
    },
    {
        "original": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ",
        "sampled": "def check(num):\n    return num < 2 * num[::-1]\ndef check(num):\n    return num < 2 * int(str(num)[::-1])\ndef check(num):\n    return num < 2 * int(str(num)[::-1])\ndef check(num):\n    return num < 2 * int(str(num)[::-1])\ndef check(num):\n    return num < 2 * int(str(num)[::-1])\ndef check(num):\n    return num < 2 * int(str"
    },
    {
        "original": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
        "sampled": "\"\"\"\ndef find_Max_Num(digits,n):\n    digits.sort()\n    max_num = 0\n    for i in range(n):\n        max_num = max_num * 10 + digits[i]\n    return max_num\nprint(find_Max_Num([1,2,3],3))\nprint(find_Max_Num([4,5,6,1],4))\nprint(find_Max_Num([1,2,3,9],4))"
    },
    {
        "original": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ",
        "sampled": "\"\"\"\ndef opposite_Signs(a,b):\n    if a*b < 0:\n        return True\n    else:\n        return False\nprint(opposite_Signs(1,-2))\nprint(opposite_Signs(3,2))\nprint(opposite_Signs(-10,-10))"
    },
    {
        "original": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
        "sampled": "\"\"\"\ndef is_octagonal(n):\n    return n * (3 * n - 1) // 2\nprint(is_octagonal(5))\nprint(is_octagonal(10))\nprint(is_octagonal(15))"
    },
    {
        "original": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
        "sampled": "'''\ndef max_len_sub(arr, diff):\n    if len(arr) < 2:\n        return 0\n    max_len = 1\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            continue\n        if arr[i] == arr[i+1] + diff:\n            max_len += 1\n        else:\n            max_len = max(max_len, 1)\n    return max_len\nassert max_len_sub([2, 5, 6, 3, "
    },
    {
        "original": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count",
        "sampled": "\"\"\"\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(len(s)):\n        if i+n <= len(s):\n            if sum(map(int,s[i:i+n])) == n:\n                count += 1\n    return count\nassert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12"
    },
    {
        "original": "def smallest_num(xs):\n  return min(xs)\n",
        "sampled": "def smallest_num(nums):\n    # your code here\n    return min(nums)\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45\n# -\n# ## 2.2.1.2.2.2.2.2.2.2.2.2.2.2.2"
    },
    {
        "original": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ",
        "sampled": "\"\"\"\ndef max_difference(tuples):\n    \"\"\"\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    >>> max_difference([(4, 6), (2, 17), (9, 13), (11, 12)])\n    15\n    >>> max_difference([(12, 35), (21, 27), (13, 23), (41, 22)])\n    23\n    \"\"\"\n    tuples.sort"
    },
    {
        "original": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
        "sampled": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',3"
    },
    {
        "original": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
        "sampled": "\"\"\"\ndef recursive_list_sum(l):\n    if not l:\n        return 0\n    elif isinstance(l[0], list):\n        return recursive_list_sum(l[0]) + recursive_list_sum(l[1:])\n    else:\n        return l[0] + recursive_list_sum(l[1:])\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41"
    },
    {
        "original": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ",
        "sampled": "\"\"\"\ndef pos_count(nums):\n    return sum(1 for num in nums if num > 0)\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\""
    },
    {
        "original": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ",
        "sampled": "\"\"\"\ndef bell_number(n):\n    if n == 1:\n        return 1\n    else:\n        return n * bell_number(n-1)\nprint(bell_number(2))\nprint(bell_number(10))\nprint(bell_number(56))"
    },
    {
        "original": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "sampled": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\ndef is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    if A[0] < A[1]:\n        return True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\ndef is_Mon"
    },
    {
        "original": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set",
        "sampled": "def is_sublist(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            return False\n    return True\nprint(is_sublist([2,4,3,5,7],[3,7]))\nprint(is_sublist([2,4,3,5,7],[4,3]))\nprint(is_sublist([2,4,3,5,7],[1,6]))"
    },
    {
        "original": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")",
        "sampled": "def get_equal(tuples, length):\n    if len(set([len(t) for t in tuples])) == 1:\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'\ndef get_equal(tuples, length):\n    if len(set([len(t) for t in tuples])) == 1:\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'\ndef get_equal(tuples, length):\n    if len(set([len(t) for"
    },
    {
        "original": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums",
        "sampled": " */\n        public static int[] comb_sort(int[] list) {\n            int n = list.length;\n            int gap = n;\n            while (gap > 1) {\n                gap = (gap + 1) / 2;\n                for (int i = 0; i < n - gap; i++) {\n                    if (list[i] > list[i + gap]) {\n                        int temp = list[i];\n                        list[i] = list[i + gap];\n                        list[i + gap] = temp;\n                    }\n                }\n            }\n            return list;\n        }"
    },
    {
        "original": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False",
        "sampled": "def dif_Square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0 and num // i == i:\n            return True\n    return False\nprint(dif_Square(10))\nprint(dif_Square(15))\nprint(dif_Square(5))\nprint(dif_Square(0))\nprint(dif_"
    },
    {
        "original": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))",
        "sampled": "def multiple_split(string):\n    # your code here\n    return re.split(r'\\s*[*]\\s*', string)\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ','Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\n"
    },
    {
        "original": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True",
        "sampled": "\"\"\"\ndef is_samepatterns(patterns, patterns_to_match):\n    if len(patterns)!= len(patterns_to_match):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= patterns_to_match[i]:\n            return False\n    return True\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"]))\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"]))\nprint(is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a"
    },
    {
        "original": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ",
        "sampled": "def find_tuples(tuples, k):\n    # your code here\n    return [t for t in tuples if all(t[i] % k == 0 for i in range(len(t)))]\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7"
    },
    {
        "original": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
        "sampled": "def count_Squares(x,y):\n    return x*x+y*y\ndef count_Squares(x,y):\n    return x*x+y*y\ndef count_Squares(x,y):\n    return x*x+y*y\ndef count_Squares(x,y):\n    return x*x+y*y\ndef count_Squares(x,y):\n    return x*x+y*y\ndef count_Squares(x,y):\n    return x*x+y*y"
    },
    {
        "original": "def is_Diff(n): \r\n    return (n % 11 == 0) ",
        "sampled": " */\n        public static bool is_Diff(int num)\n        {\n            int sum = 0;\n            while (num > 0)\n            {\n                int digit = num % 10;\n                if (digit % 2 == 0)\n                {\n                    sum += digit;\n                }\n                num /= 10;\n            }\n            return sum % 2 == 1;\n        }\n    }\n}"
    },
    {
        "original": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ",
        "sampled": "'''\ndef count_With_Odd_SetBits(n):\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\nassert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8\n'''\n'''\ndef count_With_Odd_SetBits(n):\n    count = 0\n    while n:\n        if"
    },
    {
        "original": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False",
        "sampled": "\"\"\"\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True\n\"\"\"\n\"\"\"\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word"
    },
    {
        "original": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6",
        "sampled": "\"\"\"\ndef tetrahedral_number(n):\n    \"\"\"\n    >>> tetrahedral_number(5)\n    35.0\n    >>> tetrahedral_number(6)\n    56.0\n    >>> tetrahedral_number(7)\n    84.0\n    \"\"\"\n    return n*(n+1)*(n+2)*(n+3)/6\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ",
        "sampled": "\"\"\"\ndef zip_tuples(t1, t2):\n    \"\"\"\n    >>> zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) )\n    [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    >>> zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) )\n    [(8, "
    },
    {
        "original": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume",
        "sampled": "\"\"\"\ndef volume_sphere(radius):\n    return 4/3 * 3.14 * radius ** 3\ndef test_volume_sphere():\n    assert volume_sphere(10)==4188.790204786391\n    assert volume_sphere(25)==65449.84694978735\n    assert volume_sphere(20)==33510.32163829113\n\"\"\"\nExercise 3:\nWrite"
    },
    {
        "original": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)",
        "sampled": "def get_Char_2(str):\n    return ''.join(sorted(str))\nassert get_Char_2(\"abc\") == \"f\"\nassert get_Char_2(\"gfg\") == \"t\"\nassert get_Char_2(\"ab\") == \"c\"\ndef get_Char_3(str):\n    return ''.join(sorted(str, key=str.lower))\nassert get_Char_3(\"abc\") == \"f\"\nassert get_Char_3(\"gfg\") == \"t\"\nassert get_Char_3(\""
    },
    {
        "original": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "sampled": "def sequence(n):\n    \"\"\"\n    >>> sequence(10)\n    6\n    >>> sequence(2)\n    1\n    >>> sequence(3)\n    2\n    \"\"\"\n    return n * (n + 1) // 2\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n# +\n# 10. Write a function to find the n-th number in newman conway sequence.\n# Your code should pass these tests:\ndef sequence(n):\n    \"\"\"\n    >>> sequence(10)\n    6\n    >>> sequence("
    },
    {
        "original": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea",
        "sampled": "\"\"\"\ndef surfacearea_sphere(radius):\n    return 4*math.pi*radius**2\ndef test_surfacearea_sphere():\n    assert surfacearea_sphere(10)==1256.6370614359173\n    assert surfacearea_sphere(15)==2827.4333882308138\n    assert surfacearea_sphere(20)==5026.548245743669\n\"\"\"\nExercise 1.2"
    },
    {
        "original": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
        "sampled": "def centered_hexagonal_number(n):\n    \"\"\"\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(2)\n    7\n    >>> centered_hexagonal_number(9)\n    217\n    \"\"\"\n    return n * (n + 1) // 2\ndef centered_hexagonal_number(n):\n    \"\"\"\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(2)\n    7\n    >>> centered_hex"
    },
    {
        "original": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict",
        "sampled": "\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R':"
    },
    {
        "original": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count",
        "sampled": "'''\ndef freq_count(l):\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\nprint(freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]))\nprint(freq_count([1,2,3,4,3,2,4,1,3,1,4]))\nprint"
    },
    {
        "original": "def closest_num(N):\r\n  return (N - 1)",
        "sampled": "def closest_num(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:"
    },
    {
        "original": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max",
        "sampled": "\"\"\"\ndef len_log(words):\n    \"\"\"\n    >>> len_log([\"python\",\"PHP\",\"bigdata\"])\n    7\n    >>> len_log([\"a\",\"ab\",\"abc\"])\n    3\n    >>> len_log([\"small\",\"big\",\"tall\"])\n    5\n    \"\"\"\n    return max(map(len, words))\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False",
        "sampled": "def find_substring(list_of_strings,substring):\n    for i in list_of_strings:\n        if substring in i:\n            return True\n    return False\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\"))\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\"))\n# +\n# 1. Write a function that takes a string and returns a new string"
    },
    {
        "original": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True",
        "sampled": "def is_undulating(num):\n    if num.count('1') == 1:\n        return True\n    else:\n        return False\nprint(is_undulating(\"1212121\"))\nprint(is_undulating(\"1991\"))\nprint(is_undulating(\"121\"))<jupyter_output>True\nFalse\nTrue<jupyter_text>**Task 2**Write a function to check whether the given number is a palindrome or not. \n            Your code should pass these tests:\n            assert is_palindrome(\"1212121\") == True"
    },
    {
        "original": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
        "sampled": "def power(a,b):\n    \"\"\"\n    >>> power(3,4)\n    81\n    >>> power(2,3)\n    8\n    >>> power(5,5)\n    3125\n    \"\"\"\n    return a**b\ndef power(a,b):\n    \"\"\"\n    >>> power(3,4)\n    81\n    >>> power(2,3)\n    8\n    >>> power(5,5)\n    3125\n    \"\"\"\n    return a**b\ndef power(a,b):\n    \"\"\"\n    >>> power(3,4)\n    81\n    >>> power"
    },
    {
        "original": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ",
        "sampled": "# +\n# 1. Write a function to extract the index minimum value record from the given tuples. \n# Your code should pass these tests:\ndef index_minimum(tuples):\n    if len(tuples) == 0:\n        return None\n    else:\n        min_index = 0\n        min_value = tuples[0][1]\n        for i in range(1, len(tuples)):\n            if tuples[i][1] < min_value:\n                min_index = i\n                min_value = tuples[i][1]\n        return tuples[min_index][0"
    },
    {
        "original": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ",
        "sampled": "'''\ndef Find_Min_Length(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        if arr[0] < arr[1]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 3:\n        if arr[0] < arr[1] and arr[0] < arr[2]:\n            return 1\n        elif arr[1] < arr[0] and arr[1] < arr["
    },
    {
        "original": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x",
        "sampled": "\"\"\"\ndef divisor(n):\n    if n == 1:\n        return 1\n    else:\n        return n + divisor(n-1)\nprint(divisor(15))\nprint(divisor(12))\nprint(divisor(9))"
    },
    {
        "original": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
        "sampled": ",25,30,19],[16,20,25,21]])=={16: 1, 17: 1, 18: 1, 19: 1, 20: 3, 21: 1, 25: 2, 30: 3}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3:"
    },
    {
        "original": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ",
        "sampled": "'''\ndef multiply_num(num_list):\n    return sum(num_list)*1.0/len(num_list)\nprint(multiply_num((8, 2, 3, -1, 7)))\nprint(multiply_num((-10,-20,-30)))\nprint(multiply_num((19,15,18)))"
    },
    {
        "original": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ",
        "sampled": "def binary_to_decimal(binary_number):\n    \"\"\"\n    >>> binary_to_decimal('1000')\n    8\n    >>> binary_to_decimal('10010')\n    18\n    >>> binary_to_decimal('111')\n    7\n    \"\"\"\n    return int(binary_number, 2)\nassert binary_to_decimal('1000') == 8\nassert binary_to_decimal('10010') == 18\nassert binary_to_decimal('111') == 7\ndef binary"
    },
    {
        "original": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i",
        "sampled": "\"\"\"\ndef next_smallest_palindrome(n):\n    \"\"\"\n    >>> next_smallest_palindrome(99)\n    101\n    >>> next_smallest_palindrome(1221)\n    1331\n    >>> next_smallest_palindrome(120)\n    121\n    \"\"\"\n    if n < 10:\n        return n + 1\n    else:\n        return n * 10 + 1\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]",
        "sampled": "\"\"\"\ndef kth_element(arr, k, i):\n    if i == len(arr):\n        return None\n    if i == k:\n        return arr[i]\n    if i > k:\n        return kth_element(arr, k, i+1)\n    else:\n        return kth_element(arr, k, i+1)\nprint(kth_element([12,3,5,7,19], 5, 2))\nprint(kth_element([17,24,8,23], 4,"
    },
    {
        "original": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "sampled": "def camel_to_snake(camel_string):\n    \"\"\"\n    Convert camel case string to snake case string.\n    \"\"\"\n    # TODO: Write your code here\n    return camel_string.replace('_','').replace(' ', '_').lower()\nassert camel_to_snake('PythonProgram')=='python_program'\nassert camel_to_snake('PythonLanguage')=='python_language'\nassert camel_to_snake('ProgrammingLanguage')=='programming_language'\ndef snake_to_pascal(snake_string):\n    \"\"\"\n    Convert snake case string to Pascal case string"
    },
    {
        "original": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "sampled": "def eulerian_num(n, m):\n    \"\"\"\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(4, 1)\n    11\n    >>> eulerian_num(5, 3)\n    26\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        return eulerian_num(n - 1, m + m)\ndef eulerian_num_2(n, m):\n    \"\"\"\n    >>> eulerian_num_2(3, 1)\n    4"
    },
    {
        "original": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r",
        "sampled": "\"\"\"\ndef sort_sublists(sublists):\n    return sorted(sublists, key=lambda x: x[0])\nprint(sort_sublists(([\"red\",\"green\"],[\"blue\",\"black\"],[\"orange\",\"brown\"])))\nprint(sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"])))\nprint(sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])))\nprint(sort_sublists(([\" red"
    },
    {
        "original": "def count(lst):   \r\n    return sum(lst) ",
        "sampled": "\"\"\"\ndef count(lst):\n    return sum(lst)\ndef test_count():\n    assert count([True,False,True]) == 2\n    assert count([False,False]) == 0\n    assert count([True,True,True]) == 3\ntest_count()\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\""
    },
    {
        "original": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ",
        "sampled": "def add_tuples(list1, list2):\n    \"\"\"\n    >>> add_tuples([5, 6, 7], (9, 10))\n    (9, 10, 5, 6, 7)\n    >>> add_tuples([6, 7, 8], (10, 11))\n    (10, 11, 6, 7, 8)\n    >>> add_tuples([7, 8, 9], (11, 12))\n    (11, 12, 7, "
    },
    {
        "original": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ",
        "sampled": "def count_Hexadecimal(start,end):\n    count=0\n    for i in range(start,end+1):\n        if(i%16==0):\n            count+=1\n    return count\nprint(count_Hexadecimal(10,15))\nprint(count_Hexadecimal(2,4))\nprint(count_Hexadecimal(15,16))<jupyter_output>6\n0\n1<jupyter_text>Problem 2: Write a Python function to count the number of vowels in a given string. The vowels are as follows: a, e, i,"
    },
    {
        "original": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)",
        "sampled": " 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8"
    },
    {
        "original": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ",
        "sampled": "def odd_Equivalent(binary_string,n):\n    count = 0\n    for i in range(n):\n        if binary_string[i] == '1':\n            count += 1\n    return count\nprint(odd_Equivalent(\"011001\",6))\nprint(odd_Equivalent(\"11011\",5))\nprint(odd_Equivalent(\"1010\",4))\n# +\n# 2. Write a python function to find the count of rotations of a binary string with even value.\n# Your code should pass these"
    },
    {
        "original": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ",
        "sampled": "52), (2, 15), (19, 52), (19, 38), (50, 52)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 50) == [(1, 7), (2, 50), (2, 15), (19, 50), (19, 38), (50, 50)]\nassert extract_missing([(7, 2), (15,"
    },
    {
        "original": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result",
        "sampled": "assert common_in_nested_lists([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,"
    },
    {
        "original": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ",
        "sampled": "def perimeter(r,h):\n    return 2*3.14*r*h\nassert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8\ndef perimeter(r,h):\n    return 2*3.14*r*h\nassert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8\ndef perimeter("
    },
    {
        "original": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False",
        "sampled": "def check_integer(s):\n    if s.isdigit():\n        return True\n    else:\n        return False\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True\ndef check_integer(s):\n    if s.isdigit():\n        return True\n    else:\n        return False\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True\ndef check_integer(s):\n    if s.isdigit():"
    },
    {
        "original": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ",
        "sampled": "), (11, 13, 10)] ) == '[(11, 13, 10, 3), (17, 21, 2), (4, 2, 3, 1), (9, 2, 1)]'\nassert assign_freq([(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3), (4, 5, 6), (7, 8, 9)] ) == '[(1"
    },
    {
        "original": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit",
        "sampled": "def empty_list(l):\n    return all(map(bool, l))\nassert empty_list([1,2,3])==True\nassert empty_list([1,2])==False\nassert empty_list([])==True\ndef empty_tuple(t):\n    return all(map(bool, t))\nassert empty_tuple((1,2,3))==True\nassert empty_tuple((1,2))==False\nassert empty_tuple(())==True\ndef empty_set(s):\n    return not s\nassert empty_set({"
    },
    {
        "original": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result",
        "sampled": "def tuple_to_int(t):\n    return sum(t)\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567\n# +\n# 1.1.1.2\n# Write a function that takes a string and returns a string with the first letter capitalized.\n# Your code should pass these tests:\nassert capitalize_first_letter(\"hello\")==\"Hello"
    },
    {
        "original": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ",
        "sampled": " ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'\nassert list_to_float( [(\"1\", \"26.45\"), (\"3\", \"4\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(1.0, 26.45), (3.0, 4.0), (7.32, 8.0), (4"
    },
    {
        "original": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst",
        "sampled": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list.\n    \"\"\"\n    return string.split()\ndef string_to_list_v2(string):\n    \"\"\"\n    Convert a string to a list.\n    \"\"\"\n    return string.split()\ndef string_to_list_v3(string):\n    \"\"\"\n    Convert a string to a list.\n    \"\"\"\n    return string.split()\ndef string_to_list_v4(string):\n    \"\"\"\n    Convert a string to a list.\n    \"\"\"\n    return string.split()\ndef"
    },
    {
        "original": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)",
        "sampled": "def search(arr, target):\n    # Write your code here\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        if arr[0] == target:\n            return 0\n        else:\n            return -1\n    if arr[0] == target:\n        return 0\n    if arr[0] > target:\n        return search(arr[1:], target)\n    else:\n        return search(arr[1:], target)\nprint(search([1,1,3,3,4,4,5,5,7,"
    },
    {
        "original": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max",
        "sampled": "'''\ndef max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0] * tuples[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\nassert max_product_tuple([(10, "
    },
    {
        "original": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)",
        "sampled": "\"\"\"\ndef check_triplet(array, sum, a, b):\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            for k in range(j+1, len(array)):\n                if array[i] + array[j] + array[k] == sum:\n                    if array[i] == a and array[j] == b:\n                        return True\n    return False\nprint(check_triplet([2, 7, 4, 0, 9, 5, 1, "
    },
    {
        "original": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ",
        "sampled": "'''\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    elif n == 50:\n        return 273\n    elif n == 1000:\n        return 2664\n    else:\n        return smartNumber(n-1) + smartNumber(n-2)\nprint(smartNumber(1))\nprint(smartNumber(50))\nprint(smartNumber(1000))\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''"
    },
    {
        "original": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
        "sampled": "\"\"\"\ndef amicable_numbers_sum(n):\n    \"\"\"\n    >>> amicable_numbers_sum(999)\n    504\n    >>> amicable_numbers_sum(9999)\n    31626\n    >>> amicable_numbers_sum(99)\n    0\n    \"\"\"\n    if n < 2:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return 0\n    if n % 3 =="
    },
    {
        "original": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
        "sampled": "def angle_complex(a,b):\n    return np.angle(a+b)\nassert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966\ndef angle_complex(a,b):\n    return np.angle(a"
    },
    {
        "original": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0",
        "sampled": " * 3\nassert find_length(\"11011101100101\", 15) == 3 * 3\nassert find_length(\"11011101100101\", 16) == 4 * 3\nassert find_length(\"11011101100101\", 17) == 5 * 3\nassert find_length(\"11011101100101\", 18) == 6 * 3"
    },
    {
        "original": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum",
        "sampled": "\"\"\"\ndef sum_of_common_divisors(a,b):\n    \"\"\"\n    >>> sum_of_common_divisors(10,15)\n    6\n    >>> sum_of_common_divisors(100,150)\n    93\n    >>> sum_of_common_divisors(4,6)\n    3\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        a,b = b,a\n    if a %"
    },
    {
        "original": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
        "sampled": "def multiply_int_2(a,b):\n    return a*b\nassert multiply_int_2(10,20)==200\nassert multiply_int_2(5,10)==50\nassert multiply_int_2(4,8)==32\ndef multiply_int_3(a,b):\n    return a*b\nassert multiply_int_3(10,20)==200\nassert multiply_int_3(5,10)==50\nassert multiply_int_3(4,8)=="
    },
    {
        "original": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t",
        "sampled": "# +\ndef long_words(n,words):\n    return [w for w in words if len(w)>n]\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']\n# -\n# ### 2.1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2."
    },
    {
        "original": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True",
        "sampled": "\"\"\"\ndef magic_square_test(matrix):\n    if len(matrix)!= len(matrix[0]):\n        return False\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j]!= i+j+1:\n                return False\n    return True\ndef magic_square(matrix):\n    if len(matrix)!= len(matrix[0]):\n        return False\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i]["
    },
    {
        "original": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result",
        "sampled": "\"\"\"\ndef max_occurrences(l):\n    \"\"\"\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n    >>> max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\n    >>> max"
    },
    {
        "original": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string",
        "sampled": "def reverse_vowels_2(s):\n    return ''.join(reversed(list(filter(lambda x: x in 'aeiou', s))))\nassert reverse_vowels_2(\"Python\") == \"Python\"\nassert reverse_vowels_2(\"USA\") == \"ASU\"\nassert reverse_vowels_2(\"ab\") == \"ab\"\ndef reverse_vowels_3(s):\n    return ''.join(reversed(list(filter(lambda x: x in 'aeiouAEIOU', s))))\nassert reverse_"
    },
    {
        "original": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str",
        "sampled": "# 2. Write a function that takes a string and returns a string with all vowels replaced by 'X'. \n# For example, 'hello' yields 'hXloX'.\n# You may use the string.replace() method.\n# You may assume the string is all lowercase.\n# You may assume that the string contains only lowercase letters.\n# You may assume that the string has at least one character.\ndef vowel_replace(s):\n    vowels = 'aeiou'\n    for i in range(len(s)):\n        if s[i] in"
    },
    {
        "original": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
        "sampled": "\"\"\"\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x<0, nums))\nprint(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))\nprint(sum_negativenum([10,15,-14,13,-18,12,-20]))\nprint(sum_negativenum([19, -65, 57, 39, "
    },
    {
        "original": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ",
        "sampled": " */\n        public static string check_last(int[] arr, int p, int q)\n        {\n            int last = arr[arr.Length - 1];\n            int sum = 0;\n            for (int i = 0; i < p; i++)\n            {\n                sum += last;\n            }\n            if (sum % 2 == 0)\n            {\n                return \"EVEN\";\n            }\n            else\n            {\n                return \"ODD\";\n            }\n        }\n    }\n}"
    },
    {
        "original": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ",
        "sampled": "\"\"\"\ndef hexagonal_num(n):\n    return n * (n + 1) * (2 * n + 1) / 6\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91"
    },
    {
        "original": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total",
        "sampled": "\"\"\"\ndef cal_electbill(hours):\n    if hours <= 40:\n        return hours * 0.25\n    elif hours <= 80:\n        return hours * 0.50\n    else:\n        return hours * 0.75\nprint(cal_electbill(75))\nprint(cal_electbill(265))\nprint(cal_electbill(100))"
    },
    {
        "original": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "sampled": " */\n        public static double zero_count(int[] arr) {\n            int count = 0;\n            for (int i = 0; i < arr.length; i++) {\n                if (arr[i] == 0) {\n                    count++;\n                }\n            }\n            return (double)count / arr.length;\n        }\n        /*\n            You are an exper Python programmer, and here is your task:\n            Write a function to find the ration of zeroes in an array of integers. \n            Your code should pass these tests:\n            assert zero_count([0, 1, 2"
    },
    {
        "original": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True",
        "sampled": "def is_Sum_Of_Powers_Of_Two_2(n):\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two_2(n//2)\n    else:\n        return False\nassert is_Sum_Of_Powers_Of_Two_2(10) == True\nassert is_Sum_Of_Powers_Of_Two_2(7) == False\nassert is_Sum_Of_Powers_Of_Two_2("
    },
    {
        "original": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter",
        "sampled": "\"\"\"\ndef circle_circumference(radius):\n    return 2*3.14*radius\nprint(circle_circumference(10))\nprint(circle_circumference(5))\nprint(circle_circumference(4))"
    },
    {
        "original": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ",
        "sampled": "\"\"\"\ndef extract_singly(tup_list):\n    singly_list = []\n    for tup in tup_list:\n        if len(tup) == 1:\n            singly_list.append(tup[0])\n    return singly_list\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3"
    },
    {
        "original": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums",
        "sampled": " */\n        public static List<int> pancake_sort(List<int> list)\n        {\n            int n = list.Count;\n            int[] arr = new int[n];\n            for (int i = 0; i < n; i++)\n            {\n                arr[i] = list[i];\n            }\n            int[] arr2 = new int[n];\n            for (int i = 0; i < n; i++)\n            {\n                arr2[i] = i;\n            }\n            int[] arr3 = new int[n];\n            for (int i = 0;"
    },
    {
        "original": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result",
        "sampled": "\"\"\"\ndef count_samepair(list1,list2,list3):\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\nprint(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))\nprint(count_samepair([1,2,"
    },
    {
        "original": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ",
        "sampled": "# +\ndef find_lists(lists):\n    count = 0\n    for i in lists:\n        if type(i) == list:\n            count += 1\n    return count\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2"
    },
    {
        "original": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum",
        "sampled": "def sum_Pairs(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += abs(arr[i]-arr[j])\n    return sum\nprint(sum_Pairs([1,8,9,15,16],5))\nprint(sum_Pairs([1,2,3,4],4))\nprint(sum_Pairs([1,2,3,4,5,7,9,11,14],9))\n# +\n# 1"
    },
    {
        "original": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ",
        "sampled": "'''\ndef max_Abs_Diff(arr, n):\n    # Write your code here\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\nprint(max_Abs_Diff((2,1,5,3),4))\nprint(max_Abs_Diff((9,3,2,5,1),5))\nprint(max_"
    },
    {
        "original": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])",
        "sampled": "def ascii_value_string(string):\n    return len(string)\nassert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76\ndef ascii_value_string(string):\n    return sum(ord(c) for c in string)\nassert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76\ndef ascii_value_string(string):"
    },
    {
        "original": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]",
        "sampled": "'''\ndef max_path_sum(triangle, i, j):\n    if i == len(triangle) - 1:\n        return triangle[i][j]\n    return max(triangle[i][j], triangle[i][j] + max(max_path_sum(triangle, i + 1, j), max_path_sum(triangle, i + 1, j + 1)))\ndef max_path_sum(triangle, i, j):\n    if i == len(triangle) - 1:\n        return triangle[i][j]\n    return max"
    },
    {
        "original": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
        "sampled": "def sum_digits_twoparts(n):\n    \"\"\"\n    >>> sum_digits_twoparts(35)\n    17\n    >>> sum_digits_twoparts(7)\n    7\n    >>> sum_digits_twoparts(100)\n    19\n    \"\"\"\n    return n//10 + n%10\ndef sum_digits_twoparts(n):\n    \"\"\"\n    >>> sum_digits_twoparts(35)\n    17\n    >>> sum_digits_twoparts(7)\n    7\n    >>> sum_digits_twoparts"
    },
    {
        "original": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result",
        "sampled": "def longest_subseq_with_diff_two(arr, diff):\n    \"\"\"\n    >>> longest_subseq_with_diff_two([1, 2, 3, 4, 5, 3, 2], 7)\n    6\n    >>> longest_subseq_with_diff_two([10, 9, 4, 5, 4, 8, 6], 7)\n    3\n    >>> longest_subseq_with_diff_two([1, 2, 3, 2, 3, 7, "
    },
    {
        "original": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False",
        "sampled": "\"\"\"\ndef does_Contain_B(a,b,c):\n    if a>b and a>c:\n        return True\n    elif b>a and b>c:\n        return True\n    elif c>a and c>b:\n        return True\n    else:\n        return False\nprint(does_Contain_B(1,7,3))\nprint(does_Contain_B(1,-3,5))\nprint(does_Contain_B(3,2,5))"
    },
    {
        "original": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1",
        "sampled": "def is_coprime(a,b):\n    if a%b==0:\n        return False\n    else:\n        return True\nprint(is_coprime(17,13))\nprint(is_coprime(15,21))\nprint(is_coprime(25,45))\n# +\n# 1. Write a python function to check whether the given number is prime or not.\n# 2. Write a python function to check whether the given number is co-prime or not.\n# 3. Write a python function to"
    },
    {
        "original": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n",
        "sampled": "\"\"\"\ndef merge_sort(array):\n    if len(array) <= 1:\n        return array\n    mid = len(array) // 2\n    left = merge_sort(array[:mid])\n    right = merge_sort(array[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    while left and right:\n        if left[0] <= right[0]:\n            result.append(left[0])\n            left = left[1:]\n        else:\n            result.append(right[0])\n            right = right["
    },
    {
        "original": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
        "sampled": "def parabola_vertex(a, b, c):\n    \"\"\"\n    >>> parabola_vertex(5,3,2)\n    (-0.3, 1.55)\n    >>> parabola_vertex(9,8,4)\n    (-0.4444444444444444, 2.2222222222222223)\n    >>> parabola_vertex(2,4,6)\n    (-1.0, 4.0)\n    \"\"\"\n    # your"
    },
    {
        "original": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result",
        "sampled": "\"\"\"\ndef specified_element(matrix, index):\n    return [matrix[i][index] for i in range(len(matrix))]\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0))\nprint(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2))\nprint(specified_element([["
    },
    {
        "original": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "sampled": "def even_bit_toggle_number(number):\n    \"\"\"\n    >>> even_bit_toggle_number(10)\n    0\n    >>> even_bit_toggle_number(20)\n    30\n    >>> even_bit_toggle_number(30)\n    20\n    \"\"\"\n    # your code here\n    return number ^ (number & 0x55555555)\ndef even_bit_toggle_number(number):\n    \"\"\"\n    >>> even_bit_toggle_number(10)\n    0\n    >>> even_bit_toggle_number("
    },
    {
        "original": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result",
        "sampled": "def tuple_int_str(tup):\n    return tuple(map(int, tup))\nprint(tuple_int_str((('333', '33'), ('1416', '55'))))\nprint(tuple_int_str((('999', '99'), ('1000', '500'))))\nprint(tuple_int_str((('666', '66'), ('1500', '555'))))\n# -\n# ### 1.3.2.2."
    },
    {
        "original": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
        "sampled": "\"\"\"\ndef encode_list(input_list):\n    # Your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    #"
    },
    {
        "original": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ",
        "sampled": "\"\"\"\ndef min_Ops(arr, k, n):\n    # Write your code here\n    # arr = [2,2,2,2]\n    # k = 4\n    # n = 3\n    # arr = [4,2,6,8]\n    # k = 4\n    # n = 3\n    # arr = [21,33,9,45,63]\n    # k = 5\n    # n = 6\n    # arr = [21,33,9,45,63]\n    # k = 5"
    },
    {
        "original": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season",
        "sampled": "def month_season(month, day):\n    if month == 'January':\n        if day <= 31:\n            return'spring'\n        else:\n            return'summer'\n    elif month == 'February':\n        if day <= 29:\n            return'spring'\n        else:\n            return'summer'\n    elif month == 'March':\n        if day <= 31:\n            return'spring'\n        else:\n            return'summer'\n    elif month == 'April':\n        if day <= 30:\n            return'spring'\n        else:\n            return'summer'\n    elif month =="
    },
    {
        "original": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ",
        "sampled": "def solution(a, b, n):\n    if a == 0:\n        return 'No solution'\n    x = -n // b\n    y = n % b\n    return ('x = ', x, ', y = ', y)\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)\ndef"
    },
    {
        "original": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result",
        "sampled": "\"\"\"\ndef remove_elements(list1, list2):\n    \"\"\"\n    >>> remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])\n    [1, 3, 5, 7, 9, 10]\n    >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])\n    [2, 4, "
    },
    {
        "original": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
        "sampled": "\"\"\"\ndef sum_series(n):\n    if n<=0:\n        return 0\n    else:\n        return n+sum_series(n-2)+sum_series(n-4)\nprint(sum_series(6))\nprint(sum_series(10))\nprint(sum_series(9))"
    },
    {
        "original": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
        "sampled": "\"\"\"\ndef area_polygon(n,r):\n    return n*r*r*3.141592653589793\nprint(area_polygon(4,20))\nprint(area_polygon(10,15))\nprint(area_polygon(9,7))"
    },
    {
        "original": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
        "sampled": "def areEquivalent(a,b):\n    if a==b:\n        return True\n    else:\n        return False\ndef areEquivalent(a,b):\n    if a%b==0:\n        return True\n    else:\n        return False\ndef areEquivalent(a,b):\n    if a%b==0:\n        return True\n    else:\n        return False\ndef areEquivalent(a,b):\n    if a%b==0:\n        return True\n    else:\n        return False\ndef areEquivalent(a,b):\n    if a%b==0:\n        return True"
    },
    {
        "original": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ",
        "sampled": "def count_char_position(string):\n    \"\"\"\n    >>> count_char_position(\"xbcefg\")\n    2\n    >>> count_char_position(\"ABcED\")\n    3\n    >>> count_char_position(\"AbgdeF\")\n    5\n    \"\"\"\n    return string.lower().count(string) + string.upper().count(string)\ndef count_char_position(string):\n    \"\"\"\n    >>> count_char_position(\"xbcefg\")\n    2\n    >>> count_char_position(\"ABcED\")\n    3\n    >>> count_char_position(\"Abg"
    },
    {
        "original": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ",
        "sampled": "\"\"\"\ndef find_even_Pair(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] ^ arr[j] % 2 == 0:\n                count += 1\n    return count\nprint(find_even_Pair([5,4,7,2,1],5))\nprint(find_even_Pair([7,2,8,1,0,5,11],7))\nprint(find_even_Pair([1,2,"
    },
    {
        "original": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ",
        "sampled": "# +\ndef next_Power_Of_2(n):\n    \"\"\"\n    >>> next_Power_Of_2(0)\n    1\n    >>> next_Power_Of_2(5)\n    8\n    >>> next_Power_Of_2(17)\n    32\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return"
    },
    {
        "original": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ",
        "sampled": "def frequency(array, number):\n    # Your code here\n    return array.count(number)\nassert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2\n# +\n# 1. Write a function that takes a string and returns the string reversed.\n# 2. Write a function that takes a string and returns the string reversed, but only if the string is"
    },
    {
        "original": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
        "sampled": "\"\"\"\ndef get_pell(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_pell(n-1) + get_pell(n-2)\nassert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408"
    },
    {
        "original": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
        "sampled": "\"\"\"\ndef sum_range_list(list,start,end):\n    sum=0\n    for i in range(start,end+1):\n        sum+=list[i]\n    return sum\nprint(sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12],8,10))\nprint(sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12],5,7))\nprint"
    },
    {
        "original": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter",
        "sampled": "def perimeter_hexagon(n):\n    \"\"\"\n    >>> perimeter_hexagon(5)\n    20\n    >>> perimeter_hexagon(10)\n    60\n    >>> perimeter_hexagon(15)\n    90\n    \"\"\"\n    return 2*n*n\nassert perimeter_hexagon(5)==20\nassert perimeter_hexagon(10)==60\nassert perimeter_hexagon(15)==90\ndef perimeter_square(n):\n    \"\"\"\n    >>> perimeter_square(5)\n    20"
    },
    {
        "original": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count",
        "sampled": "\"\"\"\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] =='s':\n            count += 1\n    return count\nprint(count_occurance(\"letstdlenstdporstd\"))\nprint(count_occurance(\"truststdsolensporsd\"))\nprint(count_occurance(\"makestdsostdworthit\"))"
    },
    {
        "original": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))",
        "sampled": "def remove_splchar(string):\n    return ''.join(c for c in string if c.isalnum())\nprint(remove_splchar('python  @#&^%$*program123'))\nprint(remove_splchar('python %^$@!^&*()  programming24%$^^()    language'))\nprint(remove_splchar('python   ^%&^()(+_)(_^&67)                  program'))<jupyter_output>pythonprogram123\npythonprogramming24language\npython67program"
    },
    {
        "original": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result",
        "sampled": "\"\"\"\ndef group_keyvalue(keyvalue_list):\n    \"\"\"\n    >>> group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])\n    {'yellow': [1, 3], 'blue': [2, 4],'red': [1]}\n    >>> group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])\n    {'python': [1, 2, "
    },
    {
        "original": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0",
        "sampled": "\"\"\"\ndef is_valid_parenthese(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    return not stack\nprint(is_valid_parenthese(\"(){}[]\"))\nprint(is_valid_parenthese(\"()[{)}\"))\nprint(is_valid_parenthese(\"()\"))"
    },
    {
        "original": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter",
        "sampled": "\"\"\"\ndef perimeter_triangle(a,b,c):\n    return a+b+c\nprint(perimeter_triangle(10,20,30))\nprint(perimeter_triangle(3,4,5))\nprint(perimeter_triangle(25,35,45))"
    },
    {
        "original": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ",
        "sampled": "def answer(a,b):\n    for i in range(a,b+1):\n        if i%gcd(a,i)==0 and i%gcd(b,i)==0:\n            return (a,i)\ndef gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\nif __name__ == '__main__':\n    print(answer(3,8))\n    print(answer(2,6))\n    print(answer(1,3))\n'''\n'''\nQuestion 3"
    },
    {
        "original": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')",
        "sampled": "# -\n# # 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2."
    },
    {
        "original": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ",
        "sampled": "def is_num_keith(num):\n    if num % 10 == 0:\n        return True\n    else:\n        return False\ndef is_num_keith(num):\n    return num % 10 == 0\ndef is_num_keith(num):\n    return num % 10 == 0\ndef is_num_keith(num):\n    return num % 10 == 0\ndef is_num_keith(num):\n    return num % 10 == 0\ndef is_num_ke"
    },
    {
        "original": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
        "sampled": "def distance_haversine(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the great-circle distance between two points\n    on the earth (specified in decimal degrees)\n    \"\"\"\n    # convert decimal degrees to radians \n    # https://en.wikipedia.org/wiki/Decimal_degrees\n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math."
    },
    {
        "original": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ",
        "sampled": "def common_prefix_v2(strs):\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    if len(strs) == 2:\n        return strs[0][:min(len(strs[0]), len(strs[1]))]\n    if len(strs) == 3:\n        return strs[0][:min(len(strs[0]), min(len(strs[1]), len(strs[2])))]\n    if len(strs) == 4:\n        return strs"
    },
    {
        "original": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
        "sampled": "\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\""
    },
    {
        "original": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count",
        "sampled": " */\n        public static int count_pairs(int[] arr, int k, int n)\n        {\n            int count = 0;\n            for (int i = 0; i < n; i++)\n            {\n                for (int j = i + 1; j < n; j++)\n                {\n                    if (Math.Abs(arr[i] - arr[j]) == k)\n                    {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n        /*\n            You are an exper Python programmer, and here is your task:\n            Write a function to count all the distinct triplets"
    },
    {
        "original": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum",
        "sampled": " */\n        public static bool greater_specificnum(int[] list, int num)\n        {\n            bool result = false;\n            foreach (int i in list)\n            {\n                if (i > num)\n                {\n                    result = true;\n                }\n            }\n            return result;\n        }\n    }\n}"
    },
    {
        "original": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus",
        "sampled": "assert parabola_focus(2,4,1)==(-1.0, 1.0) \nassert parabola_focus(1,2,3)==(-1.0, 0.0) \nassert parabola_focus(1,2,0)==(-1.0, -0.5) \nassert parabola_focus(0,0,0)==(-1.0, -1.0) \nassert parabola_focus(0,0,1)==(-1.0, -1.0) \nassert"
    },
    {
        "original": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')",
        "sampled": "def check_literals(string, literals):\n    \"\"\"\n    >>> check_literals('The quick brown fox jumps over the lazy dog.',['fox'])\n    'Matched!'\n    >>> check_literals('The quick brown fox jumps over the lazy dog.',['horse'])\n    'Not Matched!'\n    >>> check_literals('The quick brown fox jumps over the lazy dog.',['lazy'])\n    'Matched!'\n    \"\"\"\n    for literal in literals:\n        if re.search(literal, string):\n            return 'Matched!'\n    return 'Not Matched!'\n# -\n# ### 2"
    },
    {
        "original": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
        "sampled": "def longest_common_subsequence(s1, s2, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp["
    },
    {
        "original": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;",
        "sampled": "def prod_Square(n):\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return prod_Square(n//2) and prod_Square(n//2)\n    else:\n        return prod_Square(n//2) and prod_Square(n//2+1)\nassert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True\ndef prod_Square(n):\n    if n == 1:\n        return True\n    elif n"
    },
    {
        "original": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
        "sampled": "\"\"\"\ndef first_Missing_Positive(nums, n):\n    \"\"\"\n    :type nums: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(n):\n        if nums[i] > 0:\n            nums[i] = -nums[i]\n        else:\n            nums[i] = n + 1\n    for i in range(n):\n        if nums[i]!= i + 1:\n            return i + 1\n    return n + 1\nprint(first_Missing_Positive([1,2,"
    },
    {
        "original": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",
        "sampled": "'''\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i%2==0 and j%2==0:\n                count += 1\n    return count\nprint(count_Intgral_Points(1,1,4,4))\nprint(count_Intgral_Points(1,2,1,2))\nprint(count_Intgral"
    },
    {
        "original": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False",
        "sampled": "def check_monthname(monthname):\n    \"\"\"\n    >>> check_monthname(\"January\")\n    True\n    >>> check_monthname(\"February\")\n    False\n    >>> check_monthname(\"March\")\n    True\n    >>> check_monthname(\"April\")\n    True\n    >>> check_monthname(\"May\")\n    True\n    >>> check_monthname(\"June\")\n    True\n    >>> check_monthname(\"July\")\n    True\n    >>> check_monthname(\"August\")\n    True\n    >>> check_monthname(\"September\")\n    True\n    >>> check_monthname(\"October\")\n    True\n    >>>"
    },
    {
        "original": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ",
        "sampled": "def check_String(str):\n    if str.isalpha() and str.isnumeric():\n        return True\n    else:\n        return False\nprint(check_String('thishasboth29'))\nprint(check_String('python'))\nprint(check_String ('string'))<jupyter_output>True\nFalse\nFalse<jupyter_text>**Exercise 3**Write a python function to check whether a string has atleast one capital letter and one number. Your code should pass these tests:assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_"
    },
    {
        "original": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ",
        "sampled": "\"\"\"\ndef remove_tuple(t):\n    \"\"\"\n    >>> remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3))\n    (1, 2, 3, 5)\n    >>> remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8))\n    (2, 3, 4, 5, 6, 7, 8)\n    >>> remove_tuple((11, 12"
    },
    {
        "original": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
        "sampled": "def octal_To_Decimal(octal_num):\n    # your code here\n    return octal_num\ndef test_octal_To_Decimal():\n    assert octal_To_Decimal(25) == 21\n    assert octal_To_Decimal(30) == 24\n    assert octal_To_Decimal(40) == 32\ndef test_octal_To_Decimal_2():\n    assert octal_To_Decimal(10) == 8\n    assert octal_To_Decimal(11) =="
    },
    {
        "original": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res",
        "sampled": "\"\"\"\ndef first(array, element, length):\n    for i in range(length):\n        if array[i] == element:\n            return i\n    return -1\nprint(first([1,2,3,4,5,6,6],6,6))\nprint(first([1,2,2,2,3,2,2,4,2],2,9))\nprint(first([1,2,3],1,3))"
    },
    {
        "original": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ",
        "sampled": "'''\ndef remove_tuples(tuples, k):\n    return [t for t in tuples if len(t)!= k]\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1,"
    },
    {
        "original": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
        "sampled": "\"\"\"\ndef find_exponentio(a, b):\n    \"\"\"\n    >>> find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n    (100000, 4096, 78125, 7776)\n    >>> find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))\n    (1771561, 78125, 167"
    },
    {
        "original": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ",
        "sampled": "\"\"\"\ndef largest_triangle(a,b):\n    \"\"\"\n    a: the length of the semi-major axis\n    b: the length of the semi-minor axis\n    \"\"\"\n    return (a**2+b**2)**0.5\ndef test_largest_triangle():\n    assert largest_triangle(4,2)==10.392304845413264\n    assert largest_triangle(5,7)==4.639421805988064\n    assert largest_triangle(9,1)=="
    },
    {
        "original": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ",
        "sampled": "\"\"\"\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 3\n    elif n == 6:\n        return 4\n    elif n == 7:\n        return 4\n    elif n == 8:\n        return 4\n    elif n == 9:\n        return 4\n    elif"
    },
    {
        "original": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result",
        "sampled": "'''\ndef position_max(l):\n    max_val = max(l)\n    return [i for i, x in enumerate(l) if x == max_val]\nprint(position_max([12,33,23,10,67,89,45,667,23,12,11,10,54]))\nprint(position_max([1,2,2,2,4,4,4,5,5,5,5]))\nprint(position_max([2,1"
    },
    {
        "original": "def chkList(lst): \r\n    return len(set(lst)) == 1",
        "sampled": "def chkList(l):\n    if len(l) == 1:\n        return True\n    elif l[0] == l[1]:\n        return chkList(l[2:])\n    else:\n        return False\nassert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False\n# +\n# 1. Write a python function to check whether the elements in a list are same or not.\n# 2. Your code should pass these tests:\n#"
    },
    {
        "original": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "sampled": "def remove_odd(s):\n    \"\"\"\n    >>> remove_odd(\"python\")\n    'pt'\n    >>> remove_odd(\"program\")\n    'pr'\n    >>> remove_odd(\"language\")\n    'lug'\n    \"\"\"\n    return \"\".join(c for c in s if c % 2 == 1)\nassert remove_odd(\"python\") == \"pt\"\nassert remove_odd(\"program\") == \"pr\"\nassert remove_odd(\"language\") == \"lug\"\ndef remove_vowels(s):\n    \"\"\"\n    >>> remove_vowels(\""
    },
    {
        "original": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ",
        "sampled": "'''\ndef hamming_Distance(a,b):\n    return bin(a^b).count('1')\nprint(hamming_Distance(4,8))\nprint(hamming_Distance(2,4))\nprint(hamming_Distance(1,2))"
    },
    {
        "original": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ",
        "sampled": "'''\ndef count(s, c):\n    count = 0\n    for i in s:\n        if i == c:\n            count += 1\n    return count\nprint(count(\"abcc\",\"c\"))\nprint(count(\"ababca\",\"a\"))\nprint(count(\"mnmm0pm\",\"m\"))"
    },
    {
        "original": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ",
        "sampled": "\"\"\"\ndef inversion_elements(tuple_list):\n    \"\"\"\n    >>> inversion_elements((7, 8, 9, 1, 10, 7))\n    (-8, -9, -10, -2, -11, -8)\n    >>> inversion_elements((2, 4, 5, 6, 1, 7))\n    (-3, -5, -6, -7, -2, -8)\n    >>> inversion_elements((8, 9, 11, 14, 1"
    },
    {
        "original": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "sampled": "# +\ndef concatenate_elements(tuple_list):\n    \"\"\"\n    Concatenate adjacent elements in a list of tuples.\n    >>> concatenate_elements([(\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"), (\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"), (\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")])\n    ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTSRES IS ', 'IS BEST ', 'BEST FOR ', '"
    },
    {
        "original": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]",
        "sampled": "def find_longest_repeating_subseq(s):\n    # Write your code here\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    if len(s) == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return 3\n        else:\n            return 2\n    if len(s) == 4:\n        if s[0] == s["
    },
    {
        "original": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)",
        "sampled": "def is_decimal(number):\n    \"\"\"\n    >>> is_decimal('123.11')\n    True\n    >>> is_decimal('0.21')\n    True\n    >>> is_decimal('123.1214')\n    False\n    \"\"\"\n    return bool(re.match(r\"^-?[0-9]+(\\.[0-9]{1,2})?$\", number))\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap",
        "sampled": "'''\ndef heap_replace(heap, new_item):\n    if heap[0] == new_item:\n        return heap\n    heap[0] = new_item\n    heapify(heap, 0)\n    return heap\ndef heapify(heap, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    largest = i\n    if left < len(heap) and heap[left] > heap[largest]:\n        largest = left\n    if right < len(heap) and heap[right] > heap[largest]:\n        largest ="
    },
    {
        "original": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)",
        "sampled": "def is_allowed_specific_char_2(str):\n    return bool(re.search(r\"^[a-zA-Z0-9]*$\", str))\nassert is_allowed_specific_char_2(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char_2(\"*&%@#!}{\") == False\nassert is_allowed_specific_char_2(\"HELLOhowareyou98765\") == True\ndef is_allowed_specific_char_3(str):\n    return bool(re."
    },
    {
        "original": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ",
        "sampled": "\"\"\"\ndef count_Num(n):\n    count = 0\n    for i in range(1, n+1):\n        if (i & (i - 1)) == 0:\n            count += 1\n    return count\nprint(count_Num(2))\nprint(count_Num(3))\nprint(count_Num(1))"
    },
    {
        "original": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum",
        "sampled": "# +\n# 1. Write a python function to find the sum of fourth power of n natural numbers. \n# 2. Your code should pass these tests:\n# assert fourth_Power_Sum(2) == 17\n# assert fourth_Power_Sum(4) == 354\n# assert fourth_Power_Sum(6) == 2275\ndef fourth_Power_Sum(n):\n    return sum(pow(i, 4) for i in range(1, n+1))\nassert fourth_Power_Sum("
    },
    {
        "original": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "# 3. Write a function that takes a string and returns a string where the first and last characters are swapped.\n#     Your code should pass these tests:\nassert swap_first_and_last(\"Hello\") == \"olleH\"\nassert swap_first_and_last(\"Hi\") == \"iHi\"\nassert swap_first_and_last(\"Hi there\") == \"erethHi\"\nassert swap_first_and_last(\"Hello there\") == \"elloH there\"\nassert swap_first_and_last(\"Hello there!\") == \"!elloH"
    },
    {
        "original": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
        "sampled": "\"\"\"\ndef degree_radian(radian):\n    return radian * 180 / math.pi\nassert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878\n\"\"\"\n\"\"\"\ndef degree_radian(radian):"
    },
    {
        "original": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]",
        "sampled": "'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''"
    },
    {
        "original": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ",
        "sampled": " */\n        public static bool check_subset_list(List<int> list1, List<List<int>> list2)\n        {\n            if (list1.Count == 0)\n                return true;\n            foreach (var item in list2)\n            {\n                if (check_subset_list(list1, item))\n                    return true;\n            }\n            return false;\n        }\n        /*\n            You are an exper Python programmer, and here is your task:\n            Write a function to check if a nested list is a subset of another nested list. \n            Your code should pass these tests:\n            assert check"
    },
    {
        "original": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'",
        "sampled": "def first_Repeated_Char_2(s):\n    if len(s) == 0:\n        return '\\0'\n    elif len(s) == 1:\n        return s[0]\n    else:\n        for i in range(len(s)):\n            if s[i] == s[i+1]:\n                return s[i]\n        return '\\0'\nassert first_Repeated_Char_2(\"Google\") == \"o\"\nassert first_Repeated_Char_2(\"data\") == \"a\"\nassert first_Repeated_Char_2(\"python\") == '\\"
    },
    {
        "original": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1",
        "sampled": "def min_Operations(n, m):\n    # Write your code here\n    if n == m:\n        return 0\n    if n > m:\n        n, m = m, n\n    if n == 0:\n        return m\n    if m == 0:\n        return n\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    if n == m - 1:\n        return 1\n    if n == m + 1:\n        return 2\n    if n == m + 2:\n        return 3\n    if n == m + 3"
    },
    {
        "original": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ",
        "sampled": "\"\"\"\ndef extract_min_max(tup, k):\n    if k == 1:\n        return min(tup), max(tup)\n    else:\n        return extract_min_max(tup[1:], k-1) + (min(tup), max(tup))\ndef extract_min_max_2(tup, k):\n    if k == 1:\n        return min(tup), max(tup)\n    else:\n        return min(tup), max(tup), extract_min_max(tup[1:], k-1)\ndef extract_min_"
    },
    {
        "original": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))",
        "sampled": "# +\ndef replace_max_specialchar(string, n):\n    \"\"\"\n    Replace the maximum n occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    string = string.replace(' ','')\n    string = string.replace(',','')\n    string = string.replace('.','')\n    string = string.replace('?','')\n    string = string.replace('!','')\n    string = string.replace(';','')\n    string = string.replace(':','')\n    string = string.replace('\\'','')\n    string = string.replace('\"','')\n    string = string."
    },
    {
        "original": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even",
        "sampled": "\"\"\"\ndef first_even(numbers):\n    for i in numbers:\n        if i % 2 == 0:\n            return i\nprint(first_even([1, 3, 5, 7, 4, 1, 6, 8]))\nprint(first_even([2, 3, 4]))\nprint(first_even([5, 6, 7]))"
    },
    {
        "original": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
        "sampled": "def check_type(tuple_):\n    \"\"\"\n    >>> check_type((5, 6, 7, 3, 5, 6) )\n    True\n    >>> check_type((1, 2, \"4\") )\n    False\n    >>> check_type((3, 2, 1, 4, 5) )\n    True\n    \"\"\"\n    return all(type(x) == type(tuple_[0]) for x in tuple_)\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
        "sampled": "\"\"\"\ndef is_majority(arr, n, k):\n    # Write your code here\n    count = 0\n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\nif __name__ == \"__main__\":\n    arr = [1, 1, 2, 4, 4, 4, 6, 6]\n    n = len(arr)\n    k = 4\n    print(is_majority(arr, n,"
    },
    {
        "original": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ",
        "sampled": "\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2"
    },
    {
        "original": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ",
        "sampled": "'''\ndef find_Min(arr,start,end):\n    if start == end:\n        return arr[start]\n    mid = (start+end)//2\n    if arr[mid] > arr[end]:\n        return find_Min(arr,start,mid-1)\n    else:\n        return find_Min(arr,mid+1,end)\nprint(find_Min([1,2,3,4,5],0,4))\nprint(find_Min([4,6,8],0,2))\nprint(find_Min([2,3"
    },
    {
        "original": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result",
        "sampled": "# +\ndef odd_values_string(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 1)\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\n# +\ndef odd_values_string(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 1)\nassert"
    },
    {
        "original": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
        "sampled": "'''\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30\n'''\n'''\n'''\n'''\n'''\n'''\n'''"
    },
    {
        "original": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False",
        "sampled": "\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,m,k):\n    if n >= m and n >= k:\n        return True\n    elif m >= n and m >= k:\n        return True\n    elif k >= n and k >= m:\n        return True\n    else:\n        return False\nprint(all_Bits_Set_In_The_Given_Range(4,1,2))\nprint(all_Bits_Set_In_The_Given_Range(17,2,4))\nprint(all_Bits_Set_"
    },
    {
        "original": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr",
        "sampled": "\"\"\"\ndef re_arrange_array(arr, n):\n    # Write your code here\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    return neg + pos\nprint(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))\nprint(re_arrange_array([12, -14"
    },
    {
        "original": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2",
        "sampled": "\"\"\"\ndef replace_blank(string,char):\n    return string.replace(\" \",char)\nprint(replace_blank(\"hello people\",'@'))\nprint(replace_blank(\"python program language\",'$'))\nprint(replace_blank(\"blank space\",\"-\"))"
    },
    {
        "original": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))",
        "sampled": "'''\ndef max_sum(triangle, k):\n    # Write your code here\n    if len(triangle) == 1:\n        return triangle[0][k-1]\n    else:\n        return max(triangle[i][k-1] + max_sum(triangle, k-1) for i in range(len(triangle)))\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3"
    },
    {
        "original": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest",
        "sampled": "\"\"\"\ndef larg_nnum(l,n):\n    l.sort()\n    return l[-n:]\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))\nprint(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, "
    },
    {
        "original": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface",
        "sampled": "\"\"\"\ndef lateralsuface_cylinder(r,h):\n    return 2*pi*r*h\nprint(lateral_surface_cylinder(10,5))\nprint(lateral_surface_cylinder(4,5))\nprint(lateral_surface_cylinder(4,10))"
    },
    {
        "original": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume",
        "sampled": "def volume_sphere(r):\n    \"\"\"\n    >>> volume_sphere(1)\n    3.141592653589793\n    >>> volume_sphere(2)\n    12.566370614359172\n    >>> volume_sphere(3)\n    27.53968253968254\n    \"\"\"\n    return 4*3.141592653589793*r**3\nassert volume_sphere(1)==3."
    },
    {
        "original": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ",
        "sampled": "def even_bit_clear_number(number):\n    \"\"\"\n    >>> even_bit_clear_number(10)\n    10\n    >>> even_bit_clear_number(20)\n    30\n    >>> even_bit_clear_number(30)\n    30\n    \"\"\"\n    return number & 0x5555555555555555\nassert even_bit_clear_number(10) == 10\nassert even_bit_clear_number(20) == 30\nassert even_bit"
    },
    {
        "original": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;",
        "sampled": "'''\n'''\ndef No_of_Triangle(a,b):\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return 1\n    if a+b>2:\n        return 0\n    if a+b==2:\n        return 1\n    if a+b==3:\n        return 2\n    if a+b==4:\n        return 3\n    if a+b==5:\n        return 4\n    if a+b==6:\n        return 5\n    if a+b==7:\n        return 6"
    },
    {
        "original": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ",
        "sampled": "25, 12): 1, (16, 23): 1}\nassert check_occurences([(1, 1), (1, 1), (1, 1), (1, 1), (1, 1)] ) == {(1, 1): 5}\nassert check_occurences([(1, 1), (1, 1), (1, 1), (1, 1), (1, 1)] ) == {(1, 1): 5}\nassert check_occurences([(1, "
    },
    {
        "original": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ",
        "sampled": "def number_of_substrings_2(s):\n    return sum(1 for i in s if i)\nassert number_of_substrings_2(\"abc\") == 6\nassert number_of_substrings_2(\"abcd\") == 10\nassert number_of_substrings_2(\"abcde\") == 15\ndef number_of_substrings_3(s):\n    return len([i for i in s if i])\nassert number_of_substrings_3(\"abc\") == 6\nassert number_of_sub"
    },
    {
        "original": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]",
        "sampled": "def get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 32\n    if n == 7:\n        return 64\n    if n == 8:\n        return 128\n    if n == 9:"
    },
    {
        "original": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n",
        "sampled": "\"\"\"\ndef replace_list(list, new_list):\n    list.pop()\n    list.extend(new_list)\n    return list\ndef replace_list(list, new_list):\n    list.pop()\n    list.extend(new_list)\n    return list\ndef replace_list(list, new_list):\n    list.pop()\n    list.extend(new_list)\n    return list\ndef replace_list(list, new_list):\n    list.pop()\n    list.extend(new_list)\n    return list\ndef replace_"
    },
    {
        "original": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d",
        "sampled": "(4,3,3)==[[['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']], [['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']], [['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']]]\nassert array_3d(3,3,3)==[[['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']]]\nassert array_3d(2,3,3)==[[['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']]]\nassert array_3d(1,3,3)==[[['*', '*',"
    },
    {
        "original": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total",
        "sampled": "\"\"\"\ndef count_charac(str):\n    count = 0\n    for i in str:\n        count += 1\n    return count\nprint(count_charac(\"python programming\"))\nprint(count_charac(\"language\"))\nprint(count_charac(\"words\"))"
    },
    {
        "original": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ",
        "sampled": "def sort_on_occurence(list_of_tuples):\n    # Your code here\n    return sorted(list_of_tuples, key=lambda x: x[1], reverse=True)\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('"
    },
    {
        "original": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ",
        "sampled": "\"\"\"\ndef next_Perfect_Square(n):\n    # write your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        return 2 * next_Perfect_Square(n // 2)\n    else:\n        return 3 * next_Perfect_Square(n // 3) + 2\nprint(next_Perfect_Square(35))\nprint(next_Perfect_Square(6))\nprint(next_Perfect_Square"
    },
    {
        "original": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum",
        "sampled": " */\n        public static int max_sum(int[] a, int n)\n        {\n            int max = a[0];\n            int sum = a[0];\n            for (int i = 1; i < n; i++)\n            {\n                if (a[i] > a[i - 1])\n                {\n                    sum += a[i];\n                }\n                else\n                {\n                    sum = a[i];\n                }\n                if (sum > max)\n                {\n                    max = sum;\n                }\n            }\n            return max;\n        }\n        /*\n            You are an exper Python programmer, and here is"
    },
    {
        "original": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
        "sampled": "\"\"\"\ndef babylonian_squareroot(n):\n    \"\"\"\n    n: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1.414213562373095\n    else:\n        return babylonian_squareroot(n-1) + babylonian_squareroot(n-2)\nassert babylonian_squareroot(10)==3.162277660168379\nassert"
    },
    {
        "original": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
        "sampled": "\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\""
    },
    {
        "original": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "sampled": "\"\"\"\ndef harmonic_sum(n):\n    return (n-1)/2\nassert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682"
    },
    {
        "original": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
        "sampled": "\"\"\"\ndef intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9]))\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9]))\nprint(intersection_array([1, "
    },
    {
        "original": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ",
        "sampled": "'''\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4))\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8,"
    },
    {
        "original": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list",
        "sampled": "\"\"\"\ndef insert_element(lst, element):\n    \"\"\"\n    :param lst: a list of elements\n    :param element: the element to insert\n    :return: a list of elements with the element inserted before each element\n    \"\"\"\n    return [element] + lst[:-1] + [lst[-1]]\ndef insert_element_2(lst, element):\n    \"\"\"\n    :param lst: a list of elements\n    :param element: the element to insert\n    :return: a list of elements with the element inserted before each element\n    \"\"\"\n    return [element] + lst[:-1] +"
    },
    {
        "original": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ",
        "sampled": "assert convert(1+2j) == (1.0, 2.0)\nassert convert(2+3j) == (2.0, 3.0)\nassert convert(3+4j) == (3.0, 4.0)\nassert convert(4+5j) == (4.0, 5.0)\nassert convert(5+6j) == (5.0, 6.0)\nassert convert(6+7j) == (6.0, 7.0)\nassert convert(7+8j"
    },
    {
        "original": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr",
        "sampled": "\"\"\"\ndef count_integer(l):\n    count = 0\n    for i in l:\n        if type(i) == int:\n            count += 1\n    return count\nprint(count_integer([1,2,'abc',1.2]))\nprint(count_integer([1,2,3]))\nprint(count_integer([1,1.2,4,5.1]))"
    },
    {
        "original": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list",
        "sampled": "# +\ndef words_ae(s):\n    return [w for w in s.split() if w.startswith('a') or w.startswith('e')]\nassert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']\n# -\n# ### 1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2"
    },
    {
        "original": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r",
        "sampled": "\"\"\"\ndef combinations_colors(colors,n):\n    if n==1:\n        return [tuple(colors)]\n    else:\n        return [tuple(colors[:i]+colors[i+1:]) for i in range(len(colors)-n+1)]\nprint(combinations_colors( [\"Red\",\"Green\",\"Blue\"],1))\nprint(combinations_colors( [\"Red\",\"Green\",\"Blue\"],2))\nprint(combinations_colors( [\"Red\",\"Green\",\"Blue\"],3))"
    },
    {
        "original": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr",
        "sampled": "def count_Primes_nums(n):\n    \"\"\"\n    >>> count_Primes_nums(5)\n    2\n    >>> count_Primes_nums(10)\n    4\n    >>> count_Primes_nums(100)\n    25\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count\ndef count_Primes_nums(n):\n    \"\"\"\n    >>> count_Primes_nums(5)\n    2\n    >>> count_Primes_nums(1"
    },
    {
        "original": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)",
        "sampled": "\"\"\"\ndef swap_numbers(x,y):\n    return y,x\nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)"
    },
    {
        "original": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd",
        "sampled": "'''\ndef count_odd(l):\n    return len([x for x in l if x%2])\nprint(count_odd([1, 2, 3, 5, 7, 8, 10]))\nprint(count_odd([10,15,14,13,-18,12,-20]))\nprint(count_odd([1, 2, 4, 8, 9]))"
    },
    {
        "original": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": " 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\nassert maximize_elements(((4, 6), (7, 8), (5, 12), (4, 13)), ((9, 10), (6, 12), (4, 4), (10, 6))) == ((9, 10), (7, 12), (5, 12), (10, 13))\nassert maximize_elements(((5"
    },
    {
        "original": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "sampled": "def newman_prime(n):\n    \"\"\"\n    >>> newman_prime(3)\n    7\n    >>> newman_prime(4)\n    17\n    >>> newman_prime(5)\n    41\n    \"\"\"\n    # TODO: Write your code here\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n"
    },
    {
        "original": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\ndef division_elements(a, b):\n    \"\"\"\n    >>> division_elements((10, 4, 6, 9),(5, 2, 3, 3))\n    (2, 2, 2, 3)\n    >>> division_elements((12, 6, 8, 16),(6, 3, 4, 4))\n    (2, 2, 2, 4)\n    >>> division_elements((20, 14, 36, 18),(5, 7, 6"
    },
    {
        "original": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]",
        "sampled": "def split_two_parts(l, n):\n    # Your code here\n    return l[:n], l[n:]\n# Tests\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y',"
    },
    {
        "original": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d",
        "sampled": "def merge_dict(dict1, dict2):\n    \"\"\"\n    Merge two dictionaries.\n    >>> merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})\n    {'x': 300, 'y': 200, 'a': 100, 'b': 200}\n    >>> merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d"
    },
    {
        "original": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
        "sampled": "def dog_age(age):\n    \"\"\"\n    >>> dog_age(12)\n    61\n    >>> dog_age(15)\n    73\n    >>> dog_age(24)\n    109\n    \"\"\"\n    return age*7\ndef dog_age(age):\n    \"\"\"\n    >>> dog_age(12)\n    61\n    >>> dog_age(15)\n    73\n    >>> dog_age(24)\n    109\n    \"\"\"\n    return age*7\ndef dog_age(age):\n    \"\"\"\n    >>> dog_age(1"
    },
    {
        "original": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]",
        "sampled": "\"\"\"\ndef list_split(l,n):\n    if n==1:\n        return [l]\n    else:\n        return [l[i:i+n] for i in range(0,len(l),n)]\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'],3))\nprint(list_split([1,2,3,4,5,6,7,8,9,"
    },
    {
        "original": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA",
        "sampled": "\"\"\"\ndef lateralsurface_cube(n):\n    return n*n*n\nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\""
    },
    {
        "original": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ",
        "sampled": "\"\"\"\ndef square_Sum(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6\nprint(square_Sum(2))\nprint(square_Sum(3))\nprint(square_Sum(4))"
    },
    {
        "original": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ",
        "sampled": "def find_star_num(n):\n    \"\"\"\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(4)\n    73\n    >>> find_star_num(5)\n    121\n    \"\"\"\n    return n * (n + 1) // 2\ndef find_star_num(n):\n    \"\"\"\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(4)\n    73\n    >>> find_star_num(5)\n    121\n    \"\"\"\n    return n * ("
    },
    {
        "original": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)",
        "sampled": "def ascii_value(char):\n    return ord(char)\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83\nassert ascii_value('a')==97\nassert ascii_value('r')==114\nassert ascii_value('s')==115\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83\nassert ascii_value('a')"
    },
    {
        "original": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum",
        "sampled": "\"\"\"\ndef sum_even_and_even_index(arr, n):\n    \"\"\"\n    :type arr: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\nprint(sum_even_and_even_index([5, 6, 12, 1, 18, 8],6))\nprint(sum_even_and_even_index(["
    },
    {
        "original": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ",
        "sampled": "'''\ndef even_Power_Sum(n):\n    return sum(x**5 for x in range(2,n+1,2))\nprint(even_Power_Sum(2))\nprint(even_Power_Sum(3))\nprint(even_Power_Sum(1))"
    },
    {
        "original": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ",
        "sampled": "# +\ndef rear_extract(records):\n    return [record[1] for record in records]\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]"
    },
    {
        "original": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    >>> substract_elements((10, 4, 5), (2, 5, 18))\n    (8, -1, -13)\n    >>> substract_elements((11, 2, 3), (24, 45,16))\n    (-13, -43, -13)\n    >>> substract_elements((7, 18, 9), (10, 11, 12))\n    (-3, 7,"
    },
    {
        "original": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ",
        "sampled": "def even_binomial_Coeff_Sum_2(n):\n    \"\"\"\n    >>> even_binomial_Coeff_Sum_2(4)\n    8\n    >>> even_binomial_Coeff_Sum_2(6)\n    32\n    >>> even_binomial_Coeff_Sum_2(2)\n    2\n    \"\"\"\n    return sum(binom(n, i) for i in range(2, n+1, 2))\ndef even_binomial_Coeff_Sum_3(n):\n    \"\"\"\n    >>> even_binomial_Coeff_Sum_3("
    },
    {
        "original": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1",
        "sampled": "'''\ndef get_Position(arr,val,pos):\n    if pos == 0:\n        return arr.index(val)\n    else:\n        return get_Position(arr[:pos-1],val,pos-1)\nprint(get_Position([2,5,4],3,2))\nprint(get_Position([4,3],2,2))\nprint(get_Position([1,2,3,4],4,1))"
    },
    {
        "original": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume",
        "sampled": "\"\"\"\ndef volume_cylinder(radius, height):\n    return (3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086"
    },
    {
        "original": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result",
        "sampled": "Pierre Cox': 190},165)=={'Kierra Gentry': 165}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pier"
    },
    {
        "original": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ",
        "sampled": "def count_first_elements(tuple_of_tuples):\n    \"\"\"\n    >>> count_first_elements((1, 5, 7, (4, 6), 10) )\n    3\n    >>> count_first_elements((2, 9, (5, 7), 11) )\n    2\n    >>> count_first_elements((11, 15, 5, 8, (2, 3), 8) )\n    4\n    \"\"\"\n    count = 0\n    for i in range(len(tuple_of_tuples)):\n        if"
    },
    {
        "original": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ",
        "sampled": "def is_num_decagonal(n):\n    \"\"\"\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(7)\n    175\n    >>> is_num_decagonal(10)\n    370\n    \"\"\"\n    return n * (n + 1) // 2\ndef is_num_decagonal(n):\n    \"\"\"\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(7)\n    175\n    >>> is_"
    },
    {
        "original": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
        "sampled": "def sequential_search(arr, elem):\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            return (True, i)\n    return (False, -1)\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],31))\nprint(sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61))"
    },
    {
        "original": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True",
        "sampled": "def all_unique(list):\n    \"\"\"\n    >>> all_unique([1,2,3])\n    True\n    >>> all_unique([1,2,1,2])\n    False\n    >>> all_unique([1,2,3,4,5])\n    True\n    \"\"\"\n    return len(list) == len(set(list))\ndef all_unique_v2(list):\n    \"\"\"\n    >>> all_unique([1,2,3])\n    True\n    >>> all_unique([1,2,1,2])\n    False\n    >>> all_unique([1,2,"
    },
    {
        "original": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
        "sampled": "\"\"\"\ndef sub_list(list1,list2):\n    return list(map(lambda x:x-y,list1,list2))\ndef sub_list(list1,list2):\n    return [x-y for x,y in zip(list1,list2)]\ndef sub_list(list1,list2):\n    return [x-y for x,y in zip(list1,list2)]\ndef sub_list(list1,list2):\n    return [x-y for x,y in zip(list1,"
    },
    {
        "original": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True",
        "sampled": "def validate(n):\n    # Write your code here\n    # return True if the frequency of each digit is less than or equal to the digit itself\n    # return False otherwise\n    # Hint: use a dictionary to store the frequency of each digit\n    # Hint: use a dictionary comprehension to create the dictionary\n    # Hint: use a for loop to iterate through the digits of n\n    # Hint: use a dictionary method to check if a key is in the dictionary\n    # Hint: use a dictionary method to get the value of a key\n    # Hint: use a dictionary method to update the value of a key\n    #"
    },
    {
        "original": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element",
        "sampled": "def check_element(list,element):\n    for i in list:\n        if i==element:\n            return True\n    return False\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"],'blue'))\nprint(check_element([1,2,3,4],7))\nprint(check_element([\"green\", \"green\", \"green\", \"green\"],'green'))\n# +\n# 1. Write a function to check whether a given string is a palindrome.\n# 2. Write a function to check whether a given string is a"
    },
    {
        "original": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "sampled": "def text_match_two_three(text):\n    if text.find('a')!= -1:\n        if text.count('a') >= 2 and text.count('a') <= 3:\n            return 'Found a match!'\n        else:\n            return 'Not matched!'\n    else:\n        return 'Not matched!'\ndef text_match_two_three(text):\n    if text.count('a') >= 2 and text.count('a') <= 3:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\ndef text_"
    },
    {
        "original": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
        "sampled": "\"\"\"\ndef max_sub_array_sum_repeated(arr, k, n):\n    # Write your code here\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, sum(arr[i:i+k]))\n    return max_sum\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))\nprint(max_sub_array_sum_repeated([-1, 10, 20], 3"
    },
    {
        "original": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)",
        "sampled": "\"\"\"\ndef square_Sum(n):\n    \"\"\"\n    >>> square_Sum(2)\n    20\n    >>> square_Sum(3)\n    56\n    >>> square_Sum(4)\n    120\n    \"\"\"\n    return sum(i**2 for i in range(n) if i%2==0)\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
        "sampled": " */\n        public static int modular_inverse(int[] a, int p, int m)\n        {\n            int n = a.Length;\n            int[] x = new int[n];\n            int[] y = new int[n];\n            int[] z = new int[n];\n            int[] u = new int[n];\n            int[] v = new int[n];\n            int[] w = new int[n];\n            int[] t = new int[n];\n            int[] s = new int[n];\n            int[] r = new int[n];\n            int[] q = new int[n"
    },
    {
        "original": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ",
        "sampled": "def even_Days(year):\n    \"\"\"\n    >>> even_Days(100)\n    5\n    >>> even_Days(50)\n    6\n    >>> even_Days(75)\n    2\n    \"\"\"\n    return sum(1 for day in range(1, 366) if day % 2 == 0)\nassert even_Days(100) == 5\nassert even_Days(50) == 6\nassert even_Days(75) == 2\ndef days_in_year(year):\n    \"\"\"\n    >>> days_"
    },
    {
        "original": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
        "sampled": "'''\ndef max_length(list_of_lists):\n    max_length = 0\n    max_list = []\n    for i in range(len(list_of_lists)):\n        if len(list_of_lists[i]) > max_length:\n            max_length = len(list_of_lists[i])\n            max_list = list_of_lists[i]\n    return max_length, max_list\nprint(max_length([[0], [1, 3], [5, 7], [9, 11], [1"
    },
    {
        "original": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
        "sampled": "\"\"\"\ndef count_no_of_ways(n, k):\n    \"\"\"\n    >>> count_no_of_ways(2, 4)\n    16\n    >>> count_no_of_ways(3, 2)\n    6\n    >>> count_no_of_ways(4, 4)\n    228\n    \"\"\"\n    # Write your code here\n    if n == 1:\n        return k\n    if n == 2:\n        return 2 * k\n    if n == 3:\n        return 3 * k\n    if n == 4:\n        return 4"
    },
    {
        "original": "def find(n,m):  \r\n    q = n//m \r\n    return (q)",
        "sampled": "def find(a,b):\n    if b == 0:\n        return a\n    else:\n        return find(b,a%b)\nprint(find(10,3))\nprint(find(4,2))\nprint(find(20,5))\n# +\n# 1. Write a python function to find the sum of all the numbers from 1 to n.\n# 2. Write a python function to find the sum of all the numbers from 1 to n, but only if the number is even.\n# 3. Write a python"
    },
    {
        "original": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s",
        "sampled": "\"\"\"\ndef otherside_rightangle(a,b):\n    return (a+b)**0.5\ndef test_otherside_rightangle():\n    assert otherside_rightangle(7,8)==10.63014581273465\n    assert otherside_rightangle(3,4)==5\n    assert otherside_rightangle(7,15)==16.55294535724685\n\"\"\"\nExercise 2\nWrite a function that takes a string and returns"
    },
    {
        "original": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)",
        "sampled": "def max_val(l):\n    \"\"\"\n    >>> max_val(['Python', 3, 2, 4, 5,'version'])\n    5\n    >>> max_val(['Python', 15, 20, 25])\n    25\n    >>> max_val(['Python', 30, 20, 40, 50,'version'])\n    50\n    \"\"\"\n    return max(l)\ndef max_val_2(l):\n    \"\"\"\n    >>> max_val_2(['Python', 3, 2, 4"
    },
    {
        "original": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
        "sampled": "def sum_div(n):\n    if n==1:\n        return 1\n    else:\n        return n+sum_div(n-1)\ndef sum_div(n):\n    if n==1:\n        return 1\n    else:\n        return n+sum_div(n-1)\ndef sum_div(n):\n    if n==1:\n        return 1\n    else:\n        return n+sum_div(n-1)\ndef sum_div(n):\n    if n==1:\n        return 1\n    else:\n        return n+"
    },
    {
        "original": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ",
        "sampled": "\"\"\"\ndef get_Inv_Count(arr,n):\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your"
    },
    {
        "original": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ",
        "sampled": "7,8,9]])==[1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert flatten_list([1,2,3,4,5,6,7,8,9])==[1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert flatten_list([1,2,3,4,5,6,7,8,9,10])==[1, 2, 3, 4, 5"
    },
    {
        "original": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result",
        "sampled": "['george']])==[['john'], ['mary'], ['george']]\nassert intersection_nested_lists([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16"
    },
    {
        "original": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
        "sampled": "'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''"
    },
    {
        "original": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ",
        "sampled": "'''\ndef count_binary_seq(n):\n    if n == 1:\n        return 2\n    else:\n        return 2 * count_binary_seq(n-1) + count_binary_seq(n-2)\nassert count_binary_seq(1) == 2\nassert count_binary_seq(2) == 6\nassert count_binary_seq(3) == 20"
    },
    {
        "original": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
        "sampled": "def dict_depth(d):\n    # TODO: Write your code here\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n# +\n# 1.2"
    },
    {
        "original": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
        "sampled": "'''\ndef set_Bit_Number(n):\n    # write your code here\n    if n == 0:\n        return 0\n    else:\n        return 1 + set_Bit_Number(n >> 1)\nprint(set_Bit_Number(6))\nprint(set_Bit_Number(10))\nprint(set_Bit_Number(18))"
    },
    {
        "original": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
        "sampled": "'''\ndef solve(arr,n):\n    arr.sort()\n    for i in range(n-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True\nprint(solve([1,0,2],3))\nprint(solve([1,2,0],3))\nprint(solve([1,2,1],3))"
    },
    {
        "original": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ",
        "sampled": " */\n        public static int find_Element(int[] arr, int[][] rotations, int index, int rotations_count)\n        {\n            int[] rotated_arr = new int[arr.Length];\n            int[] rotated_arr_copy = new int[arr.Length];\n            for (int i = 0; i < arr.Length; i++)\n            {\n                rotated_arr[i] = arr[i];\n                rotated_arr_copy[i] = arr[i];\n            }\n            for (int i = 0; i < rotations.Length; i++)\n            {\n                int"
    },
    {
        "original": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()",
        "sampled": "def start_with_p(words):\n    for word in words:\n        if word.startswith('p'):\n            return word.split()[0], word.split()[1]\n    return None, None\nstart_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\nstart_withp([\"Python Programming\",\"Java Programming\"])\nstart_withp([\"Pqrst Pqr\",\"qrstuv\"])\n# +\n# 1. Write a function that takes a string and returns a list of all the words in the string.\n# 2. Write a function that takes"
    },
    {
        "original": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
        "sampled": "\"\"\"\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Write your code here\n    # arr: array of integers\n    # n: size of array\n    # i: index of first element\n    # k: index of kth element\n    # return: maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i \n    # Time complexity: O(n^2)\n    # Space complexity: O(n)\n    # Hint: Use dynamic programming.\n    dp ="
    },
    {
        "original": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
        "sampled": "assert colon_tuplex((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2, 10)==(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nassert colon_tuplex((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2, 100)==((1, 2, 3"
    },
    {
        "original": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result",
        "sampled": "\"\"\"\ndef large_product(a,b,n):\n    \"\"\"\n    a: list of integers\n    b: list of integers\n    n: integer\n    \"\"\"\n    # your code here\n    if n == 1:\n        return [a[0]*b[0]]\n    else:\n        return [max(a[0]*b[0],a[0]*large_product(a[1:],b,n-1),large_product(a,b[1:],n-1))]\nassert large_product([1, 2, 3, 4, 5,"
    },
    {
        "original": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ",
        "sampled": "\"\"\"\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\nprint(maximum(5,10))\nprint(maximum(-1,-2))\nprint(maximum(9,7))"
    },
    {
        "original": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
        "sampled": "def string_to_tuple(string):\n    \"\"\"\n    >>> string_to_tuple(\"python 3.0\")\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    >>> string_to_tuple(\"item1\")\n    ('i', 't', 'e','m', '1')\n    >>> string_to_tuple(\"15.10\")\n    ('1', '5', '.', '1', '0')\n    \"\"\"\n    return tuple(string)\ndef string_to_tuple(string):\n    \"\"\""
    },
    {
        "original": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ",
        "sampled": "def set_right_most_unset_bit(n):\n    \"\"\"\n    >>> set_right_most_unset_bit(10)\n    14\n    >>> set_right_most_unset_bit(12)\n    14\n    >>> set_right_most_unset_bit(15)\n    15\n    \"\"\"\n    # your code here\n    return n & (n-1)\nassert set_right_most_unset_bit(10) == 14\nassert set_right_most_unset_bit(12) == 14\nassert"
    },
    {
        "original": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
        "sampled": "'''\ndef volume_cone(radius,height):\n    return (1/3)*math.pi*radius*radius*height\nprint(volume_cone(5,12))\nprint(volume_cone(10,15))\nprint(volume_cone(19,17))"
    },
    {
        "original": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ",
        "sampled": "def pos_nos(l):\n    return [x for x in l if x > 0]\ndef pos_nos(l):\n    return [x for x in l if x > 0]\ndef pos_nos(l):\n    return [x for x in l if x > 0]\ndef pos_nos(l):\n    return [x for x in l if x > 0]\ndef pos_nos(l):\n    return [x for x in l if x > 0]\ndef pos_nos(l):\n    return [x"
    },
    {
        "original": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)",
        "sampled": "\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    >>> max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3)\n    7\n    >>> max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5)\n    24\n    >>> max_sum_rectangular_grid([ [7, 9, 11, "
    },
    {
        "original": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ",
        "sampled": "def find_Max_Len_Odd(str):\n    \"\"\"\n    >>> find_Max_Len_Odd(\"python language\")\n    'language'\n    >>> find_Max_Len_Odd(\"maximum even length\")\n    'length'\n    >>> find_Max_Len_Odd(\"eve\")\n    '-1'\n    \"\"\"\n    if str == \"\":\n        return \"-1\"\n    if str[0].isalpha():\n        return find_Max_Len_Odd(str[1:])\n    if str[0].isnumeric():\n        return find_Max_Len_Odd(str[1:])\n    if str"
    },
    {
        "original": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ",
        "sampled": "\"\"\"\ndef find_last_occurrence(array, target):\n    \"\"\"\n    >>> find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    3\n    >>> find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)\n    9\n    >>> find_last_occurrence([2, 2, 1, 5, 6,"
    },
    {
        "original": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
        "sampled": "\"\"\"\ndef modified_encode(string):\n    \"\"\"\n    >>> modified_encode('automatically')\n    ['a', 'u', 't', 'o','m', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n    >>> modified_encode('python')\n    ['p', 'y', 't', 'h', 'o', 'n']\n    >>> modified_encode('abracadabra')\n    ['a', 2, 'b', 2, 'r', 3, 'a', 2, '"
    },
    {
        "original": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
        "sampled": "def max_volume(sides):\n    return sides[0] * sides[1] * sides[2]\ndef max_volume(sides):\n    return sides[0] * sides[1] * sides[2]\ndef max_volume(sides):\n    return sides[0] * sides[1] * sides[2]\ndef max_volume(sides):\n    return sides[0] * sides[1] * sides[2]\ndef max_volume(sides):\n    return sides[0] * sides[1] * sides[2]\ndef"
    },
    {
        "original": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
        "sampled": "def find_long_word(s):\n    return re.findall(r'\\b\\w{5,}\\b', s)\nassert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']\ndef find_long_word(s):\n    return re.findall(r'\\b\\w{5,}\\b', s)\nassert find_long_word('"
    },
    {
        "original": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
        "sampled": "def sum_difference(n):\n    return sum(range(n))**2 - sum(range(n)**2)\ndef sum_difference(n):\n    return sum(range(n))**2 - sum(range(n)**2)\ndef sum_difference(n):\n    return sum(range(n))**2 - sum(range(n)**2)\ndef sum_difference(n):\n    return sum(range(n))**2 - sum(range(n)**2)\ndef sum_difference(n):\n    return sum(range(n))"
    },
    {
        "original": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t",
        "sampled": "\"\"\"\ndef find_demlo(n):\n    if n == '111111':\n        return '12345654321'\n    elif n == '1111':\n        return '1234321'\n    elif n == '13333122222':\n        return '123456789101110987654321'\n    else:\n        return str(int(n[::-1])+int(n[1:][::-"
    },
    {
        "original": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result",
        "sampled": "\"\"\"\ndef position_min(l):\n    # your code here\n    return [i for i, x in enumerate(l) if l.index(x) == l.index(min(l))]\nprint(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]))\nprint(position_min([1,2,2,2,4,4,4,5,5,5,5]))\nprint(position_"
    },
    {
        "original": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr",
        "sampled": "\"\"\"\ndef re_arrange(arr, n):\n    if n == 0:\n        return arr\n    else:\n        return re_arrange(arr[n//2:], n//2) + arr[:n//2]\nprint(re_arrange([1, 2, 3, -4, -1, 4], 6))\nprint(re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10))\nprint(re_arrange([4, "
    },
    {
        "original": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ",
        "sampled": "\"\"\"\ndef sum_of_alternates(iterable):\n    \"\"\"\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n    (46, 18)\n    >>> sum_of_alternates((1, 2, 3, 4, 5))\n    (6, 9)\n    >>> sum_of_alternates((6, 7, 8, 9, 4, 5))\n    (21, 18)\n    \"\"\"\n    return sum(iterable[i:"
    },
    {
        "original": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;",
        "sampled": "def get_Min_Squares(n):\n    # your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 1"
    },
    {
        "original": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ",
        "sampled": "\"\"\"\ndef most_occurrences(strings):\n    \"\"\"\n    >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n    'UTS'\n    >>> most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"])\n    'year'\n    >>> most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"])\n    'can'\n    \"\"\"\n    # your code here\n    # Hint: use a dictionary to count"
    },
    {
        "original": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False",
        "sampled": "\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b==c:\n        return True\n    elif a==b or a==c or b==c:\n        return False\n    else:\n        return True\nprint(check_isosceles(6,8,12))\nprint(check_isosceles(6,6,12))\nprint(check_isosceles(6,16,20))"
    },
    {
        "original": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
        "sampled": "'''\ndef rotate_left(l, n, k):\n    if n == 0:\n        return l\n    if n == 1:\n        return l[k:] + l[:k]\n    if n == 2:\n        return l[k+1:] + l[:k+1]\n    if n == 3:\n        return l[k+2:] + l[:k+2]\n    if n == 4:\n        return l[k+3:] + l[:k+3]\n    if n == 5:\n        return l[k+4:] + l[:"
    },
    {
        "original": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ",
        "sampled": "\"\"\"\ndef neg_count(nums):\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count\nprint(neg_count([-1,-2,3,-4,-5]))\nprint(neg_count([1,2,3]))\nprint(neg_count([1,2,-3,-10,20]))"
    },
    {
        "original": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
        "sampled": "# +\ndef find_char(string):\n    # your code here\n    return re.findall(r'(\\w{3,5})', string)\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR','reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']\n# +\nimport re"
    },
    {
        "original": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ",
        "sampled": "def count_unset_bits(n):\n    \"\"\"\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(4)\n    2\n    >>> count_unset_bits(6)\n    1\n    \"\"\"\n    return bin(n).count('0')\ndef count_unset_bits_2(n):\n    \"\"\"\n    >>> count_unset_bits_2(2)\n    1\n    >>> count_unset_bits_2(4)\n    2\n    >>> count_unset_bits_2(6)\n    1\n    \"\"\"\n    return bin(n).count('"
    },
    {
        "original": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict",
        "sampled": "def char_frequency(s):\n    \"\"\"\n    >>> char_frequency('python')\n    {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    >>> char_frequency('program')\n    {'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1,'m': 1}\n    >>> char_frequency('language')\n    {'l': 1, 'a': 2, 'n': 1,"
    },
    {
        "original": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ",
        "sampled": " */\n        public static List<List<string>> Sort(List<List<string>> list)\n        {\n            list.Sort((x, y) => x[1].CompareTo(y[1]));\n            return list;\n        }\n    }\n}"
    },
    {
        "original": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ",
        "sampled": "def check_Validity(a,b,c):\n    if a+b>c and b+c>a and a+c>b:\n        return True\n    else:\n        return False\nprint(check_Validity(1,2,3))\nprint(check_Validity(2,3,5))\nprint(check_Validity(7,10,5))<jupyter_output><empty_output>"
    },
    {
        "original": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
        "sampled": "def ap_sum(a,b,c):\n    return (a+b+c)/3\nprint(ap_sum(1,5,2))\nprint(ap_sum(2,6,4))\nprint(ap_sum(1,4,5))\n# +\n# 1.1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1."
    },
    {
        "original": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
        "sampled": "def check_monthname(monthname):\n    \"\"\"\n    >>> check_monthname(\"January\")\n    True\n    >>> check_monthname(\"February\")\n    True\n    >>> check_monthname(\"March\")\n    False\n    \"\"\"\n    if monthname in [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]:\n        return True\n    else:\n        return False\ndef check_monthnum(monthnum):\n    \"\"\"\n    >>> check_monthnum(\"January\")\n    True"
    },
    {
        "original": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
        "sampled": "def text_match_word_with_punctuation(text):\n    \"\"\"\n    >>> text_match_word_with_punctuation(\"python.\")\n    'Found a match!'\n    >>> text_match_word_with_punctuation(\"  lang .\")\n    'Not matched!'\n    \"\"\"\n    if text.endswith('.'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\nassert text_match_word_with_punctuation(\"python.\")=='Found a match!'\nassert text_match_word_with_punctuation(\"  lang .\")=='Not matched"
    },
    {
        "original": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
        "sampled": "\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\nprint(count_Substring_With_Equal_Ends('aba'))\nprint(count_Substring_With_Equal_Ends('abcab'))\nprint(count_Substring_With_Equal_Ends('abc'))"
    },
    {
        "original": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
        "sampled": "def find_Divisor(a,b):\n    if a>b:\n        return 0\n    else:\n        for i in range(a,b+1):\n            if b%i==0:\n                return i\n        return 0\ndef find_Divisor(a,b):\n    if a>b:\n        return 0\n    else:\n        for i in range(a,b+1):\n            if b%i==0:\n                return i\n        return 0\ndef find_Divisor(a,b):\n    if a>b:\n        return 0\n    else"
    },
    {
        "original": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
        "sampled": "\"\"\"\ndef sum_three_smallest_nums(nums):\n    return min(nums[:3]) + min(nums[3:6]) + min(nums[6:])\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    },
    {
        "original": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)",
        "sampled": "def set_to_tuple(set):\n    \"\"\"\n    >>> set_to_tuple({1, 2, 3, 4, 5})\n    (1, 2, 3, 4, 5)\n    >>> set_to_tuple({6, 7, 8, 9, 10, 11})\n    (6, 7, 8, 9, 10, 11)\n    >>> set_to_tuple({12, 13, 14, 15, 16})\n    ("
    },
    {
        "original": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])",
        "sampled": "\"\"\"\ndef find_minimum_range(arrays):\n    \"\"\"\n    :type arrays: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    # write your code here\n    if len(arrays) == 0:\n        return None\n    if len(arrays[0]) == 0:\n        return None\n    if len(arrays) == 1:\n        return (min(arrays[0]), max(arrays[0]))\n    if len(arrays[0]) == 1:\n        return (min(arrays[0]), max(arrays[0]))\n    if len(arrays"
    },
    {
        "original": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)",
        "sampled": "def dig_let(s):\n    return len(s), len(re.findall(r'[a-zA-Z]', s))\nprint(dig_let(\"python\"))\nprint(dig_let(\"program\"))\nprint(dig_let(\"python3.0\"))\n# +\n# 1.1.2\n# Write a function that takes a string and returns the number of times the letter 'e' appears in the string.\n# For example, the function should return 2 for the string \"hello\".\n# Your code should pass these tests:\n# assert"
    },
    {
        "original": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ",
        "sampled": "def count_Odd_Squares(a,b):\n    count = 0\n    for i in range(a,b+1):\n        if i%2!= 0:\n            count += 1\n            for j in range(1,int(i**0.5)+1):\n                if i%j == 0:\n                    break\n            else:\n                print(i)\n    return count\nprint(count_Odd_Squares(5,100))\nprint(count_Odd_Squares(8,65))\nprint(count_Odd_Squares(2"
    },
    {
        "original": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
        "sampled": "'''\ndef diff_consecutivenums(nums):\n    diff = []\n    for i in range(len(nums)-1):\n        diff.append(nums[i+1]-nums[i])\n    return diff\nprint(diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7]))\nprint(diff_consecutivenums([4, 5, 8, 9, 6, 10]))\nprint(diff_consecutivenums([0, "
    },
    {
        "original": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
        "sampled": "def zigzag(n, k):\n    # write your code here\n    if n == 1:\n        return k\n    else:\n        return zigzag(n-1, k+1)\nprint(zigzag(4, 3))\nprint(zigzag(4, 2))\nprint(zigzag(3, 1))\n# +\n# 10. Write a function that takes a string and returns a new string where all the vowels have been removed.\n# Example:\n# remove_vowels(\"Hello"
    },
    {
        "original": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6",
        "sampled": "\"\"\"\ndef count_Squares(x,y):\n    return x*x + y*y\nprint(count_Squares(4,3))\nprint(count_Squares(1,2))\nprint(count_Squares(2,2))"
    },
    {
        "original": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ",
        "sampled": "def find_ways(n):\n    \"\"\"\n    >>> find_ways(4)\n    2\n    >>> find_ways(6)\n    5\n    >>> find_ways(8)\n    14\n    \"\"\"\n    # Write your code here\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 7\n    if n == 4:\n        return 11\n    if n == 5:\n        return 16\n    if n == 6:\n        return "
    },
    {
        "original": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ",
        "sampled": "\"\"\"\ndef check(s):\n    if s.count('1') % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\nprint(check(\"01010101010\"))\nprint(check(\"name0\"))\nprint(check(\"101\"))"
    },
    {
        "original": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ",
        "sampled": "def minimum_Length(s):\n    # your code here\n    return len(s) - len(set(s))\nassert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2\n# -\n# ## 3.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2"
    },
    {
        "original": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1",
        "sampled": "\"\"\"\ndef first_Element(array, k, n):\n    if k == 1:\n        return array[0]\n    else:\n        for i in range(len(array)):\n            if array[i] == k:\n                return array[i]\n            else:\n                array.remove(array[i])\n        return array[0]\nprint(first_Element([0,1,2,3,4,5],6,1))\nprint(first_Element([1,2,1,3,4],5,2))\nprint(first_Element([2"
    },
    {
        "original": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;",
        "sampled": "\"\"\"\ndef unique_Characters(string):\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return False\n    if string[0] == string[1]:\n        return False\n    if string[0] == string[2]:\n        return False\n    if string[1] == string[2]:\n        return False\n    return True\nassert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False"
    },
    {
        "original": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1",
        "sampled": "\"\"\"\ndef remove_column(nested_list, column_index):\n    \"\"\"\n    >>> remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)\n    [[2, 3], [4, 5], [1, 1]]\n    >>> remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)\n    [[1, 2], [-2, 4], [1, -1]]\n    >>>"
    },
    {
        "original": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn",
        "sampled": "def tn_ap(n,a,b):\n    return (a*n+b)//(n+1)\ndef tn_ap_rec(n,a,b):\n    if n==1:\n        return a\n    else:\n        return tn_ap_rec(n-1,a,b)\ndef tn_ap_rec_2(n,a,b):\n    if n==1:\n        return a\n    else:\n        return tn_ap_rec_2(n-1,b,a+b)\ndef tn_ap_rec_"
    },
    {
        "original": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ",
        "sampled": "def count_Rectangles(r):\n    return 4 * r * r - 4 * r + 1\ndef count_Rectangles(r):\n    return 4 * r * r - 4 * r + 1\ndef count_Rectangles(r):\n    return 4 * r * r - 4 * r + 1\ndef count_Rectangles(r):\n    return 4 * r * r - 4 * r + 1\ndef count_Rectangles(r):\n    return 4 * r * r - 4 * r + "
    },
    {
        "original": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n",
        "sampled": "def find_angle(a,b):\n    return (a+b)/2\nassert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90\ndef find_angle(a,b):\n    return (a+b)/2\nassert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90\ndef find"
    },
    {
        "original": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ",
        "sampled": "\"\"\"\ndef find_max(records):\n    max_val = 0\n    for record in records:\n        if record[1] > max_val:\n            max_val = record[1]\n    return max_val\ndef find_max_v2(records):\n    return max(record[1] for record in records)\ndef find_max_v3(records):\n    return max(record[1] for record in records)\ndef find_max_v4(records):\n    return max(record[1] for record in records)\ndef"
    },
    {
        "original": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)",
        "sampled": "\"\"\"\ndef moddiv_list(a,b):\n    return list(map(lambda x,y: x%y, a, b))\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]\n\"\"\"\n\"\"\"\ndef moddiv"
    },
    {
        "original": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
        "sampled": "'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''\n'''"
    },
    {
        "original": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2",
        "sampled": "def get_carol(n):\n    \"\"\"\n    >>> get_carol(2)\n    7\n    >>> get_carol(4)\n    223\n    >>> get_carol(5)\n    959\n    \"\"\"\n    return n * (n + 1) // 2\ndef get_carol(n):\n    \"\"\"\n    >>> get_carol(2)\n    7\n    >>> get_carol(4)\n    223\n    >>> get_carol(5)\n    959\n    \"\"\"\n    return n * (n + 1) // 2"
    },
    {
        "original": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty",
        "sampled": "\"\"\"\ndef remove_empty(list_of_lists):\n    return [item for sublist in list_of_lists for item in sublist if item]\nprint(remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]))\nprint(remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []]))\nprint(remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []]))"
    },
    {
        "original": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
        "sampled": "'''\ndef max_occurrences(l):\n    max_count = 0\n    max_element = None\n    for i in l:\n        if l.count(i) > max_count:\n            max_count = l.count(i)\n            max_element = i\n    return max_element\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0"
    },
    {
        "original": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ",
        "sampled": "27, 28)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 10) == [(11, 12, 13), (14, "
    },
    {
        "original": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
        "sampled": "def min_flip_to_make_string_alternate(binary_string):\n    # your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    # write your code here\n    #"
    },
    {
        "original": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count",
        "sampled": "def count_Digit(n):\n    count = 0\n    while n > 0:\n        n, r = divmod(n, 10)\n        count += 1\n    return count\nassert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7\ndef count_Digit(n):\n    count = 0\n    while n > 0:\n        n = n // 10\n        count += 1"
    },
    {
        "original": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
        "sampled": "def adjacent_num_product(nums):\n    \"\"\"\n    >>> adjacent_num_product([1,2,3,4,5,6])\n    30\n    >>> adjacent_num_product([1,2,3,4,5])\n    20\n    >>> adjacent_num_product([2,3])\n    6\n    \"\"\"\n    # Your code here\n    if len(nums) < 2:\n        return 0\n    max_product = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_product:\n            max_product"
    },
    {
        "original": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
        "sampled": "\"\"\"\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    if abs(height(root.left) - height(root.right)) > 1:\n        return False\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\ndef height(root):\n    if root is None:\n        return 0\n    return 1 + max(height("
    },
    {
        "original": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ",
        "sampled": "\"\"\"\ndef repeat_tuples(tup, n):\n    \"\"\"\n    >>> repeat_tuples((1, 3), 4)\n    ((1, 3), (1, 3), (1, 3), (1, 3))\n    >>> repeat_tuples((1, 2), 3)\n    ((1, 2), (1, 2), (1, 2))\n    >>> repeat_tuples((3, 4), 5)\n    ((3, 4), (3, 4), (3, 4), (3, 4), ("
    },
    {
        "original": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA",
        "sampled": "\"\"\"\ndef lateralsurface_cuboid(l,b,h):\n    return 2*(l+b+h)\nprint(lateralSurface_cuboid(8,5,6))\nprint(lateralSurface_cuboid(7,9,10))\nprint(lateralSurface_cuboid(10,20,30))"
    },
    {
        "original": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort",
        "sampled": "def float_sort(tuple_list):\n    \"\"\"\n    Sort a tuple by its float element.\n    \"\"\"\n    # TODO: Write your code here\n    return sorted(tuple_list, key=lambda x: float(x[1]))\n# -\n# ## 3.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2."
    },
    {
        "original": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)",
        "sampled": "def smallest_missing(nums, start, end):\n    if start == end:\n        return start\n    mid = (start + end) // 2\n    if nums[mid] == mid:\n        return smallest_missing(nums, start, mid)\n    else:\n        return smallest_missing(nums, mid + 1, end)\ndef smallest_missing(nums, start, end):\n    if start == end:\n        return start\n    mid = (start + end) // 2\n    if nums[mid] == mid:\n        return smallest_missing(nums, start, mid)\n    else"
    },
    {
        "original": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result",
        "sampled": " 6, 7, 8, 9]\nassert heap_assending([1, 2, 3, 4, 5, 6, 7, 8, 9])==[1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_assending([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 2, 3, 4, 5, 6"
    },
    {
        "original": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume",
        "sampled": "\"\"\"\ndef volume_cuboid(l,w,h):\n    return l*w*h\nprint(volume_cuboid(1,2,3))\nprint(volume_cuboid(5,7,9))\nprint(volume_cuboid(10,15,21))"
    },
    {
        "original": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list",
        "sampled": "\"\"\"\ndef permute_string(s):\n    if len(s) == 1:\n        return [s]\n    else:\n        res = []\n        for i in range(len(s)):\n            for j in permute_string(s[:i] + s[i+1:]):\n                res.append(s[i] + j)\n        return res\nassert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert"
    },
    {
        "original": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
        "sampled": "def round_num(num,multiple):\n    return num - (num % multiple)\nprint(round_num(4722,10))\nprint(round_num(1111,5))\nprint(round_num(219,2))\n# + [markdown] id=\"0-y81-15611\"\n# # 10. Write a function to find the sum of the first n natural numbers.\n#\n# You can use the built-in function range() to generate a sequence of numbers.\n#"
    },
    {
        "original": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)",
        "sampled": "\"\"\"\ndef remove_replica(l):\n    # your code here\n    l = list(set(l))\n    l = [x for x in l if l.count(x) == 1]\n    l = [x if l.count(x) == 1 else 'MSP' for x in l]\n    return tuple(l)\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP',"
    },
    {
        "original": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ",
        "sampled": "\"\"\"\ndef remove_Char(str,char):\n    return str.replace(char,'')\nprint(remove_Char(\"aba\",'a'))\nprint(remove_Char(\"toggle\",'g'))\nprint(remove_Char(\"aabbc\",'b'))\n\"\"\"\n\"\"\"\n# 1. Write a python function to remove all occurrences of a character in a given string.\n# 2. Write a python function to remove all occurrences of a substring in a given string.\n# 3. Write a python function to remove all occurrences of a substring in a given"
    },
    {
        "original": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list",
        "sampled": "def move_last(lst):\n    \"\"\"\n    >>> move_last([1,2,3,4])\n    [4,1,2,3]\n    >>> move_last([0,1,2,3])\n    [3,0,1,2]\n    >>> move_last([9,8,7,1])\n    [1,9,8,7]\n    \"\"\"\n    return lst[::-1]\ndef move_last_test():\n    import doctest\n    doctest.testmod()\nif __name__ == '__main__':\n    move_last_test"
    },
    {
        "original": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA",
        "sampled": "\"\"\"\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l+w+h)\nassert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350"
    },
    {
        "original": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n",
        "sampled": "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "original": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
        "sampled": "91, 94), ('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],2)==[('Brady"
    },
    {
        "original": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1",
        "sampled": "'''\ndef find_rotation_count(arr):\n    # Write your code here\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1\n    if len(arr) == 3:\n        if arr[0] > arr[1] and arr[1] > arr[2]:\n            return 1\n        elif arr[0] < arr[1] and arr[1] < arr[2]:\n            return 1\n        else:\n            return 0\n    if len(arr) == 4:\n        if arr"
    },
    {
        "original": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
        "sampled": "def even_bit_toggle_number(number):\n    \"\"\"\n    >>> even_bit_toggle_number(10)\n    15\n    >>> even_bit_toggle_number(20)\n    1\n    >>> even_bit_toggle_number(30)\n    11\n    \"\"\"\n    # your code here\n    return number ^ (number & 0x55555555)\ndef even_bit_toggle_number(number):\n    \"\"\"\n    >>> even_bit_toggle_number(10)\n    15\n    >>> even_bit_toggle_number"
    },
    {
        "original": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "sampled": "\"\"\"\ndef frequency_Of_Smallest(n,arr):\n    # Write your code here\n    arr.sort()\n    return arr[0]\nprint(frequency_Of_Smallest(5,[1,2,3,4,3]))\nprint(frequency_Of_Smallest(7,[3,1,2,5,6,2,3]))\nprint(frequency_Of_Smallest(7,[3,3,6,3,7,4,9]))"
    },
    {
        "original": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)",
        "sampled": "def get_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return n * get_perrin(n-1)\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return n * get_perrin(n-1)\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return n * get_perrin(n-1)\ndef get_perrin(n):\n    if n == 1:"
    },
    {
        "original": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap",
        "sampled": "\"\"\"\ndef swap_count(s):\n    # Write your code here\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            stack.append(i)\n        elif s[i] == ']':\n            if stack:\n                stack.pop()\n            else:\n                stack.append(i)\n    return len(stack)\nassert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1"
    },
    {
        "original": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ",
        "sampled": "\"\"\"\ndef even_or_odd(hex_num):\n    if hex_num.isalnum():\n        if hex_num.islower():\n            return \"Even\"\n        else:\n            return \"Odd\"\n    else:\n        return \"Invalid\"\nprint(even_or_odd(\"AB3454D\"))\nprint(even_or_odd(\"ABC\"))\nprint(even_or_odd(\"AAD\"))\nprint(even_or_odd(\"123\"))\nprint(even_or_odd(\"1234\"))\nprint(even_or"
    },
    {
        "original": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ",
        "sampled": "def highest_Power_of_2(n):\n    \"\"\"\n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(19)\n    16\n    >>> highest_Power_of_2(32)\n    32\n    \"\"\"\n    return 2**n - 1\ndef highest_Power_of_2(n):\n    \"\"\"\n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(19)\n    16\n    >>> highest_Power_of_2"
    },
    {
        "original": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "sampled": "def find_lucas_rec(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas_rec(n-1) + find_lucas_rec(n-2)\nassert find_lucas_rec(9) == 76\nassert find_lucas_rec(4) == 7\nassert find_lucas_rec(3) == 4\ndef find_lucas_rec_memo(n, memo):\n    if n == 0"
    },
    {
        "original": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string",
        "sampled": "'''\ndef add_string(list_of_strings, string):\n    return [string + str(x) for x in list_of_strings]\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0"
    },
    {
        "original": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result",
        "sampled": "kl':{'programs':400}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,"
    },
    {
        "original": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]",
        "sampled": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2\ndef get_max_sum(n"
    },
    {
        "original": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
        "sampled": "\"\"\"\ndef max_length_list(list_of_lists):\n    return max(map(lambda x: len(x), list_of_lists)), max(list_of_lists)\nprint(max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\nprint(max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]))"
    },
    {
        "original": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ",
        "sampled": "def check_distinct(tuple):\n    \"\"\"\n    >>> check_distinct((1, 4, 5, 6, 1, 4))\n    False\n    >>> check_distinct((1, 4, 5, 6))\n    True\n    >>> check_distinct((2, 3, 4, 5, 6))\n    True\n    \"\"\"\n    # Your code here\n    return len(tuple) == len(set(tuple))\ndef check_distinct_2(tuple):\n    \"\"\"\n    >>> check_distinct_2((1, 4, 5, 6"
    },
    {
        "original": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None",
        "sampled": "\"\"\"\ndef first_non_repeating_character(string):\n    \"\"\"\n    >>> first_non_repeating_character(\"abcabc\")\n    >>> first_non_repeating_character(\"abc\")\n    >>> first_non_repeating_character(\"ababc\")\n    \"\"\"\n    # your code here\n    if len(string) == 0:\n        return None\n    elif len(string) == 1:\n        return string[0]\n    else:\n        for i in range(len(string)):\n            if string[i] not in string[i+1:]:\n                return string["
    },
    {
        "original": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ",
        "sampled": "def check_char(str):\n    if str.startswith(str[::-1]):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\nprint(check_char(\"abba\"))\nprint(check_char(\"a\"))\nprint(check_char(\"abcd\"))\n# +\n# 1. Write a function that takes a string and returns a list of its characters.\ndef get_chars(str):\n    return list(str)\nprint(get_chars(\"abc\"))\nprint(get_chars(\"123\"))\nprint(get_chars"
    },
    {
        "original": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
        "sampled": "\"\"\"\ndef median_numbers(a,b,c):\n    return (a+b+c)/3.0\ndef median_numbers(a,b,c):\n    return (a+b+c)/3.0\ndef median_numbers(a,b,c):\n    return (a+b+c)/3.0\ndef median_numbers(a,b,c):\n    return (a+b+c)/3.0\ndef median_numbers(a,b,c):\n    return (a+b+c)/3.0"
    },
    {
        "original": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "sampled": "'''\ndef sum_of_digits(numbers):\n    return sum(map(int, str(numbers)))\nprint(sum_of_digits([10,2,56]))\nprint(sum_of_digits([[10,20,4,5,'b',70,'a']]))\nprint(sum_of_digits([10,20,-4,5,-70]))"
    },
    {
        "original": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "\"\"\"\ndef bitwise_xor(a, b):\n    return tuple(map(lambda x, y: x ^ y, a, b))\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)"
    },
    {
        "original": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)",
        "sampled": "\"\"\"\ndef extract_freq(lst):\n    # Write your code here\n    # return the number of unique tuples in the given list\n    # order irrespective\n    # Hint: Use a dictionary to store the frequency of each tuple\n    # Hint: Use a set to store the unique tuples\n    # Hint: Use a list comprehension to store the unique tuples\n    # Hint: Use a dictionary comprehension to store the frequency of each tuple\n    # Hint: Use a set comprehension to store the unique tuples\n    # Hint: Use a list comprehension to store the unique tuples\n    # Hint: Use a dictionary compreh"
    },
    {
        "original": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "5, 13), (3, 3), (9, 5))) == ((12, 17), (12, 22), (7, 17), (13, 20))\nassert add_nested_tuples(((4, 6), (7, 8), (5, 12), (4, 13)), ((9, 10), (6, 14), (4, 4), (10, 6))) == ((14, 20), (14, 26), ("
    },
    {
        "original": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ",
        "sampled": "\"\"\"\ndef ncr_modp(n,r,p):\n    \"\"\"\n    ncr_modp(n,r,p)\n    n: int\n    r: int\n    p: int\n    return: int\n    \"\"\"\n    if n<0 or r<0 or p<0:\n        raise ValueError(\"n,r,p must be non-negative\")\n    if n==0 or r==0:\n        return 1\n    if r==n:\n        return 1\n    if r>n:\n        return 0\n    if r==1:\n        return n\n    if r==n"
    },
    {
        "original": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False",
        "sampled": "# + id=\"28-715-98\"\ndef is_valid_URL(url):\n    if re.match(r\"^https?://\", url):\n        return True\n    else:\n        return False\n# + id=\"56-927-71\"\nassert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False\n# + [markdown] id"
    },
    {
        "original": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ",
        "sampled": "def minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\ndef minimum(a,b"
    },
    {
        "original": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False",
        "sampled": "def check_tuplex(tup, elem):\n    for i in tup:\n        if i == elem:\n            return True\n    return False\ndef check_tuplex(tup, elem):\n    for i in tup:\n        if i == elem:\n            return True\n    return False\ndef check_tuplex(tup, elem):\n    for i in tup:\n        if i == elem:\n            return True\n    return False\ndef check_tuplex(tup, elem):\n    for i in tup:\n        if i == elem:\n            return True\n    return False\ndef check_tuplex("
    },
    {
        "original": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ",
        "sampled": "def find_Parity(n):\n    if n%2==0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\ndef find_Parity(n):\n    if n%2==0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\ndef find_Parity(n):\n    if n%2==0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\ndef find_Parity(n):\n    if n%2==0:\n        return \"Even Par"
    },
    {
        "original": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
        "sampled": "\"\"\"\ndef rearrange_bigger(n):\n    if n < 10:\n        return False\n    else:\n        return str(int(str(n)[::-1]))[::-1]\nprint(rearrange_bigger(12))\nprint(rearrange_bigger(10))\nprint(rearrange_bigger(102))"
    },
    {
        "original": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
        "sampled": "\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    if not k:\n        return []\n    if len(arr1) < k or len(arr2) < k:\n        return []\n    arr1.sort()\n    arr2.sort()\n    res = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):"
    },
    {
        "original": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min",
        "sampled": "'''\ndef min_product_tuple(tuples):\n    return min(product(t) for t in tuples)\ndef product(t):\n    return t[0]*t[1]\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\nassert min_product_tuple([(10, 20), (15, 2), (5, 10)]) == 30\nassert min_product_tuple([(11, 44), ("
    },
    {
        "original": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val",
        "sampled": "\"\"\"\ndef min_val(l):\n    \"\"\"\n    >>> min_val(['Python', 3, 2, 4, 5,'version'])\n    2\n    >>> min_val(['Python', 15, 20, 25])\n    15\n    >>> min_val(['Python', 30, 20, 40, 50,'version'])\n    20\n    \"\"\"\n    return min(l)\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "sampled": "def camel_to_snake(camel_case_string):\n    \"\"\"\n    Convert a camel case string to snake case string by using regex.\n    Parameters\n    ----------\n    camel_case_string : str\n        A camel case string.\n    Returns\n    -------\n    str\n        A snake case string.\n    \"\"\"\n    # Your code here\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', camel_case_string).lower()\nassert camel_to_snake('AndroidTv') == 'android_tv'\nassert camel_to_snake('GooglePixel') == '"
    },
    {
        "original": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
        "sampled": "\"\"\"\ndef remove_odd(l):\n    return [x for x in l if x % 2!= 0]\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]"
    },
    {
        "original": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result",
        "sampled": ", 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],4)==[]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],5)==[]\nassert extract_nth_element([('Greyson Fulton', 98,"
    },
    {
        "original": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0",
        "sampled": "'''\ndef overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True\n'''\ndef overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return"
    },
    {
        "original": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ",
        "sampled": "\"\"\"\ndef max_Product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: Tuple[int, int]\n    \"\"\"\n    max_product = 0\n    max_product_pair = (0,0)\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (arr[i],arr[j])\n    return max_product_pair"
    },
    {
        "original": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
        "sampled": "def breakSum(n):\n    if n < 3:\n        return n\n    else:\n        return max(breakSum(n//3) + n%3, breakSum(n//3) + breakSum(n//3) + n%3)\nprint(breakSum(12))\nprint(breakSum(24))\nprint(breakSum(23))\n# -\n# ## 1.2.2. 2.1.1. 2.1.2. 2.1.3. 2.1.4."
    },
    {
        "original": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ",
        "sampled": "def group_tuples(tuples):\n    \"\"\"\n    >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n    [('x', 'y', 'z'), ('w', 't')]\n    >>> group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])\n    [('a', 'b', 'c'), ('d', 'e')]\n    >>> group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])\n    [('f', 'g', 'g'), ('h',"
    },
    {
        "original": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList",
        "sampled": "def Find_Max(list):\n    max_length = 0\n    max_list = []\n    for i in list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list\nprint(Find_Max([[1],[1,2],[1,2,3]]))\nprint(Find_Max([[1,1],[1,2,3],[1,5,6,1]]))\nprint(Find_Max([[1,1],[1,2,3],[1,5,6,1"
    },
    {
        "original": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
        "sampled": "\"\"\"\ndef round_and_sum(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns the total sum multiplied by the length of the list.\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\nprint(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 1"
    },
    {
        "original": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
        "sampled": "def cube_Sum(n):\n    \"\"\"\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    288\n    >>> cube_Sum(4)\n    800\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) // 6\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "original": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ",
        "sampled": "def concatenate_list(list_of_strings, delimiter):\n    \"\"\"\n    Concatenates all the strings in the list_of_strings list by the delimiter.\n    Parameters\n    ----------\n    list_of_strings : list\n        A list of strings\n    delimiter : str\n        The delimiter to use for concatenating the strings\n    Returns\n    -------\n    str\n        The concatenated string\n    \"\"\"\n    return delimiter.join(list_of_strings)\nassert concatenate_list([\"ID\", \"is\", 4, \"UTS\"], \"-\") == \"ID-is-4-UTS\"\nassert concatenate_"
    },
    {
        "original": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ",
        "sampled": "def find_Average_Of_Cube(n):\n    return (n**3)/3\ndef find_Average_Of_Cube(n):\n    return n**3/3\ndef find_Average_Of_Cube(n):\n    return n**3/3\ndef find_Average_Of_Cube(n):\n    return n**3/3\ndef find_Average_Of_Cube(n):\n    return n**3/3\ndef find_Average_Of_Cube(n):\n    return n**3/3\ndef find_Average_Of"
    },
    {
        "original": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ",
        "sampled": " */\n        // 1. 2D array\n        // 2. 4D array\n        // 3. 2D array with 0's\n        // 4. 2D array with 0's and 1's\n        // 5. 2D array with 0's and 1's and 2's\n        // 6. 2D array with 0's and 1's and 2's and 3's\n        // 7. 2D array with 0's and 1's and 2's and 3's and 4's\n        // 8"
    },
    {
        "original": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ",
        "sampled": "# +\ndef extract_rear(tup):\n    return [tup[1]]\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r','s']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n# -\n# ### 2.1.2.1.2.2.2.2.2.2.2"
    },
    {
        "original": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
        "sampled": " */\n        public static int count_element_in_list(List<List<int>> list, int element)\n        {\n            int count = 0;\n            foreach (var list1 in list)\n            {\n                if (list1.Contains(element))\n                {\n                    count++;\n                }\n            }\n            return count;\n        }\n        /*\n            You are an exper Python programmer, and here is your task:\n            Write a function to count the number of sublists containing a particular element. \n            Your code should pass these tests:\n            assert count_element_in_list([[1, 3], [5"
    },
    {
        "original": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums",
        "sampled": "\"\"\"\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x%2!=0, numbers))\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9"
    },
    {
        "original": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "sampled": "# +\n# 1. Write a function that takes a string as an argument and returns a string with the first letter of each word capitalized.\n# 2. Your function should return an empty string if the argument is an empty string.\n# 3. Your function should return the same string if the argument is a single word.\n# 4. Your function should return the same string if the argument is a sentence.\n# 5. Your function should return the same string if the argument is a title.\n# 6. Your function should return the same string if the argument is a"
    },
    {
        "original": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
        "sampled": "'''\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\nif __name__ == '__main__':\n    print(shell_sort([12, 23, 4, 5"
    },
    {
        "original": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "def or_tuples(t1, t2):\n    \"\"\"\n    >>> or_tuples((1, 2, 3, 4), (5, 6, 7, 8))\n    (1, 2, 3, 1)\n    >>> or_tuples((8, 9, 11, 12), (7, 13, 14, 17))\n    (0, 9, 10, 1)\n    \"\"\"\n    return (t1[0] or t2[0], t1[1] or t"
    },
    {
        "original": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
        "sampled": "def parabola_directrix(a,b,c):\n    # your code here\n    return 0\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130\n# +\n# 1.1.2\n# Write a function to find the roots of a quadratic equation.\ndef quadratic_roots(a,b,c):\n    # your"
    },
    {
        "original": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
        "sampled": " */\n        public static bool common_element(List<int> list1, List<int> list2)\n        {\n            foreach (var item in list1)\n            {\n                if (list2.Contains(item))\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n        /*\n            You are an exper Python programmer, and here is your task:\n            Write a function that takes a list and returns the length of the longest sublist. \n            Your code should pass these tests:\n            assert longest_sublist([1,2,3,4,5])==1\n            assert longest"
    },
    {
        "original": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median",
        "sampled": "def median_simpson(a,b,c):\n    return (a+b+c)/3\nassert median_simpson(15,25,35)==20\nassert median_simpson(10,20,30)==15\nassert median_simpson(6,9,4)==7.5\ndef median_simpson(a,b,c):\n    return (a+b+c)/3\nassert median_simpson(15,25,35)==20\nassert median_simpson(1"
    },
    {
        "original": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')",
        "sampled": "def check_greater(array, number):\n    \"\"\"\n    >>> check_greater([1, 2, 3, 4, 5], 4)\n    'No, entered number is less than those in the array'\n    >>> check_greater([2, 3, 4, 5, 6], 8)\n    'Yes, the entered number is greater than those in the array'\n    >>> check_greater([9, 7, 4, 8, 6, 1], 11)\n    'Yes, the entered number is greater than those in the"
    },
    {
        "original": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n",
        "sampled": "def text_match_two(text):\n    \"\"\"\n    >>> text_match_two(\"ac\")\n    'Not matched!'\n    >>> text_match_two(\"dc\")\n    'Not matched!'\n    >>> text_match_two(\"abba\")\n    'Found a match!'\n    \"\"\"\n    # TODO: Write your code here\n    if text.count('a')!= 1:\n        return 'Not matched!'\n    if text.count('b') == 0:\n        return 'Not matched!'\n    if text.count('a') == 1 and text.count('b') > 0:"
    },
    {
        "original": "def last_Digit(n) :\r\n    return (n % 10) ",
        "sampled": "def last_Digit(n):\n    return n % 10\ndef last_Digit(n):\n    return n % 10\ndef last_Digit(n):\n    return n % 10\ndef last_Digit(n):\n    return n % 10\ndef last_Digit(n):\n    return n % 10\ndef last_Digit(n):\n    return n % 10\ndef last_Digit(n):\n    return n % 10\ndef last_Digit(n):\n    return n % 10"
    },
    {
        "original": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ",
        "sampled": "def neg_nos(nums):\n    \"\"\"\n    >>> neg_nos([-1,4,5,-6])\n    -1,-6\n    >>> neg_nos([-1,-2,3,4])\n    -1,-2\n    >>> neg_nos([-7,-6,8,9])\n    -7,-6\n    \"\"\"\n    return [x for x in nums if x < 0]\ndef neg_nos(nums):\n    \"\"\"\n    >>> neg_nos([-1,4,5,-6])\n    -1,-6\n    >>> neg_nos([-1,-2,3,4])"
    },
    {
        "original": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
        "sampled": "def remove_vowels(s):\n    \"\"\"\n    >>> remove_vowels(\"python\")\n    'phton'\n    >>> remove_vowels(\"programming\")\n    'rgm'\n    >>> remove_vowels(\"language\")\n    'agae'\n    \"\"\"\n    return \"\".join(c for c in s if c not in \"aeiou\")\nassert remove_vowels(\"python\") == \"phton\"\nassert remove_vowels(\"programming\") == \"rgm\"\nassert remove_vowels(\"language\") == \"agae\"\ndef remove"
    },
    {
        "original": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ",
        "sampled": "def count_bidirectional(iterable):\n    \"\"\"\n    >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )\n    '3'\n    >>> count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] )\n    '2'\n    >>> count_bidirectional([(5, 6), (1, 2), (6, "
    },
    {
        "original": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x",
        "sampled": "\"\"\"\ndef multiple_to_single(numbers):\n    return sum(numbers)\nprint(multiple_to_single([11, 33, 50]))\nprint(multiple_to_single([-1,2,3,4,5,6]))\nprint(multiple_to_single([10,15,20,25]))"
    },
    {
        "original": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))",
        "sampled": "assert find_adverb_position(\"we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"we can see the sky\")==(0, 7, 'clearly')\nassert"
    },
    {
        "original": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea",
        "sampled": "\"\"\"\ndef surfacearea_cube(side):\n    return side**2 * 6\nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600"
    },
    {
        "original": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "sampled": "\"\"\"\ndef positive_count(arr):\n    return sum(1 for i in arr if i > 0) / len(arr)\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0."
    },
    {
        "original": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
        "sampled": "def largest_neg_2(nums):\n    return max(filter(lambda x: x < 0, nums))\nassert largest_neg_2([1,2,3,-4,-6]) == -6\nassert largest_neg_2([1,2,3,-8,-9]) == -9\nassert largest_neg_2([1,2,3,4,-1]) == -1\ndef largest_neg_3(nums):\n    return max(filter(lambda x: x < 0, nums), default=-1)\nassert largest_neg"
    },
    {
        "original": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ",
        "sampled": ", 2), (1, 2, 3, 4), (5, 6, 7, 8)], 3) == '[(7, 8, 4), (11, 8, 1), (1, 2, 3)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 1, 2), (1, 2, 3, 4), (5, 6, 7, 8)], 4) == '[(7, 8), ("
    },
    {
        "original": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "sampled": "5, 11), (3, 3), (9, 5)) ) == ((21, 45), (28, 75), (9, 30), (27, 59))\nassert index_multiplication(((4, 6), (7, 8), (5, 12), (4, 13)),((9, 10), (6, 12), (4, 4), (10, 6)) ) == ((24, 54), (32, 88),"
    },
    {
        "original": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ",
        "sampled": "\"\"\"\ndef count_Occurrence(list,element):\n    count = 0\n    for i in list:\n        if i in element:\n            count += 1\n    return count\nprint(count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]))\nprint(count_Occurrence((1,2,3,4,5,6),[1,2]))\nprint(count_Occurrence(('a', 'a', 'c', 'b', 'd'),['"
    },
    {
        "original": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums",
        "sampled": "\"\"\"\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1"
    },
    {
        "original": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
        "sampled": "def cal_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88\ndef cal_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\nassert cal_sum(9) == 49\nassert cal_sum(1"
    },
    {
        "original": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ",
        "sampled": "def check_Triangle(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return 'Yes'\n    else:\n        return 'No'\nprint(check_Triangle(1,5,2,5,4,6))\nprint(check_Triangle(1,1,1,4,1,5))\nprint(check_Triangle(1,1,1,1,1,1))\n# +\n# 10. Write a python function to check whether the given number is a palindrome"
    },
    {
        "original": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result",
        "sampled": "def extract_string(list_of_strings, size):\n    # Your code here\n    return list_of_strings[0:size]\n# Tests\nassert extract_string(['Python', 'list', 'exercises', 'practice','solution'],8)==['practice','solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice','solution'],6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice','solution'],9)==['exercises']\n# +\n# 1. Write a"
    },
    {
        "original": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))",
        "sampled": "# + [markdown] id=\"75713481\"\n# ### Task 3\n#\n# Write a function to remove all vowels from the given string using regex.\n#\n# Your code should pass these tests:\n#\n# assert remove_vowels('Hello world!') == 'Hll wrld!'\n# assert remove_vowels('Hello world!!') == 'Hll wrld!'\n# assert remove_vowels('Hello world!!') == 'Hll wrld!'\n#\n#\n# + id=\"87"
    },
    {
        "original": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None",
        "sampled": "def loss_amount(amount,loss):\n    if amount>loss:\n        return amount-loss\n    else:\n        return None\ndef loss_amount(amount,loss):\n    if amount>loss:\n        return amount-loss\n    else:\n        return None\ndef loss_amount(amount,loss):\n    if amount>loss:\n        return amount-loss\n    else:\n        return None\ndef loss_amount(amount,loss):\n    if amount>loss:\n        return amount-loss\n    else:\n        return None\ndef loss_amount(amount,loss):\n    if amount>loss"
    },
    {
        "original": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ",
        "sampled": "def sumofFactors(n):\n    return sum(filter(lambda x: x % 2 == 0, range(1, n + 1)))\ndef sumofFactors(n):\n    return sum(filter(lambda x: x % 2 == 0, range(1, n + 1)))\ndef sumofFactors(n):\n    return sum(filter(lambda x: x % 2 == 0, range(1, n + 1)))\ndef sumofFactors(n):\n    return sum(filter(lambda x: x % 2 =="
    },
    {
        "original": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "sampled": "# +\n# 1.1.2.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2"
    },
    {
        "original": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False",
        "sampled": "def check_monthnumb_string(monthnumb):\n    \"\"\"\n    >>> check_monthnumb_string('2')\n    True\n    >>> check_monthnumb_string('3')\n    False\n    >>> check_monthnumb_string('12')\n    True\n    \"\"\"\n    if monthnumb in ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']:\n        return True\n    else:\n        return False\nif __name__ == '__main__':\n    import"
    },
    {
        "original": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result",
        "sampled": "\"\"\"\ndef reverse_string_list(string_list):\n    return [\"\".join(reversed(string)) for string in string_list]\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])"
    },
    {
        "original": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList",
        "sampled": "'''\ndef Find_Min(list):\n    # Write your code here\n    if len(list) == 0:\n        return []\n    if len(list) == 1:\n        return list[0]\n    if len(list) == 2:\n        if len(list[0]) < len(list[1]):\n            return list[0]\n        else:\n            return list[1]\n    if len(list) == 3:\n        if len(list[0]) < len(list[1]):\n            if len(list[0]) < len(list[2]):"
    },
    {
        "original": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area",
        "sampled": "\"\"\"\ndef rectangle_area(width, height):\n    return width * height\nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\""
    },
    {
        "original": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)",
        "sampled": "def remove_uppercase(s):\n    return re.sub(r'[A-Z]+', '', s)\nprint(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\nprint(remove_uppercase('wAtchTheinTernEtrAdIo'))\nprint(remove_uppercase('VoicESeaRchAndreComMendaTionS'))\n# -\n# ### 1.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2"
    },
    {
        "original": "def Extract(lst): \r\n    return [item[0] for item in lst] ",
        "sampled": "\"\"\"\ndef Extract(list):\n    return [item[0] for item in list]\nprint(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\nprint(Extract([[1,2,3],[4, 5]]))\nprint(Extract([[9,8,1],[1,2]]))"
    },
    {
        "original": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr",
        "sampled": "def upper_ctr_2(s):\n    return sum(1 for c in s if c.isupper())\nassert upper_ctr_2('PYthon') == 1\nassert upper_ctr_2('BigData') == 1\nassert upper_ctr_2('program') == 0\ndef upper_ctr_3(s):\n    return sum(c.isupper() for c in s)\nassert upper_ctr_3('PYthon') == 1\nassert upper_ctr_3('BigData') == 1\nassert upper_ctr_"
    },
    {
        "original": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
        "sampled": "red'], ['white', 'blue', 'green'], ['white', 'blue', 'green','red'], ['black'], ['black','red'], ['black', 'green'], ['black', 'green','red'], ['black', 'blue'], ['black', 'blue','red'], ['black', 'blue', 'green'], ['black', 'blue', 'green','red'], ['black', 'white'], ['black', 'white','red'], ['black', 'white', 'green'], ['black', 'white', 'green','red'], ['black', 'white', 'blue'],"
    },
    {
        "original": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
        "sampled": "\"\"\"\ndef max_subarray_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = nums[0]\n    current_product = 1\n    for i in range(1, len(nums)):\n        current_product = max(nums[i], current_product * nums[i])\n        max_product = max(max_product, current_product)\n    return max_product\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -"
    },
    {
        "original": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result",
        "sampled": "\"\"\"\ndef check_value(dictionary, value):\n    for key, value in dictionary.items():\n        if value == value:\n            return True\n    return False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12,"
    },
    {
        "original": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1",
        "sampled": "def drop_empty_2(d):\n    return {k: v for k, v in d.items() if v is not None}\nassert drop_empty_2({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty_2({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty_2({'c1': None, 'c2': 'Green"
    },
    {
        "original": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ",
        "sampled": "\"\"\"\ndef find_peak(arr, n):\n    # Write your code here\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\nprint(find_peak([1, 3, 20, 4, 1, 0], 6))\nprint(find_peak([2, 3, 4, 5, 6], 5))\nprint(find_peak([8, 9, 11, 12, 14, 15"
    },
    {
        "original": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
        "sampled": "def decimal_to_Hexadecimal(number):\n    # your code here\n    return 0\nassert decimal_to_Hexadecimal(10) == 10\nassert decimal_to_Hexadecimal(2) == 2\nassert decimal_to_Hexadecimal(33) == 21\ndef decimal_to_Binary(number):\n    # your code here\n    return 0\nassert decimal_to_Binary(10) == 10\nassert decimal_to_Binary(2) == 10\nassert decimal_to_Binary(33)"
    },
    {
        "original": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
        "sampled": "\"\"\"\ndef max_product(nums, n):\n    \"\"\"\n    :type nums: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return nums[0]\n    if n == 2:\n        return max(nums[0], nums[1])\n    max_product = 0\n    for i in range(n):\n        max_product = max(max_product, nums[i] * max_product)\n    return max_product\nif __name__ == '__main__':\n    print(max_product([3"
    },
    {
        "original": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
        "sampled": "\"\"\"\ndef max_profit(prices, k):\n    \"\"\"\n    :type prices: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(prices) < k:\n        return 0\n    if k == 1:\n        return max(prices)\n    if k == 2:\n        return max(prices[0] - prices[1], prices[1] - prices[2])\n    if k == 3:\n        return max(prices[0] - prices[1], max(prices[1] - prices[2], prices[2] -"
    },
    {
        "original": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "sampled": "\"\"\"\ndef add_pairwise(nums):\n    \"\"\"\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    >>> add_pairwise((2, 6, 8, 9, 11))\n    (8, 14, 17, 20)\n    >>> add_pairwise((3, 7, 9, 10, 12))\n    (10, 16, 19, "
    },
    {
        "original": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ",
        "sampled": "def find_remainder(arr,n,m):\n    # Write your code here\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] % n == m:\n            return arr[i] % n\n    return -1\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],"
    },
    {
        "original": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "sampled": "def check_Consecutive(list):\n    if len(list) < 2:\n        return False\n    if list[0] == list[1]:\n        return False\n    for i in range(1,len(list)):\n        if list[i] == list[i-1]+1:\n            return True\n        else:\n            return False\nprint(check_Consecutive([1,2,3,4,5]))\nprint(check_Consecutive([1,2,3,5,6]))\nprint(check_Consecutive([1,2,1]))\n# +"
    },
    {
        "original": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)",
        "sampled": " 3)}\nassert tuple_intersection([(1, 2), (2, 3), (3, 4), (4, 5)], [(1, 2), (2, 3), (3, 4), (4, 5)]) == {(1, 2), (2, 3), (3, 4), (4, 5)}\nassert tuple_intersection([(1, 2), (2, 3), (3, 4), (4, 5)], [(1, 2), (2, 3), (3, "
    },
    {
        "original": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2",
        "sampled": "# +\ndef replace_char(string, char_to_replace, new_char):\n    \"\"\"\n    string: a string\n    char_to_replace: a character\n    new_char: a character\n    returns: a string with all instances of char_to_replace replaced with new_char\n    \"\"\"\n    # Your code here\n    return string.replace(char_to_replace, new_char)\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_"
    },
    {
        "original": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
        "sampled": "\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\nprint(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\nprint(sort_counter({'Math':400, 'Physics':300, 'Chemistry':250}))\nprint(sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250}))"
    },
    {
        "original": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum",
        "sampled": "\"\"\"\ndef big_sum(arr):\n    return max(arr) + min(arr)\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8"
    },
    {
        "original": "def is_lower(string):\r\n  return (string.lower())",
        "sampled": "def is_upper(s):\n    \"\"\"\n    >>> is_upper(\"InValid\")\n    'invalid'\n    >>> is_upper(\"TruE\")\n    'TRUE'\n    >>> is_upper(\"SenTenCE\")\n    'SENTENCE'\n    \"\"\"\n    # Your code here\n    if s.isupper():\n        return s.lower()\n    else:\n        return s.upper()\nassert is_upper(\"InValid\") == \"invalid\"\nassert is_upper(\"TruE\") == \"TRUE\"\nassert is_upper(\"SenTenCE\") == \"SENTENCE\"\ndef is_"
    },
    {
        "original": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
        "sampled": "def remove_uppercase(s):\n    \"\"\"\n    >>> remove_uppercase(\"PYTHon\")\n    'PYTH'\n    >>> remove_uppercase(\"FInD\")\n    'FID'\n    >>> remove_uppercase(\"STRinG\")\n    'STRG'\n    \"\"\"\n    return s.upper()\ndef remove_punctuation(s):\n    \"\"\"\n    >>> remove_punctuation(\"PYTHon\")\n    'PYTH'\n    >>> remove_punctuation(\"FInD\")\n    'FID'\n    >>> remove_punctuation(\"STRinG\")\n    'STRG'\n    \"\"\"\n    return"
    },
    {
        "original": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ",
        "sampled": "def first_Digit(n):\n    return n // 10\ndef first_Digit(n):\n    return n // 10\ndef first_Digit(n):\n    return n // 10\ndef first_Digit(n):\n    return n // 10\ndef first_Digit(n):\n    return n // 10\ndef first_Digit(n):\n    return n // 10\ndef first_Digit(n):\n    return n // 10\ndef first_Digit(n):\n    return n // 10"
    },
    {
        "original": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
        "sampled": "def get_max_occuring_char_2(string):\n    \"\"\"\n    >>> get_max_occuring_char_2(\"data\")\n    'a'\n    >>> get_max_occuring_char_2(\"create\")\n    'e'\n    >>> get_max_occuring_char_2(\"brilliant girl\")\n    'i'\n    \"\"\"\n    return max(set(string), key=string.count)\nassert get_max_occuring_char_2(\"data\") == \"a\"\nassert get_max_occur"
    },
    {
        "original": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
        "sampled": "\"\"\"\ndef is_subset_sum(arr, sum, target):\n    if sum == target:\n        return True\n    if sum > target:\n        return False\n    if sum == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] <= sum:\n            if is_subset_sum(arr[:i] + arr[i+1:], sum - arr[i], target):\n                return True\n    return False\nprint(is_subset_sum([3, 34, 4, 12, 5, 2], "
    },
    {
        "original": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ",
        "sampled": " */\n        return match(s) == 'Yes';\n    }\n};"
    },
    {
        "original": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ",
        "sampled": "def first_Factorial_Divisible_Number(x):\n    \"\"\"\n    :param x:\n    :return:\n    \"\"\"\n    for i in range(1, x):\n        if x % i!= 0:\n            continue\n        else:\n            return i\n    return x\nif __name__ == '__main__':\n    print(first_Factorial_Divisible_Number(10))\n    print(first_Factorial_Divisible_Number(15))\n    print(first_Factorial_Divisible_Number(5))"
    },
    {
        "original": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ",
        "sampled": "def remove_matching_tuple(tuple_list, tuple_to_remove):\n    \"\"\"\n    >>> remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n    [('you', '?')]\n    >>> remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')])\n    [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n    >>>"
    },
    {
        "original": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
        "sampled": "\"\"\"\ndef largest_palindrome(array, n):\n    # Write your code here\n    # array = [1, 232, 54545, 999991], n = 4\n    # array = [1, 2, 3, 4, 5, 50], n = 6\n    # array = [1, 3, 7, 9, 45], n = 5\n    # array = [1, 2, 3, 4, 5, 50], n ="
    },
    {
        "original": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
        "sampled": "\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute the binomial probability of n successes in k trials,\n    where each trial has probability p.\n    \"\"\"\n    # TODO: Implement me!\n    return 0\ndef test_binomial_probability():\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(11, 6, 2.0/4) == 0"
    },
    {
        "original": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup",
        "sampled": " */\n        public static List<Tuple<int, int>> sort_tuple(List<Tuple<int, int>> tuples)\n        {\n            return tuples.OrderBy(x => x.Item2).ThenBy(x => x.Item1);\n        }\n    }\n}"
    },
    {
        "original": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area",
        "sampled": "\"\"\"\ndef area_pentagon(n):\n    return n*(n+1)*(2*n+1)/6\ndef test_area_pentagon():\n    assert area_pentagon(5)==43.01193501472417\n    assert area_pentagon(10)==172.0477400588967\n    assert area_pentagon(15)==387.10741513251753\nif __name__ == '__main"
    },
    {
        "original": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
        "sampled": "\"\"\"\ndef frequency_Of_Largest(n,arr):\n    # Write your code here\n    max_value = 0\n    count = 0\n    for i in range(n):\n        if arr[i] > max_value:\n            max_value = arr[i]\n            count = 1\n        elif arr[i] == max_value:\n            count += 1\n    return count\nprint(frequency_Of_Largest(5,[1,2,3,4,4]))\nprint(frequency_Of_Largest(3,[5,6,5]))"
    },
    {
        "original": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ",
        "sampled": "\"\"\"\ndef extract_symmetric(tuples):\n    return set(tuple(sorted(t)) for t in tuples)\ndef extract_symmetric_2(tuples):\n    return set(tuple(sorted(t)) for t in tuples if t[0] == t[1])\ndef extract_symmetric_3(tuples):\n    return set(tuple(sorted(t)) for t in tuples if t[0] == t[1] or t[1] == t[0])\ndef extract_symmetric_4(tuples):\n    return set(tuple(sorted(t))"
    },
    {
        "original": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total",
        "sampled": "def sum_gp(a,b,n):\n    \"\"\"\n    >>> sum_gp(1,5,2)\n    31\n    >>> sum_gp(1,5,4)\n    341\n    >>> sum_gp(2,6,3)\n    728\n    \"\"\"\n    return a*(b**n-1)//(n-1)\ndef sum_gp(a,b,n):\n    \"\"\"\n    >>> sum_gp(1,5,2)\n    31\n    >>> sum_gp(1,5,4)\n    341\n    >>> sum"
    },
    {
        "original": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
        "sampled": "\"\"\"\ndef binary_search(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: bool\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\nif __name__ == '__main__':\n    assert binary_search([1"
    },
    {
        "original": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons",
        "sampled": "1.0, -0.7320508075688767), (4.0, 1.0), (4.0, -0.7320508075688767), (1.0, -0.7320508075688767), (1.0, -4.196152422706632)]]\n            assert calculate_polygons(1,1, 4, 4, 4"
    },
    {
        "original": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ",
        "sampled": "def binary_to_integer(binary_tuple):\n    \"\"\"\n    >>> binary_to_integer((1, 1, 0, 1, 0, 0, 1))\n    '105'\n    >>> binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1))\n    '101'\n    >>> binary_to_integer((1, 1, 0, 1, 0, 1))\n    '53'\n    \"\"\"\n    return int(''.join(map(str"
    },
    {
        "original": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)",
        "sampled": "def remove_uppercase(s):\n    \"\"\"\n    >>> remove_uppercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    >>> remove_uppercase('ProducTnamEstreAmIngMediAplAYer')\n    'PTEAIMAAY'\n    >>> remove_uppercase('maNufacTuredbYSheZenTechNolOGIes')\n    'NTYSZTNOGI'\n    \"\"\"\n    return re.sub(r'[A-Z]', '', s)\nif __"
    },
    {
        "original": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums",
        "sampled": "'''\ndef heap_queue_smallest(nums, k):\n    heap = []\n    for i in range(len(nums)):\n        heapq.heappush(heap, nums[i])\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap\nprint(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],3))\nprint(heap_queue_smallest([25,"
    },
    {
        "original": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA",
        "sampled": "\"\"\"\ndef surfacearea_cone(radius,height):\n    return 3.14*radius*radius*height/3\nprint(surfacearea_cone(5,12))\nprint(surfacearea_cone(10,15))\nprint(surfacearea_cone(19,17))"
    },
    {
        "original": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd",
        "sampled": "def gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\nprint(gcd(12,17))\nprint(gcd(4,6))\nprint(gcd(2,9))\n# +\n# 1. Write a python function to find gcd of two positive integers. \n# 2. Write a python function to find gcd of three positive integers. \n# 3. Write a python function to find gcd of four positive integers. \n# 4. Write a python"
    },
    {
        "original": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter",
        "sampled": "def diameter_circle(radius):\n    return 2*radius\ndef diameter_square(side):\n    return 4*side\ndef diameter_rectangle(width, height):\n    return 2*(width+height)\ndef diameter_triangle(base, height):\n    return 0.5*base*height\ndef diameter_circle_test():\n    assert diameter_circle(10)==20\n    assert diameter_circle(40)==80\n    assert diameter_circle(15)==30\ndef diameter_square_test():\n    assert diameter_square("
    },
    {
        "original": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ",
        "sampled": "# +\n# 1. Write a function to return the length of the longest word in the given string.\n# 2. Write a function to return the length of the shortest word in the given string.\n# 3. Write a function to return the length of the longest word in the given string.\n# 4. Write a function to return the length of the shortest word in the given string.\n# 5. Write a function to return the length of the longest word in the given string.\n# 6. Write a function to return the length of the shortest word in the given"
    }
]